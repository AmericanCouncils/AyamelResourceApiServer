.editorconfig:; top-most EditorConfig file
.editorconfig:; Unix-style newlines with a newline ending every file
.gitignore:*.DS-Store
.gitmodules:[submodule "dev-ansible/common"]
.gitmodules:	path = dev-ansible/common
.gitmodules:	url = https://github.com/AmericanCouncils/ac-common-ansible.git
.travis.yml:    - 5.5
.travis.yml:    - MONGO_VERSION=1.2.12
.travis.yml:    - mongodb
.travis.yml:    - rabbitmq
.travis.yml:    - elasticsearch
.travis.yml:    - sh -c "if [ `php-config --vernum` -ge 50500 ] ; then pecl config-set preferred_state beta; printf "yes\n" | pecl install apcu ; else echo 'extension="apc.so"' >> ./travis.php.ini ;fi"
.travis.yml:    - phpenv config-add travis.php.ini
.travis.yml:    - cp app/config/parameters.default.yml app/config/parameters.yml
.travis.yml:    - sudo apt-get update -qq
.travis.yml:    - sudo apt-get install -qq mediainfo 
.travis.yml:#    - util/install_ffmpeg.sh
.travis.yml:#    - sudo apt-get install -qq ffmpegthumbnailer
.travis.yml:    - composer self-update
.travis.yml:    - composer install --dev
.travis.yml:    - app/console cache:clear --env=test
.travis.yml:script: bin/phpunit --exclude-group=transcoding
README.md:[![Build Status](https://travis-ci.org/AmericanCouncils/AyamelResourceApiServer.png?branch=master)](https://travis-ci.org/AmericanCouncils/AyamelResourceApiServer)
README.md:* **Resource** - A Resource is basically a metadata container that references actual multimedia content.  Actual content could be a series of files on a server, or links to other resources on the web, such as YouTube videos.
README.md:* **Relation** - A Relation is a metadata structure that defines how one resource relates to another.  Relations are critical because search relies on them.  For example, if you want to search for a video, and there is a transcript of that video, then search will return hits on both the transcript and the video.  This works because of relations - the video is a resource, and the transcript is also a resource, the relation lets the search indexer know that these two resources should reference each other during search.  Relations are also used to define certain types of resources that don't contain actual content.  For example a collection of videos about a particular theme may just contain relations that reference other individual resources.
README.md:* `bin/phpunit --exclude-group=transcoding` to run the tests.
README.md:If you will contribute, please follow the [PSR coding standards](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md), and make sure that new features are covered by thorough unit and/or functional tests.
app/AppKernel.php:            //from standard-edition
app/AppKernel.php:        if (in_array($this->getEnvironment(), array('dev', 'test'))) {
app/AppKernel.php:        $loader->load(__DIR__.'/config/config_'.$this->getEnvironment().'.yml');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
app/Resources/NelmioApiDocBundle/views/layout.html.twig:        <meta charset="utf-8" />
app/Resources/NelmioApiDocBundle/views/layout.html.twig:        <!-- Always force latest IE rendering engine (even in intranet) and Chrome Frame -->
app/Resources/NelmioApiDocBundle/views/layout.html.twig:        <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible" />
app/Resources/NelmioApiDocBundle/views/layout.html.twig:              margin-left: 10px;
app/Resources/NelmioApiDocBundle/views/layout.html.twig:            Documentation auto-generated on {{ date }}
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                rawData = $container.data('raw-response');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $btn = $container.parents('.pane').find('.to-raw');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $btn.removeClass('to-raw');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $btn.addClass('to-prettify');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                rawData = $container.data('raw-response');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $btn = $container.parents('.pane').find('.to-prettify');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $btn.removeClass('to-prettify');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $btn.addClass('to-raw');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    container.data('raw-response', data);
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    container.parents('.pane').find('.to-prettify').text('Raw');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    container.parents('.pane').find('.to-raw').text('Raw');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        if (url.indexOf('{' + key + '}') !== -1) {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        $('input:not(.content-type), button', $(self)).removeAttr('disabled');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $('.pane.sandbox').delegate('.to-raw', 'click', function(e) {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $('.pane.sandbox').delegate('.to-prettify', 'click', function(e) {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $('.pane.sandbox').delegate('.to-expand, .to-shrink', 'click', function(e) {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    var $label = $(this).parents('.result').find('a.to-expand');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    if ($headers.hasClass('to-expand')) {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        $headers.removeClass('to-expand');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        $headers.addClass('to-shrink');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        $headers.removeClass('to-shrink');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        $headers.addClass('to-expand');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                $('.pane.sandbox').on('click', '.set-content-type', function(e) {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                        if ($.trim($(this).val().toLowerCase()) === 'content-type') {
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    $element.find('input.key').val('Content-Type');
app/Resources/NelmioApiDocBundle/views/layout.html.twig:                    var api_key = -1 == api_key_end
app/Resources/NelmioApiDocBundle/views/method.html.twig:            <li class="selected" data-pane="content">Documentation</li>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                <li data-pane="sandbox">Sandbox</li>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                                        <input type="text" class="value" placeholder="{% if infos.description is defined %}{{ infos.description }}{% else %}Value{% endif %}" /> <span class="remove">-</span>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                                        <input type="text" class="value" placeholder="{% if infos.description is defined %}{{ infos.description }}{% else %}Value{% endif %}" /> <span class="remove">-</span>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                                        <input type="text" class="value" placeholder="{% if infos.dataType %}[{{ infos.dataType }}] {% endif %}{% if infos.description %}{{ infos.description }}{% else %}Value{% endif %}" /> <span class="remove">-</span>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                                <input type="text" class="value" placeholder="Value" /> <span class="remove">-</span>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                        <fieldset class="request-content">
app/Resources/NelmioApiDocBundle/views/method.html.twig:                                <input type="text" class="key content-type" value="Content-Type" disabled="disabled" />
app/Resources/NelmioApiDocBundle/views/method.html.twig:                                <button class="set-content-type">Set header</button> <small>Replaces header if set</small>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                    <script type="text/x-tmpl" class="tuple_template">
app/Resources/NelmioApiDocBundle/views/method.html.twig:                        <input type="text" class="value" placeholder="Value" /> <span class="remove">-</span>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                        <h4>Response Headers&nbsp;<small>[<a href="" class="to-expand">Expand</a>]</small></h4>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                        <pre class="headers to-expand"></pre>
app/Resources/NelmioApiDocBundle/views/method.html.twig:                        <h4>Response Body&nbsp;<small>[<a href="" class="to-raw">Raw</a>]</small></h4>
app/Resources/views/base.html.twig:<!--[if lt IE 7]> <div style=' clear: both; height: 59px; padding:0 0 0 15px; position: relative;'> <a href="http://windows.microsoft.com/en-US/internet-explorer/products/ie/home?ocid=ie6_countdown_bannercode"><img src="http://storage.ie6countdown.com/assets/100/images/banners/warning_bar_0000_us.jpg" border="0" height="42" width="820" alt="You are using an outdated browser. For a faster, safer browsing experience, upgrade for free today." /></a></div> <![endif]-->
app/Resources/views/base.html.twig:			padding-top: 60px;
app/Resources/views/base.html.twig:		.main-container {
app/Resources/views/base.html.twig:			padding-bottom: 40px;
app/Resources/views/base.html.twig:			text-align: justify;			
app/Resources/views/base.html.twig:		.main-content {
app/Resources/views/base.html.twig:			min-height: 500px;
app/Resources/views/base.html.twig:			background-color: transparent;
app/Resources/views/base.html.twig:			font-size: 18px;
app/Resources/views/base.html.twig:		.toc-top-link {
app/Resources/views/base.html.twig:			margin-left: 5px;
app/Resources/views/base.html.twig:			font-size: 10px;
app/Resources/views/base.html.twig:			background-color: #f8f8f8;
app/Resources/views/base.html.twig:			margin-bottom: 5px;
app/Resources/views/base.html.twig:			margin-right: 5px;
app/Resources/views/base.html.twig:	<a href="https://github.com/AmericanCouncils/AyamelResourceApiServer"><img style="position: absolute; top: 0; right: 0; border: 0; z-index: 999999" src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub"></a>
app/Resources/views/base.html.twig:    <div class="container main-container">
app/Resources/views/base.html.twig:		<!-- optional breadcrumbs -->
app/Resources/views/base.html.twig:		<!-- optional page title -->
app/Resources/views/base.html.twig:        <div class="page-title">
app/Resources/views/base.html.twig:		<!-- main content: expands if right column is empty -->
app/Resources/views/base.html.twig:	          <div class="main-content span16">
app/Resources/views/base.html.twig:	  	<!-- start footer block -->
app/Resources/views/base.html.twig:	  	<!-- end footer block -->
app/Resources/views/base.html.twig:</div> <!-- /container -->
app/SymfonyRequirements.php:        $this->fulfilled = (Boolean) $fulfilled;
app/SymfonyRequirements.php:        $this->testMessage = (string) $testMessage;
app/SymfonyRequirements.php:        $this->helpHtml = (string) $helpHtml;
app/SymfonyRequirements.php:        $this->helpText = null === $helpText ? strip_tags($this->helpHtml) : (string) $helpText;
app/SymfonyRequirements.php:        $this->optional = (Boolean) $optional;
app/SymfonyRequirements.php:        return $this->fulfilled;
app/SymfonyRequirements.php:        return $this->testMessage;
app/SymfonyRequirements.php:        return $this->helpText;
app/SymfonyRequirements.php:        return $this->helpHtml;
app/SymfonyRequirements.php:        return $this->optional;
app/SymfonyRequirements.php:        return new ArrayIterator($this->requirements);
app/SymfonyRequirements.php:        $this->requirements[] = $requirement;
app/SymfonyRequirements.php:        $this->add(new Requirement($fulfilled, $testMessage, $helpHtml, $helpText, false));
app/SymfonyRequirements.php:        $this->add(new Requirement($fulfilled, $testMessage, $helpHtml, $helpText, true));
app/SymfonyRequirements.php:        $this->add(new PhpIniRequirement($cfgName, $evaluation, $approveCfgAbsence, $testMessage, $helpHtml, $helpText, false));
app/SymfonyRequirements.php:        $this->add(new PhpIniRequirement($cfgName, $evaluation, $approveCfgAbsence, $testMessage, $helpHtml, $helpText, true));
app/SymfonyRequirements.php:        $this->requirements = array_merge($this->requirements, $collection->all());
app/SymfonyRequirements.php:        return $this->requirements;
app/SymfonyRequirements.php:        foreach ($this->requirements as $req) {
app/SymfonyRequirements.php:            if (!$req->isOptional()) {
app/SymfonyRequirements.php:        foreach ($this->requirements as $req) {
app/SymfonyRequirements.php:            if (!$req->isFulfilled() && !$req->isOptional()) {
app/SymfonyRequirements.php:        foreach ($this->requirements as $req) {
app/SymfonyRequirements.php:            if ($req->isOptional()) {
app/SymfonyRequirements.php:        foreach ($this->requirements as $req) {
app/SymfonyRequirements.php:            if (!$req->isFulfilled() && $req->isOptional()) {
app/SymfonyRequirements.php:        foreach ($this->requirements as $req) {
app/SymfonyRequirements.php:            if (!$req->isFulfilled() && $req instanceof PhpIniRequirement) {
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addPhpIniRequirement(
app/SymfonyRequirements.php:            $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:                $this->addRequirement(
app/SymfonyRequirements.php:                $this->addRequirement(
app/SymfonyRequirements.php:        $this->addPhpIniRequirement('detect_unicode', false);
app/SymfonyRequirements.php:            $this->addPhpIniRequirement(
app/SymfonyRequirements.php:            $this->addPhpIniRequirement(
app/SymfonyRequirements.php:            $this->addPhpIniRequirement(
app/SymfonyRequirements.php:            $this->addPhpIniRecommendation(
app/SymfonyRequirements.php:        $this->addRequirement(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            file_get_contents(__FILE__) === file_get_contents(__DIR__.'/../vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/skeleton/app/SymfonyRequirements.php'),
app/SymfonyRequirements.php:            'Requirements file should be up-to-date',
app/SymfonyRequirements.php:            'Your requirements file is outdated. Run composer install and re-check your configuration.'
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            'Your project might malfunction randomly due to PHP bug #52083 ("Notice: Trying to get property of non-object"). Install PHP 5.3.4 or newer.'
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            'PHP-XML module should be installed',
app/SymfonyRequirements.php:            'Install and enable the <strong>PHP-XML</strong> module.'
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            $this->addRecommendation(
app/SymfonyRequirements.php:                $reflector->info();
app/SymfonyRequirements.php:            $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:        $this->addPhpIniRecommendation('short_open_tag', false);
app/SymfonyRequirements.php:        $this->addPhpIniRecommendation('magic_quotes_gpc', false, true);
app/SymfonyRequirements.php:        $this->addPhpIniRecommendation('register_globals', false, true);
app/SymfonyRequirements.php:        $this->addPhpIniRecommendation('session.auto_start', false);
app/SymfonyRequirements.php:        $this->addRecommendation(
app/SymfonyRequirements.php:            $this->addRecommendation(
app/check.php:$iniPath = $symfonyRequirements->getPhpIniConfigPath();
app/check.php:foreach ($symfonyRequirements->getRequirements() as $req) {
app/check.php:    if (!$req->isFulfilled()) {
app/check.php:foreach ($symfonyRequirements->getRecommendations() as $req) {
app/check.php:    $result = $requirement->isFulfilled() ? 'OK' : ($requirement->isOptional() ? 'WARNING' : 'ERROR');
app/check.php:    echo $requirement->getTestMessage() . "\n";
app/check.php:    if (!$requirement->isFulfilled()) {
app/check.php:        echo sprintf("          %s\n\n", $requirement->getHelpText());
app/config/config.yml:    - { resource: '@AyamelResourceBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: '@AyamelApiBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: '@AyamelFilesystemBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: '@AyamelTranscodingBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: '@AyamelYouTubeBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: '@AyamelMediaInfoBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: '@AyamelSearchBundle/Resources/config/config.yml' }
app/config/config.yml:    - { resource: parameters.yml }
app/config/config.yml:        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar
app/config/config.yml:            default_format: "Y-m-dTH:i:s" # ISO8601
app/config/config.yml:            allow_headers: ['X-Requested-With', 'Content-Type', 'Origin']
app/config/config_dev.yml:    - { resource: config.yml }
app/config/config_prod.yml:    - { resource: config.yml }
app/config/config_test.yml:    - { resource: config_dev.yml }
app/config/parameters.default.yml:    #if you use ffmpeg w/ libvpx to encode webm, it doesn't seem to let you specify "-threads 0" to maximize cpu usage, instead
app/console:// read http://symfony.com/doc/current/book/installation.html#configuration-and-setup for more information
app/console:$env = $input->getParameterOption(array('--env', '-e'), getenv('SYMFONY_ENV') ?: 'dev');
app/console:$debug = getenv('SYMFONY_DEBUG') !== '0' && !$input->hasParameterOption(array('--no-debug', '')) && $env !== 'prod';
app/console:$application->run();
composer.json:    "name": "ayamel/resource-library-api-server",
composer.json:        "psr-0": { "": "src/" }
composer.json:    "minimum-stability": "beta",
composer.json:    "prefer-stable": true,
composer.json:            "url":"https://github.com/AmericanCouncils/model-traits"
composer.json:        "ext-apcu": "*",
composer.json:        "ext-curl": "*",
composer.json:        "ext-fileinfo": "*",
composer.json:        "ext-pcntl": "*",
composer.json:        "doctrine/mongodb-odm-bundle": "3.0.*@dev",
composer.json:        "symfony/assetic-bundle": "2.3.*",
composer.json:        "symfony/swiftmailer-bundle": "2.3.*",
composer.json:        "symfony/monolog-bundle": "2.3.*",
composer.json:        "sensio/distribution-bundle": "2.3.*",
composer.json:        "sensio/generator-bundle": "2.3.*",
composer.json:        "ac/transcoding-bundle": "0.4.*",
composer.json:        "oldsound/rabbitmq-bundle": "~1.1",
composer.json:        "nelmio/api-doc-bundle": "2.3.*",
composer.json:        "nelmio/cors-bundle": "1.1.*",
composer.json:        "jms/serializer-bundle": "0.13.*",
composer.json:        "ac/web-services-bundle": "dev-master",
composer.json:        "ac/media-info-bundle": "1.2.*",
composer.json:        "friendsofsymfony/elastica-bundle": "3.0.*@dev",
composer.json:        "ornicar/apc-bundle": "~1.0",
composer.json:        "ac/model-traits-bundle": "0.1.*"
composer.json:    "require-dev": {
composer.json:        "post-install-cmd": [
composer.json:        "post-update-cmd": [
composer.json:        "bin-dir": "bin",
composer.json:      "github-oauth":{
composer.json:    "minimum-stability": "dev",
composer.json:        "symfony-app-dir": "app",
composer.json:        "symfony-web-dir": "web"
composer.lock:        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file"
composer.lock:            "name": "ac/media-info-bundle",
composer.lock:            "target-dir": "AC/MediaInfoBundle",
composer.lock:                "symfony/framework-bundle": ">=2.1",
composer.lock:            "type": "symfony-bundle",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-07-31 14:47:46"
composer.lock:            "name": "ac/model-traits",
composer.lock:            "version": "dev-master",
composer.lock:                "url": "https://github.com/AmericanCouncils/model-traits.git",
composer.lock:                "url": "https://api.github.com/repos/AmericanCouncils/model-traits/zipball/10be154863bbdfd29d486a738f50164eacc7ff3a",
composer.lock:                "psr-4": {
composer.lock:                "source": "https://github.com/AmericanCouncils/model-traits/tree/master",
composer.lock:                "issues": "https://github.com/AmericanCouncils/model-traits/issues"
composer.lock:            "time": "2014-02-06 16:29:30"
composer.lock:            "name": "ac/model-traits-bundle",
composer.lock:            "target-dir": "AC/ModelTraitsBundle",
composer.lock:                "url": "https://github.com/AmericanCouncils/model-traits-bundle.git",
composer.lock:                "url": "https://api.github.com/repos/AmericanCouncils/model-traits-bundle/zipball/3cc884b0ffff79a47ee2655c9ad73d699dbb9be2",
composer.lock:                "ac/model-traits": "dev-master",
composer.lock:            "type": "symfony-bundle",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "model-traits",
composer.lock:            "time": "2014-02-06 15:57:56"
composer.lock:            "target-dir": "AC/Transcoding",
composer.lock:                "ext-fileinfo": "*",
composer.lock:                "symfony/event-dispatcher": ">=2.1, <2.4"
composer.lock:            "require-dev": {
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-08-28 14:29:42"
composer.lock:            "name": "ac/transcoding-bundle",
composer.lock:            "target-dir": "AC/TranscodingBundle",
composer.lock:                "symfony/framework-bundle": ">2.1, <2.4"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-08-12 21:59:50"
composer.lock:            "name": "ac/web-services-bundle",
composer.lock:            "version": "dev-master",
composer.lock:            "target-dir": "AC/WebServicesBundle",
composer.lock:                "jms/serializer-bundle": "~0.13.0",
composer.lock:                "symfony/framework-bundle": "~2.2",
composer.lock:                "jms/serializer-bundle": "<0.13"
composer.lock:            "require-dev": {
composer.lock:                "sensio/framework-extra-bundle": "~2.2",
composer.lock:            "type": "symfony-bundle",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-03-21 19:36:38"
composer.lock:                "url": "https://github.com/dflydev/dflydev-markdown.git",
composer.lock:                "url": "https://api.github.com/repos/dflydev/dflydev-markdown/zipball/6baed9b50f29c980795b6656d43722aadb126f7e",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "homepage": "http://github.com/dflydev/dflydev-markdown",
composer.lock:            "time": "2013-09-23 12:00:18"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "email": "roman@code-factory.org"
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2013-06-16 21:33:03"
composer.lock:            "require-dev": {
composer.lock:                "satooshi/php-coveralls": "~0.6"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "email": "roman@code-factory.org"
composer.lock:            "description": "Caching library offering an object-oriented API for many cache backends",
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2013-10-25 19:04:14"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.2.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "email": "roman@code-factory.org"
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2014-02-03 23:07:43"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.4.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "email": "roman@code-factory.org"
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2013-09-07 10:20:34"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "email": "roman@code-factory.org"
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2013-01-10 21:49:15"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "email": "roman@code-factory.org"
composer.lock:            "description": "Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.",
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2013-01-12 18:59:04"
composer.lock:                "doctrine/common": ">=2.1.0,<2.5-dev",
composer.lock:                "ext-mongo": ">=1.2.12,<1.6-dev",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2014-01-09 21:16:38"
composer.lock:            "name": "doctrine/mongodb-odm",
composer.lock:            "version": "1.0.0-BETA9",
composer.lock:                "url": "https://github.com/doctrine/mongodb-odm.git",
composer.lock:                "url": "https://api.github.com/repos/doctrine/mongodb-odm/zipball/4aae9b0151b6661567873700be6ac52877822d6e",
composer.lock:                "doctrine/common": ">=2.2.0,<2.5-dev",
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2013-06-06 19:15:45"
composer.lock:            "name": "doctrine/mongodb-odm-bundle",
composer.lock:            "version": "dev-master",
composer.lock:            "target-dir": "Doctrine/Bundle/MongoDBBundle",
composer.lock:                "doctrine/mongodb-odm": "~1.0.0-beta5@dev",
composer.lock:                "symfony/doctrine-bridge": "~2.1",
composer.lock:                "symfony/framework-bundle": "~2.1",
composer.lock:                "symfony/options-resolver": "~2.1"
composer.lock:            "require-dev": {
composer.lock:                "doctrine/data-fixtures": "@dev",
composer.lock:                "doctrine/data-fixtures": "Load data fixtures"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.0-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "homepage": "http://www.doctrine-project.org",
composer.lock:            "time": "2014-03-17 23:33:24"
composer.lock:            "name": "friendsofsymfony/elastica-bundle",
composer.lock:            "version": "v3.0.0-alpha2",
composer.lock:            "target-dir": "FOS/ElasticaBundle",
composer.lock:                "ruflin/elastica": ">=0.20, <1.1-dev",
composer.lock:                "symfony/framework-bundle": "~2.1",
composer.lock:                "symfony/property-access": "~2.2"
composer.lock:            "require-dev": {
composer.lock:                "doctrine/mongodb-odm": "1.0.*@dev",
composer.lock:                "doctrine/orm": ">=2.2,<2.5-dev",
composer.lock:                "knplabs/knp-components": "1.2.*",
composer.lock:                "symfony/expression-language": "2.4.*@dev"
composer.lock:                "doctrine/mongodb-odm": "1.0.*@dev",
composer.lock:                "doctrine/orm": ">=2.2,<2.5-dev",
composer.lock:                "knplabs/knp-components": "1.2.*",
composer.lock:                "symfony/expression-language": "2.4.*@dev"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.0.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-03-13 21:59:59"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.3.0-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-12-16 21:56:48"
composer.lock:            "require-dev": {
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.5.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-11-05 23:02:36"
composer.lock:            "name": "jms/parser-lib",
composer.lock:                "url": "https://github.com/schmittjoh/parser-lib.git",
composer.lock:                "url": "https://api.github.com/repos/schmittjoh/parser-lib/zipball/c509473bc1b4866415627af0e1c6cc8ac97fa51d",
composer.lock:                "phpoption/phpoption": ">=0.9,<2.0-dev"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.0-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "A library for easily creating recursive-descent parsers.",
composer.lock:            "time": "2012-11-18 18:08:43"
composer.lock:                "jms/parser-lib": "1.*",
composer.lock:                "phpcollection/phpcollection": ">=0.1,<0.3-dev"
composer.lock:            "require-dev": {
composer.lock:                "doctrine/orm": ">=2.1,<2.4-dev",
composer.lock:                "doctrine/phpcr-odm": "~1.0.1",
composer.lock:                "jackalope/jackalope-doctrine-dbal": "1.0.*",
composer.lock:                "symfony/form": ">=2.1,<=2.4-dev",
composer.lock:                "symfony/translation": ">=2.0,<2.2-dev",
composer.lock:                "symfony/validator": ">=2.0,<2.2-dev",
composer.lock:                "twig/twig": ">=1.8,<2.0-dev"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.14-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "Library for (de-)serializing data of any complexity; supports XML, JSON, and YAML.",
composer.lock:            "time": "2014-02-10 11:00:05"
composer.lock:            "name": "jms/serializer-bundle",
composer.lock:            "target-dir": "JMS/SerializerBundle",
composer.lock:                "symfony/framework-bundle": "~2.1"
composer.lock:            "require-dev": {
composer.lock:                "doctrine/doctrine-bundle": "*",
composer.lock:                "symfony/browser-kit": "*",
composer.lock:                "symfony/class-loader": "*",
composer.lock:                "symfony/css-selector": "*",
composer.lock:                "symfony/twig-bundle": "*",
composer.lock:                "jms/di-extra-bundle": "Required to get lazy loading (de)serialization visitors, ~1.3"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.13-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-12-05 14:36:11"
composer.lock:            "require-dev": {
composer.lock:                "joliclic/javascript-packer": "*",
composer.lock:                "leafo/scssphp-compass": "*",
composer.lock:                "leafo/scssphp-compass": "Assetic provides the integration with the SCSS compass plugin",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.1-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-07-19 00:03:27"
composer.lock:                "lib-pcre": ">=7.0",
composer.lock:            "require-dev": {
composer.lock:                "hamcrest/hamcrest-php": "~1.1",
composer.lock:                "satooshi/php-coveralls": "dev-master"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.9.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:            "description": "Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succint API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library, Mockery is easy to integrate with PHPUnit and can operate alongside phpunit-mock-objects without the World ending.",
composer.lock:            "time": "2014-02-05 21:30:08"
composer.lock:            "require-dev": {
composer.lock:                "aws/aws-sdk-php": "~2.4, >2.4.8",
composer.lock:                "graylog2/gelf-php": "~1.0",
composer.lock:                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
composer.lock:                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
composer.lock:                "ext-mongo": "Allow sending log messages to a MongoDB server",
composer.lock:                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.8.x-dev"
composer.lock:                "psr-4": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "psr-3"
composer.lock:            "time": "2014-03-23 19:50:26"
composer.lock:            "name": "nelmio/api-doc-bundle",
composer.lock:            "target-dir": "Nelmio/ApiDocBundle",
composer.lock:                "symfony/framework-bundle": "~2.1",
composer.lock:                "symfony/twig-bundle": "~2.1"
composer.lock:                "jms/serializer-bundle": "<0.11"
composer.lock:            "require-dev": {
composer.lock:                "friendsofsymfony/rest-bundle": "0.12.*@dev",
composer.lock:                "jms/serializer-bundle": ">=0.11",
composer.lock:                "sensio/framework-extra-bundle": "~2.1",
composer.lock:                "symfony/browser-kit": "~2.1",
composer.lock:                "symfony/css-selector": "~2.1",
composer.lock:                "friendsofsymfony/rest-bundle": "For making use of REST information in the doc.",
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.3.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-11-14 09:33:57"
composer.lock:            "name": "nelmio/cors-bundle",
composer.lock:            "target-dir": "Nelmio/CorsBundle",
composer.lock:                "symfony/framework-bundle": "~2.0"
composer.lock:            "require-dev": {
composer.lock:                "mockery/mockery": "dev-master"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.1.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "Adds CORS (Cross-Origin Resource Sharing) headers support in your Symfony2 application",
composer.lock:            "time": "2013-08-14 09:46:02"
composer.lock:            "name": "oldsound/rabbitmq-bundle",
composer.lock:            "target-dir": "OldSound/RabbitMqBundle",
composer.lock:                "symfony/framework-bundle": "~2.0",
composer.lock:                "videlalvaro/php-amqplib": "2.2.*"
composer.lock:            "require-dev": {
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.2.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "Integrates php-amqplib with Symfony2 and RabbitMq",
composer.lock:            "time": "2014-03-17 14:38:17"
composer.lock:            "name": "ornicar/apc-bundle",
composer.lock:            "target-dir": "Ornicar/ApcBundle",
composer.lock:                "symfony/framework-bundle": ">=2.1,<3.0"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-1.0": "1.0.x-dev",
composer.lock:                    "dev-master": "1.1.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-12-05 13:40:04"
composer.lock:                "url": "https://github.com/schmittjoh/php-collection.git",
composer.lock:                "url": "https://api.github.com/repos/schmittjoh/php-collection/zipball/acb02a921bb364f360ce786b13455345063c4a07",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "0.2-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "General-Purpose Collection Library for PHP",
composer.lock:            "time": "2013-01-23 15:16:14"
composer.lock:                "url": "https://github.com/schmittjoh/php-option.git",
composer.lock:                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/5d099bcf0393908bf4ad69cc47dafb785d51f7f5",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.3-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-01-09 22:37:17"
composer.lock:                "url": "https://github.com/php-fig/log.git",
composer.lock:                "url": "https://api.github.com/repos/php-fig/log/zipball/fe0936ee26643249e916849d48e3a51d5f5e278b",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                    "name": "PHP-FIG",
composer.lock:                    "homepage": "http://www.php-fig.org/"
composer.lock:                "psr-3"
composer.lock:            "time": "2012-12-21 11:40:51"
composer.lock:            "require-dev": {
composer.lock:                "munkie/elasticsearch-thrift-php": "1.4.*",
composer.lock:                "satooshi/php-coveralls": "dev-master"
composer.lock:                "munkie/elasticsearch-thrift-php": "Allow using thrift transport",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-03-08 12:13:09"
composer.lock:            "name": "sensio/distribution-bundle",
composer.lock:            "target-dir": "Sensio/Bundle/DistributionBundle",
composer.lock:                "symfony/framework-bundle": "~2.2"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.3.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-08-22 05:04:53"
composer.lock:            "name": "sensio/generator-bundle",
composer.lock:            "target-dir": "Sensio/Bundle/GeneratorBundle",
composer.lock:                "symfony/framework-bundle": "~2.2"
composer.lock:            "require-dev": {
composer.lock:                "symfony/doctrine-bridge": "~2.2",
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.3.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-08-21 18:09:35"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "5.1-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "description": "Swiftmailer, free feature-rich PHP mailer",
composer.lock:            "time": "2013-12-03 13:33:24"
composer.lock:            "name": "symfony/assetic-bundle",
composer.lock:            "target-dir": "Symfony/Bundle/AsseticBundle",
composer.lock:                "symfony/framework-bundle": "~2.1"
composer.lock:            "require-dev": {
composer.lock:                "symfony/class-loader": "~2.1",
composer.lock:                "symfony/css-selector": "~2.1",
composer.lock:                "symfony/dom-crawler": "~2.1",
composer.lock:                "symfony/twig-bundle": "~2.1",
composer.lock:                "symfony/twig-bundle": "~2.1"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.1.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-05-16 05:32:23"
composer.lock:            "target-dir": "Symfony/Component/Icu",
composer.lock:                "lib-icu": ">=4.4",
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-10-04 10:06:38"
composer.lock:            "name": "symfony/monolog-bundle",
composer.lock:            "target-dir": "Symfony/Bundle/MonologBundle",
composer.lock:                "symfony/config": "~2.2-beta2",
composer.lock:                "symfony/dependency-injection": "~2.2-beta2",
composer.lock:                "symfony/monolog-bridge": "~2.2-beta2"
composer.lock:            "require-dev": {
composer.lock:                "symfony/yaml": "~2.2-beta2"
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.2.x-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-05-27 18:06:55"
composer.lock:            "name": "symfony/swiftmailer-bundle",
composer.lock:            "target-dir": "Symfony/Bundle/SwiftmailerBundle",
composer.lock:                "swiftmailer/swiftmailer": ">=4.2.0,<5.1-dev",
composer.lock:                "symfony/swiftmailer-bridge": "~2.1"
composer.lock:            "require-dev": {
composer.lock:                "symfony/dependency-injection": "~2.1",
composer.lock:                "symfony/http-kernel": "~2.1",
composer.lock:            "type": "symfony-bundle",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.2-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2013-11-21 12:29:01"
composer.lock:                "symfony/browser-kit": "self.version",
composer.lock:                "symfony/class-loader": "self.version",
composer.lock:                "symfony/css-selector": "self.version",
composer.lock:                "symfony/dependency-injection": "self.version",
composer.lock:                "symfony/doctrine-bridge": "self.version",
composer.lock:                "symfony/dom-crawler": "self.version",
composer.lock:                "symfony/event-dispatcher": "self.version",
composer.lock:                "symfony/framework-bundle": "self.version",
composer.lock:                "symfony/http-foundation": "self.version",
composer.lock:                "symfony/http-kernel": "self.version",
composer.lock:                "symfony/monolog-bridge": "self.version",
composer.lock:                "symfony/options-resolver": "self.version",
composer.lock:                "symfony/propel1-bridge": "self.version",
composer.lock:                "symfony/property-access": "self.version",
composer.lock:                "symfony/proxy-manager-bridge": "self.version",
composer.lock:                "symfony/security-bundle": "self.version",
composer.lock:                "symfony/swiftmailer-bridge": "self.version",
composer.lock:                "symfony/twig-bridge": "self.version",
composer.lock:                "symfony/twig-bundle": "self.version",
composer.lock:                "symfony/web-profiler-bundle": "self.version",
composer.lock:            "require-dev": {
composer.lock:                "doctrine/data-fixtures": "1.0.*",
composer.lock:                "ircmaxell/password-compat": "1.0.*",
composer.lock:                "ocramius/proxy-manager": ">=0.3.1,<0.4-dev",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "2.3-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-02-27 14:55:30"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.15-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "armin.ronacher@active-4.com",
composer.lock:            "time": "2014-02-13 10:19:29"
composer.lock:            "name": "videlalvaro/php-amqplib",
composer.lock:                "url": "https://github.com/videlalvaro/php-amqplib.git",
composer.lock:                "url": "https://api.github.com/repos/videlalvaro/php-amqplib/zipball/6ef2ca9a45bb9fb20872f824f4c7c1518315bd3f",
composer.lock:                "ext-bcmath": "*",
composer.lock:            "require-dev": {
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:                "LGPL-2.1"
composer.lock:            "homepage": "https://github.com/videlalvaro/php-amqplib/",
composer.lock:            "time": "2013-12-22 12:49:53"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.3-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-02-26 13:56:25"
composer.lock:    "packages-dev": [
composer.lock:                "ext-curl": "*",
composer.lock:                "symfony/event-dispatcher": ">=2.1"
composer.lock:                "guzzle/plugin-async": "self.version",
composer.lock:                "guzzle/plugin-backoff": "self.version",
composer.lock:                "guzzle/plugin-cache": "self.version",
composer.lock:                "guzzle/plugin-cookie": "self.version",
composer.lock:                "guzzle/plugin-curlauth": "self.version",
composer.lock:                "guzzle/plugin-error-response": "self.version",
composer.lock:                "guzzle/plugin-history": "self.version",
composer.lock:                "guzzle/plugin-log": "self.version",
composer.lock:                "guzzle/plugin-md5": "self.version",
composer.lock:                "guzzle/plugin-mock": "self.version",
composer.lock:                "guzzle/plugin-oauth": "self.version",
composer.lock:            "require-dev": {
composer.lock:                "symfony/class-loader": "*",
composer.lock:                "zendframework/zend-cache": "<2.3",
composer.lock:                "zendframework/zend-log": "<2.3"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.8-dev"
composer.lock:                "psr-0": {
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "time": "2014-01-28 22:29:15"
composer.lock:            "name": "phpunit/php-code-coverage",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/69e55e68481cf708a6db43aff0b504e31402fe27",
composer.lock:                "phpunit/php-file-iterator": ">=1.3.0@stable",
composer.lock:                "phpunit/php-text-template": ">=1.2.0@stable",
composer.lock:                "phpunit/php-token-stream": ">=1.1.3@stable"
composer.lock:            "require-dev": {
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-xdebug": ">=2.0.5"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.2.x-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "sb@sebastian-bergmann.de",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
composer.lock:            "time": "2014-02-25 03:34:05"
composer.lock:            "name": "phpunit/php-file-iterator",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/acd690379117b042d1c8af1fafd61bde001bf6bb",
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "sb@sebastian-bergmann.de",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
composer.lock:            "time": "2013-10-10 15:34:57"
composer.lock:            "name": "phpunit/php-text-template",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-text-template.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/206dfefc0ffe9cebf65c413e3d0e809c82fbf00a",
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "sb@sebastian-bergmann.de",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
composer.lock:            "time": "2014-01-30 17:20:04"
composer.lock:            "name": "phpunit/php-timer",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-timer.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/19689d4354b295ee3d8c54b4f42c3efb69cbc17c",
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "sb@sebastian-bergmann.de",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-timer/",
composer.lock:            "time": "2013-08-02 07:42:54"
composer.lock:            "name": "phpunit/php-token-stream",
composer.lock:                "url": "https://github.com/sebastianbergmann/php-token-stream.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/ad4e1e23ae01b483c16f600ff1bebec184588e32",
composer.lock:                "ext-tokenizer": "*",
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "1.2-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "sb@sebastian-bergmann.de",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/php-token-stream/",
composer.lock:            "time": "2014-03-03 05:10:30"
composer.lock:                "ext-dom": "*",
composer.lock:                "ext-pcre": "*",
composer.lock:                "ext-reflection": "*",
composer.lock:                "ext-spl": "*",
composer.lock:                "phpunit/php-code-coverage": "~1.2.1",
composer.lock:                "phpunit/php-file-iterator": ">=1.3.1",
composer.lock:                "phpunit/php-text-template": ">=1.1.1",
composer.lock:                "phpunit/php-timer": ">=1.0.4",
composer.lock:                "phpunit/phpunit-mock-objects": "~1.2.0",
composer.lock:            "require-dev": {
composer.lock:                "pear-pear.php.net/pear": "1.9.4"
composer.lock:                "ext-json": "*",
composer.lock:                "ext-simplexml": "*",
composer.lock:                "ext-tokenizer": "*",
composer.lock:                "phpunit/php-invoker": ">=1.1.0,<1.2.0"
composer.lock:                "branch-alias": {
composer.lock:                    "dev-master": "3.7.x-dev"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:            "time": "2014-02-25 03:47:29"
composer.lock:            "name": "phpunit/phpunit-mock-objects",
composer.lock:                "url": "https://github.com/sebastianbergmann/phpunit-mock-objects.git",
composer.lock:                "url": "https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/5794e3c5c5ba0fb037b11d8151add2a07fa82875",
composer.lock:                "phpunit/php-text-template": ">=1.1.1@stable"
composer.lock:                "ext-soap": "*"
composer.lock:            "notification-url": "https://packagist.org/downloads/",
composer.lock:            "include-path": [
composer.lock:                "BSD-3-Clause"
composer.lock:                    "email": "sb@sebastian-bergmann.de",
composer.lock:            "homepage": "https://github.com/sebastianbergmann/phpunit-mock-objects/",
composer.lock:            "time": "2013-01-13 10:24:48"
composer.lock:    "minimum-stability": "dev",
composer.lock:    "stability-flags": {
composer.lock:        "doctrine/mongodb-odm-bundle": 20,
composer.lock:        "ac/web-services-bundle": 20,
composer.lock:        "friendsofsymfony/elastica-bundle": 20
composer.lock:        "ext-apcu": "*",
composer.lock:        "ext-curl": "*",
composer.lock:        "ext-fileinfo": "*",
composer.lock:        "ext-pcntl": "*"
composer.lock:    "platform-dev": [
dev-ansible/playbook.yml:- hosts: all
dev-ansible/playbook.yml:    - include: common/tasks/sys.yml
dev-ansible/playbook.yml:    - include: common/tasks/install_mongodb.yml
dev-ansible/playbook.yml:    - include: common/tasks/install_symfony_reqs.yml
dev-ansible/playbook.yml:    - include: common/tasks/install_rabbitmq_server.yml
dev-ansible/playbook.yml:    - include: common/tasks/install_mediainfo.yml
dev-ansible/playbook.yml:    - include: common/tasks/install_elasticsearch.yml
dev-ansible/playbook.yml:    #- include: common/tasks/install_ffmpeg.yml
dev-ansible/playbook.yml:    #- include: common/tasks/install_ffmpegthumbnailer.yml
dev-ansible/playbook.yml:    - copy:
dev-ansible/playbook.yml:    - include: common/tasks/symfony_server.yml
dev-ansible/playbook.yml:        name: ayamel-web-dev
dev-ansible/playbook.yml:    - file: src=/vagrant/app/console dest=/usr/local/bin/ayamel state=link
dev-ansible/playbook.yml:    - file: src=/vagrant dest=/home/vagrant/ayamel-server state=link
dev-ansible/playbook.yml:    - include: common/handlers/sys.yml
dev-ansible/playbook.yml:    - name: restart ayamel-web-dev
dev-ansible/playbook.yml:      supervisorctl: name=ayamel-web-dev state=restarted
dev-ansible/playbook.yml:    - name: restart rabbitmq-server
dev-ansible/playbook.yml:      supervisorctl: name=rabbitmq-server state=restarted
phpunit.xml.dist:<?xml version="1.0" encoding="UTF-8"?>
src/Ayamel/ApiBundle/ApiTestCase.php:        $c = $this->getContainer();
src/Ayamel/ApiBundle/ApiTestCase.php:        $db = $c->get('doctrine_mongodb.odm.default_connection')->selectDatabase($c->getParameter('mongodb_database'));
src/Ayamel/ApiBundle/ApiTestCase.php:        $db->dropCollection('resources');
src/Ayamel/ApiBundle/ApiTestCase.php:        $db->dropCollection('relations');
src/Ayamel/ApiBundle/ApiTestCase.php:     * Shortcut to run a CLI command - returns a... ?
src/Ayamel/ApiBundle/ApiTestCase.php:        $command = sprintf('%s --quiet --env=test', $string);
src/Ayamel/ApiBundle/ApiTestCase.php:        $k = $this->createKernel();
src/Ayamel/ApiBundle/ApiTestCase.php:        $app->setAutoExit(false);
src/Ayamel/ApiBundle/ApiTestCase.php:        return $app->run(new StringInput($string), new NullOutput());
src/Ayamel/ApiBundle/ApiTestCase.php:        $k = $this->createKernel();
src/Ayamel/ApiBundle/ApiTestCase.php:        $k->boot();
src/Ayamel/ApiBundle/ApiTestCase.php:        return $k->getContainer();
src/Ayamel/ApiBundle/ApiTestCase.php:        $client->request($method, $uri, $params, $files, $server, $content, $changehistory);
src/Ayamel/ApiBundle/ApiTestCase.php:        return $client->getResponse();
src/Ayamel/ApiBundle/ApiTestCase.php:        return json_decode($this->getResponse($method, $uri, $params, $files, $server, $content, $changehistory)->getContent(), true);
src/Ayamel/ApiBundle/AyamelApiBundle.php:        $container->addCompilerPass(new RegisterApiEventListenersPass());
src/Ayamel/ApiBundle/Cache/FileCache.php: * A simple file-based Doctrine cache implementation.
src/Ayamel/ApiBundle/Cache/FileCache.php:        $this->dir = $dir;
src/Ayamel/ApiBundle/Cache/FileCache.php:        $file = $this->getFileForId($id);
src/Ayamel/ApiBundle/Cache/FileCache.php:            $this->delete($id);
src/Ayamel/ApiBundle/Cache/FileCache.php:        return file_exists($this->getFileForId($id));
src/Ayamel/ApiBundle/Cache/FileCache.php:        return file_put_contents($this->getFileForId($id), serialize($contents));
src/Ayamel/ApiBundle/Cache/FileCache.php:        return @unlink($this->getFileForId($id));
src/Ayamel/ApiBundle/Cache/FileCache.php:        $match = $this->dir.DIRECTORY_SEPARATOR."*.cache";
src/Ayamel/ApiBundle/Cache/FileCache.php:        return $this->dir.DIRECTORY_SEPARATOR.$id.".cache";
src/Ayamel/ApiBundle/Client/Client.php:        $doc->setId($this->id);
src/Ayamel/ApiBundle/Client/Client.php:        $doc->setName($this->name);
src/Ayamel/ApiBundle/Client/Client.php:        if (isset($this->url)) {
src/Ayamel/ApiBundle/Client/Client.php:            $doc->setUri($this->url);
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:            $c->id = $id;
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:            $c->name = $item['name'] ?: null;
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:            $c->apiKey = $item['apiKey'] ?: null;
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:            $this->clients[$id] = $c;
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:        return $this->clients;
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:        return isset($this->clients[$id]) ? $this->clients[$id] : false;
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:        foreach ($this->clients as $client) {
src/Ayamel/ApiBundle/Client/ConfigClientLoader.php:            if ($key === $client->apiKey) {
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:            ->setName('api:field:rename')
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:            ->setDescription('Rename a field in the resource structure to a new name.')
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:            ->setDefinition(array(
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $collection = $input->getArgument('collection');
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $oldFieldName = $input->getArgument('oldFieldName');
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $newFieldName = $input->getArgument('newFieldName');
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $mongo = $this->getContainer()->get('doctrine_mongodb.odm.default_connection');
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $db = $mongo->ayamel;
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $col = $db->$collection;
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $results = $col->find(array($oldFieldName => array('$exists' => true)), array($oldFieldName => true));
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $output->writeln(sprintf("Found <info>%s</info> documents containing field <info>%s</info>.", $results->count(), $oldFieldName));
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        if ($input->getOption('update')) {
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:            //$col->command($mongoCode); ??
src/Ayamel/ApiBundle/Command/RenameFieldCommand.php:        $output->writeln($db->execute($mongoCode));
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:        $this->setName('api:resource:status')
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:            ->setDescription("Modify a specific Resource's status.")
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:            ->addArgument('id', InputArgument::REQUIRED, "ID of Resource to modify.")
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:            ->addArgument('status', InputArgument::REQUIRED, "New status of resource.");
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:        $manager = $this->getContainer()->get('doctrine_mongodb')->getManager();
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:        $resource = $manager->getRepository('AyamelResourceBundle:Resource')->find($input->getArgument('id'));
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:        $resource->setStatus($input->getArgument('status'));
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:        $manager->flush();
src/Ayamel/ApiBundle/Command/ResourceStatusCommand.php:        $output->writeln("Status for Resource changed.");
src/Ayamel/ApiBundle/Controller/ApiController.php:        return $this->container->get('doctrine_mongodb')->getManager()->getRepository($class);
src/Ayamel/ApiBundle/Controller/ApiController.php:        return $this->container->get('doctrine_mongodb')->getManager();
src/Ayamel/ApiBundle/Controller/ApiController.php:        if (!$key = $this->getRequest()->get('_key', false)) {
src/Ayamel/ApiBundle/Controller/ApiController.php:        if (!$client = $this->container->get('ayamel.client_loader')->getClientByApiKey($key)) {
src/Ayamel/ApiBundle/Controller/ApiController.php:        if ($obj->getVisibility() && !in_array($this->getApiClient()->id, $obj->getVisibility())) {
src/Ayamel/ApiBundle/Controller/ApiController.php:        if ($this->getApiClient()->id !== $obj->getClient()->getId()) {
src/Ayamel/ApiBundle/Controller/ApiController.php:        if (!is_object($this->container)) {
src/Ayamel/ApiBundle/Controller/ApiController.php:            var_dump($this->container);
src/Ayamel/ApiBundle/Controller/ApiController.php:        if (!$key = $this->container->get('request')->get('_key', false)) {
src/Ayamel/ApiBundle/Controller/ApiController.php:        return $this->container->get('ayamel.client_loader')->getClientByApiKey($key);
src/Ayamel/ApiBundle/Controller/ApiController.php:        $errors = $this->container->get('validator')->validate($object);
src/Ayamel/ApiBundle/Controller/ApiController.php:        $resource = $this->getRepo('AyamelResourceBundle:Resource')->find($id);
src/Ayamel/ApiBundle/Controller/ApiController.php:        $visibility = $resource->getVisibility();
src/Ayamel/ApiBundle/Controller/ApiController.php:            if (!$client = $this->getApiClient()) {
src/Ayamel/ApiBundle/Controller/ApiController.php:            $this->requireClientVisibility($resource);
src/Ayamel/ApiBundle/Controller/ApiController.php:        $client = $this->getApiClient();
src/Ayamel/ApiBundle/Controller/ApiController.php:            if (!$client && null === $resource->getVisibility()) {
src/Ayamel/ApiBundle/Controller/ApiController.php:                if (in_array($client->id, $resource->getVisibility())) {
src/Ayamel/ApiBundle/Controller/Home.php:        return $this->render("AyamelApiBundle::home.html.twig");
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $this->requireAuthentication();
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $resource = $this->decodeRequest('Ayamel\ResourceBundle\Document\Resource');
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $resource->setStatus(Resource::STATUS_AWAITING_CONTENT);
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $clientDoc = $this->getApiClient()->createClientDocument();
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $resource->setClient($clientDoc);
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $this->validateObject($resource);
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $manager = $this->get('doctrine_mongodb')->getManager();
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:            $manager->persist($resource);
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:            $manager->flush();
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:            throw $this->createHttpException(400, $e->getMessage());
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $newID = $resource->getId();
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $uploadToken = $this->container->get('ayamel.api.upload_token_manager')->createTokenForId($newID);
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $this->container->get('event_dispatcher')->dispatch(Events::RESOURCE_CREATED, new ResourceEvent($resource));
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        $uploadUrl = $this->container->get('router')->generate('api_v1_upload_content', array('id' => $resource->getId(), 'token' => $uploadToken), true);
src/Ayamel/ApiBundle/Controller/V1/CreateResource.php:        return $this->createServiceResponse(array(
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $this->requireAuthentication();
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $resource = $this->getRequestedResourceById($id);
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        if ($resource->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:            return $this->returnDeletedResource($resource);
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $this->requireResourceOwner($resource);
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $apiDispatcher = $this->container->get('event_dispatcher');
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $apiDispatcher->dispatch(Events::REMOVE_RESOURCE_CONTENT, new ResourceEvent($resource));
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $this->deleteRelations($resource);
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $manager = $this->getDocManager();
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $resource = $manager->getRepository('AyamelResourceBundle:Resource')->deleteResource($resource);
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $manager->flush();
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $apiDispatcher->dispatch(Events::RESOURCE_DELETED, new ResourceEvent($resource));
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        return $this->createServiceResponse(array('resource' => $resource), 200);
src/Ayamel/ApiBundle/Controller/V1/DeleteResource.php:        $this->getRepo('AyamelResourceBundle:Relation')->deleteRelationsForResource($subject->getId());
src/Ayamel/ApiBundle/Controller/V1/EmbedPlayer.php:     * Should return an iframe-embeddable media player appropriate to the type of Resource.
src/Ayamel/ApiBundle/Controller/V1/EmbedPlayer.php:        throw $this->createHttpException(501);
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:        $resource = $this->getRequestedResourceById($id);
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:        $request = $this->getRequest();
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:        if ($resource->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:            return $this->returnDeletedResource($resource);
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:        if ($request->get('relations', null) !== 'false') {
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:            $relations = $this->getRepo('Ayamel\ResourceBundle\Document\Relation')->getRelationsForResource($id);
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:                $resource->setRelations(iterator_to_array($relations));
src/Ayamel/ApiBundle/Controller/V1/GetResource.php:        return $this->createServiceResponse(array('resource' => $resource), 200);
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:     * Query filters can be comma-delimited strings for multiple values.
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:     *          {"name"="languages", "description"="Limit returned Resources to those containing a specific language.  This can be specified in either the ISO 639-3 format or BCP47 format."},
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        if ($ids = $req->query->get('id', false)) {
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        if ($type = $req->query->get('type', false)) {
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        if ($clients = $req->query->get('client', false)) {
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:            if ($c = $this->getApiClient()) {
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:                $filters['client.id'] = $c->id;
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        if ($clientUsers = $req->query->get('clientUser', false)) {
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $qb = $this->getRepo('AyamelResourceBundle:Resource')->getQBForResources($filters);
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        if ($languages = $req->query->get('languages', false)) {
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:            $qb->addOr($qb->expr()->field('languages.iso639_3')->in($langs));
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:            $qb->addOr($qb->expr()->field('languages.bcp47')->in($langs));
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $limit = (($l = $req->query->get('limit', 20)) <= 100) ? $l : 1000;
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $qb->limit($limit);
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $qb->skip($req->query->get('skip', 0));
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $results = $qb->getQuery()->execute();
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        return $this->createServiceResponse(array('resources' => $this->getResourcesAsArray($results)), 200);
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $client = $this->getApiClient();
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:        $id = ($client) ? $client->id : false;
src/Ayamel/ApiBundle/Controller/V1/GetResources.php:            if (is_null($resource->getVisibility()) || ($id && in_array($id, $resource->getVisibility())) ) {
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $this->requireAuthentication();
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $resource = $this->getRequestedResourceById($id);
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        if ($resource->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:            return $this->returnDeletedResource($resource);
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $this->requireResourceOwner($resource);
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $ctx = DeserializationContext::create()->setTarget($resource);
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $modifiedResource = $this->decodeRequest('Ayamel\ResourceBundle\Document\Resource', $ctx);
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $this->validateObject($modifiedResource);
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:            $manager = $this->get('doctrine_mongodb')->getManager();
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:            $manager->flush();
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:            throw $this->createHttpException(400, $e->getMessage());
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        $this->container->get('event_dispatcher')->dispatch(Events::RESOURCE_MODIFIED, new ResourceEvent($modifiedResource));
src/Ayamel/ApiBundle/Controller/V1/ModifyResource.php:        return $this->createServiceResponse(array('resource' => $modifiedResource), 200);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $resource = $this->getRequestedResourceById($id);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $req = $this->getRequest();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($resource->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            return $this->returnDeletedResource($resource);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $this->requireClientVisibility($resource);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($types = $req->query->get('type', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($clients = $req->query->get('client', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $filters['client.id'] = array($this->getApiClient()->id, $resource->getClient()->getId());
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($clientUsers = $req->query->get('clientUser', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $subject = $req->query->get('subject', false);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $object = $req->query->get('object', false);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $qb = $this->getRepo('AyamelResourceBundle:Relation')->getQBForRelations($filters);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $qb = $this->getRepo('AyamelResourceBundle:Relation')->getQBForRelations($filters);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $qb->addOr($qb->expr()->field('subjectId')->equals($id));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $qb->addOr($qb->expr()->field('objectId')->equals($id));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $qb->limit($req->query->get('limit', 20));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $qb->skip($req->query->get('skip', 0));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $relations = $qb->getQuery()->execute();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        return $this->createServiceResponse(array(
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            'relations' => $this->relationsToArray($relations)
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($subIds = $req->query->get('subjectId', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($objIds = $req->query->get('objectId', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($types = $req->query->get('type', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($clients = $req->query->get('client', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        } elseif ($this->getApiClient()) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $filters['client.id'] = array($this->getApiClient()->id);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($clientUsers = $req->query->get('clientUser', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $qb = $this->getRepo('AyamelResourceBundle:Relation')->getQBForRelations($filters);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $qb->limit($req->query->get('limit', 20));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $qb->skip($req->query->get('skip', 0));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($req->query->get('id', false)) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $ids = explode(',', $req->get('id'));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $qb->addOr($qb->expr()->field('subjectId')->in($ids));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            $qb->addOr($qb->expr()->field('objectId')->in($ids));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $relations = $qb->getQuery()->execute();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        return $this->createServiceResponse(array(
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            'relations' => $this->relationsToArray($relations)
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $this->requireAuthentication();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $request = $this->getRequest();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $relation = $this->decodeRequest('Ayamel\ResourceBundle\Document\Relation');
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $subject = $this->getRequestedResourceById($relation->getSubjectId());
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $object = $this->getRequestedResourceById($relation->getObjectId());
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($subject->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(400, "Invalid subject id.");
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($object->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(400, "Invalid object id.");
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $client = $this->getApiClient();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        switch ($relation->getType()) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'requires': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'transcript_of': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'references': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'based_on': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'translation_of': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'search': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'contains': $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'version_of': $this->requireSubjectAndObjectOwnership($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            case 'part_of': $this->requireSubjectAndObjectOwnership($subject, $object, $client); break;
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            default : $this->requireSubjectOwnershipAndObjectVisibility($subject, $object, $client);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $map = $this->container->getParameter('ayamel.relation.resource_type_map');
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if (!in_array($relation->getType(), $map[$subject->getType()])) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(400, sprintf("Relations of type [%s] are not allowed for Resource type [%s].", $relation->getType(), $subject->getType()));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $clientDoc = $client->createClientDocument();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $relation->setClient($clientDoc);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $this->validateObject($relation);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $manager = $this->get('doctrine_mongodb')->getManager();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $manager->persist($relation);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $manager->flush();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $this->container->get('event_dispatcher')->dispatch(ApiEvents::RELATION_CREATED, new RelationEvent($relation, $subject, $object));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        return $this->createServiceResponse(array('relation' => $relation), 201);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $this->requireAuthentication();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $repo = $this->getRepo('AyamelResourceBundle:Relation');
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $relation = $repo->find($id);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($this->getApiClient()->id !== $relation->getClient()->getId()) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(403, "You are not the owner of this Relation.");
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $resourceRepo = $this->getRepo('AyamelResourceBundle:Resource');
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $subject = $resourceRepo->find($relation->getSubjectId());
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $object = $resourceRepo->find($relation->getObjectId());
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $manager = $this->getDocManager();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $manager->remove($relation);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $manager->flush();
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        $this->container->get('event_dispatcher')->dispatch(ApiEvents::RELATION_DELETED, new RelationEvent($relation, $subject, $object));
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        return $this->createServiceResponse(null, 200);
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($sub->getClient()->getId() !== $client->id) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(403, "You must be owner the subject Resource to create this type of Relation.");
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($obj->getVisibility() && !in_array($client->id, $obj->getVisibility())) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(403, "You must be able to view the object Resource to create this type of Relation.");
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:        if ($sub->getClient()->getId() !== $client->id || $obj->getClient()->getId() !== $client->id) {
src/Ayamel/ApiBundle/Controller/V1/RelationsController.php:            throw $this->createHttpException(403, "You must own the subject and object Resources to create this type of Relation.");
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:     * [wiki](https://github.com/AmericanCouncils/AyamelResourceApiServer/wiki/Uploading-Content).
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:        $resource = $this->getRequestedResourceById($id);
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:        if ($resource->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:            return $this->returnDeletedResource($resource);
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:        $this->requireResourceOwner($resource);
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:        $uploadToken = $this->container->get('ayamel.api.upload_token_manager')->createTokenForId($resource->getId());
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:        $url = $this->container->get('router')->generate('api_v1_upload_content', array('id' => $resource->getId(), 'token' => $uploadToken), true);
src/Ayamel/ApiBundle/Controller/V1/RequestContentUpload.php:        return $this->createServiceResponse(array('contentUploadUrl' => $url), 200);
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:     * - `http`/`https` - Points to any web-accessible file or webpage.  For example: `http://example.com/files/some_video.mp4`
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:     * - `youtube` - This designates a video resource from YouTube.  For example: `youtube://txqiwrbYGrs`
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:        $uri = urldecode($request->query->get('uri', false));
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:            throw $this->createHttpException("400", "The [uri] query parameter was not provided.");
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:            throw $this->createHttpException(400, "The URI was not in the expected [scheme://path] format.");
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:        $provider = $this->container->get('ayamel.resource.provider');
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:        if (!$provider->handlesScheme($scheme)) {
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:            throw $this->createHttpException(422, sprintf("Cannot interpret resources via scheme [%s]", $scheme));
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:        $resource = $provider->createResourceFromUri($uri);
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:            throw $this->createHttpException(422, "Could not derive a valid resource from the given uri.");
src/Ayamel/ApiBundle/Controller/V1/ScanResourceUri.php:        return $this->createServiceResponse(array('resource' => $resource), 203);
src/Ayamel/ApiBundle/Controller/V1/Search.php: * Search for Resource objects based on many, potentially loosely-defined, criteria.  By default searches include
src/Ayamel/ApiBundle/Controller/V1/Search.php:            $q = $request->query->get('q');
src/Ayamel/ApiBundle/Controller/V1/Search.php:            throw $this->createHttpException(400, "Searches must include a string query via the [q] parameter.");
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $limit = ($l = $request->query->get('limit', 20)) > 100 ? 100 : $l;
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $skip = ($s = $request->query->get('skip', 0)) > 1000 ? 1000 : $s;
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $query->setFrom($limit);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $query->setLimit($skip);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $queryString->setDefaultOperator('AND');
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $queryString->setQuery($q);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        // There are a couple things that I could do here - use Elastica\Type, query->refesh() or query->optimize, all of which are used in the elastica tests.
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $query->setQuery($queryString);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $index = $this->container->get('fos_elastica.index.ayamel');
src/Ayamel/ApiBundle/Controller/V1/Search.php:        // $index = $elasticaClient->getIndex('ayamel_index');
src/Ayamel/ApiBundle/Controller/V1/Search.php:        $results = $index->search($query);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        return $this->createServiceResponse(array('results' => $results), 200);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        // $apiClient = $this->getApiClient();
src/Ayamel/ApiBundle/Controller/V1/Search.php:        // $publiclyVisibleFilter->setTerm('visibility', null);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        //     $visibilityFilter->addFilter($publiclyVisibleFilter);
src/Ayamel/ApiBundle/Controller/V1/Search.php:        throw $this->createHttpException(501, 'Not implemented.');
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     * Upload content for a resource object.  Note that an upload URL is a one-time-use url.  If uploading content fails
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     * will allow clients to reserve one-time-use urls for sending content, which they can then expose to their internal users
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     * [wiki](https://github.com/AmericanCouncils/AyamelResourceApiServer/wiki/Uploading-Content).
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     * -    Upload a file to be stored by the Ayamel server by providing a file upload via the `file` post field.
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     *      Files uploaded in this manner will be automatically scheduled to be transcoded into other web-accessible
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     * -    Specify a reference to an original file via a public URI, this can be done via the `uri` post field, or
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     * -    Specify an array of file references on a remote file server by passing a JSON object with the `remoteFiles` key
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     *                      "mime": "video/x-ms-wmv",
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:     *                      "mimeType": "video/x-ms-wmv",
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $this->requireAuthentication();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $resource = $this->getRequestedResourceById($id);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        if ($resource->isDeleted()) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            return $this->returnDeletedResource($resource);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $this->requireResourceOwner($resource);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        if ('collection' === $resource->getType()) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw $this->createHttpException(400, "Resource of type [collection] cannot contain their own content, they may only contain Relations.");
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        if ($resource->getSequence()) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw $this->createHttpException(400, "Resource sequences cannot contain their own content, they may only contain Relations.");
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $tm = $this->container->get('ayamel.api.upload_token_manager');
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            $tm->useTokenForId($id, $token);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            $tm->removeTokenForId($id);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw $this->createHttpException(401, $e->getMessage());
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $tm->removeTokenForId($id);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        if (Resource::STATUS_PROCESSING === $resource->getStatus()) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw $this->createHttpException(423, "Resource content is currently being processed, try modifying the content later.");
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $lockKey = $resource->getId()."_upload_lock";
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $apiDispatcher = $this->container->get('event_dispatcher');
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $request = $this->getRequest();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $removePreviousContent = ('true' === $request->query->get('replace', 'true'));
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            $resolveEvent = $apiDispatcher->dispatch(Events::RESOLVE_UPLOADED_CONTENT, new ResolveUploadedContentEvent($resource, $request, $removePreviousContent));
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw ($e instanceof HttpException) ? $e : $this->createHttpException(500, $e->getMessage());
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $contentType = $resolveEvent->getContentType();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $contentData = $resolveEvent->getContentData();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw $this->createHttpException(422, "Could not resolve valid content.");
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            if ($resolveEvent->getRemovePreviousContent()) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                if (!isset($resource->content)) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                    $resource->content = new ContentCollection;
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $apiDispatcher->dispatch(Events::REMOVE_RESOURCE_CONTENT, new ResourceEvent($resource));
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $resource->content = new ContentCollection;
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            $handleEvent = $apiDispatcher->dispatch(Events::HANDLE_UPLOADED_CONTENT, new HandleUploadedContentEvent($resource, $contentType, $contentData));
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw ($e instanceof HttpException) ? $e : $this->createHttpException(500, $e->getMessage());
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        if ($handleEvent->isResourceModified()) {
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            $errors = $this->container->get('validator')->validate($resource);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                throw $this->createHttpException(500, implode('; ', iterator_to_array($errors)));
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $resource = $handleEvent->getResource();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $manager = $this->get('doctrine_mongodb')->getManager();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $manager->persist($resource);
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $manager->flush();
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                $apiDispatcher->dispatch(Events::RESOURCE_MODIFIED, new ResourceEvent($resource));
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:                throw $this->createHttpException(500, $e->getMessage());
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:            throw $this->createHttpException(422, "The content was not processed, thus the resource was not modified.");
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        $code = ($resource->getStatus() === Resource::STATUS_NORMAL) ? 200 : 202;
src/Ayamel/ApiBundle/Controller/V1/UploadContent.php:        return $this->createServiceResponse(array('resource' => $resource), $code);
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:        if (!$container->hasDefinition('event_dispatcher')) {
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:        $definition = $container->getDefinition('event_dispatcher');
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:        foreach ($container->findTaggedServiceIds('ayamel.api.event_listener') as $id => $events) {
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:                        '/(?<=\b)[a-z]/ie',
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:                        '/[^a-z0-9]/i'
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:                $definition->addMethodCall('addListenerService', array($event['event'], array($id, $event['method']), $priority));
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:        foreach ($container->findTaggedServiceIds('ayamel.api.event_subscriber') as $id => $attributes) {
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:            $class = $container->getDefinition($id)->getClass();
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:            if (!$refClass->implementsInterface($interface)) {
src/Ayamel/ApiBundle/DependencyInjection/Compiler/RegisterApiEventListenersPass.php:            $definition->addMethodCall('addSubscriberService', array($id, $class));
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        $this->type = $contentType;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        $this->content = $contentData;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        return $this->type;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        return $this->content;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        return $this->resource;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        $this->resource = $resource;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        $this->isResourceModified = true;
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        $this->stopPropagation();
src/Ayamel/ApiBundle/Event/HandleUploadedContentEvent.php:        return $this->isResourceModified;
src/Ayamel/ApiBundle/Event/RelationEvent.php:        $this->relation = $relation;
src/Ayamel/ApiBundle/Event/RelationEvent.php:        $this->subject = $subject;
src/Ayamel/ApiBundle/Event/RelationEvent.php:        $this->object = $object;
src/Ayamel/ApiBundle/Event/RelationEvent.php:        return $this->relation;
src/Ayamel/ApiBundle/Event/RelationEvent.php:        return $this->subject;
src/Ayamel/ApiBundle/Event/RelationEvent.php:        return $this->object;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        $this->request = $request;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        $this->remove_previous_content = $removePrevious;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        $body = $request->getContent();
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:            $this->json_body = $data;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:                $this->post_body = $data;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        $this->type = $type;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        return $this->type;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        $this->content = $data;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        if (!$this->type) {
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        $this->stopPropagation();
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        return $this->content;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:     * @return boolean - default is false
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        return $this->remove_previous_content;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        return $this->request;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        return $this->json_body;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        return $this->post_body;
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        if ($this->getJsonBody()) {
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:            return $this->getJsonBody();
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:        if ($this->getPostBody()) {
src/Ayamel/ApiBundle/Event/ResolveUploadedContentEvent.php:            return $this->getPostBody();
src/Ayamel/ApiBundle/Event/ResourceEvent.php:            $this->resource = $resource;
src/Ayamel/ApiBundle/Event/ResourceEvent.php:        return $this->resource;
src/Ayamel/ApiBundle/EventListener/ContentSubscriber.php:        $this->container = $container;
src/Ayamel/ApiBundle/EventListener/ContentSubscriber.php:        if ($e->isResolved()) {
src/Ayamel/ApiBundle/EventListener/ContentSubscriber.php:        return $this->onResolveContent($e);
src/Ayamel/ApiBundle/EventListener/ContentSubscriber.php:        return $this->onHandleContent($e);
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $this->container = $container;
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $request = $e->getRequest();
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        if ($json = json_decode($request->getContent())) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            $uri = isset($json->uri) ? $json->uri : false;
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            $uri = $request->request->get('uri', false);
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            if ($this->container->get('ayamel.resource.provider')->handlesScheme($exp[0])) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:                $e->setContentType('uri');
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:                $e->setContentData($uri);
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        if ('uri' !== $e->getContentType()) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $uri = $e->getContentData();
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        if (!$derivedResource = $this->container->get('ayamel.resource.provider')->createResourceFromUri($uri)) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $oldResource = $e->getResource();
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $newResource = $this->mergeResources($oldResource, $derivedResource);
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $newResource->setStatus(Resource::STATUS_NORMAL);
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $e->setResource($newResource);
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        //set any unset top-level properties
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $this->mergeDocumentProperties($old, $new, array('title', 'type', 'functionalDomains', 'subjectDomains', 'license', 'copyright', 'description', 'keywords'));
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        $old->content = $new->content;
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        if ($old->origin) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            $this->mergeDocumentProperties($old->origin, $new->origin, array('creator', 'location', 'date', 'format', 'note', 'uri'));
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            $old->origin = $new->origin;
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:        if ($old->languages) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            $this->mergeDocumentProperties($old->languages, $new->languages, array('iso639_3', 'bcp47'));
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:            $old->languages = $new->languages;
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:                if (!$old->$getter()) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:                    $old->$setter($new->$getter());
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:                    if (!$old->$prop) {
src/Ayamel/ApiBundle/EventListener/UriContentSubscriber.php:                        $old->$prop = $new->$prop;
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        $this->container = $container;
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        $req = $e->getRequest();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        $this->start = isset($GLOBALS['__start']) ? $GLOBALS['__start'] : microtime(true);
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        $this->logMessage = array(
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'uri' => $req->getPathInfo(),
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'pattern' => $req->get('_route')->getPattern(),
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'method' => $req->getMethod(),
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        if ($this->container->has('ayamel.api.client')) {
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->logMessage['client'] = $this->container->get('ayamel.api.client')->getId();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->logMessage['client'] = $req->getClientIp();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        if ($this->logMessage) {
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $exception = $e->getException();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->logMessage['exception'] = array(
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'message' => $exception->getMessage(),
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        if ($this->logMessage) {
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:        if ($this->logMessage) {
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $response = $e->getResponse();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $request = $e->getRequest();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->logMessage['response'] = array(
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'status' => $response->getStatusCode(),
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'type' => $response->headers->get('Content-Type'),
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:                'length' => $response->headers->get('Content-Length')
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->logMessage['memory'] = memory_get_peak_usage();
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->logMessage['duration'] = microtime(true) - $this->start;
src/Ayamel/ApiBundle/Logging/LogSubscriber.php:            $this->container->get('mongodb.odm.default_connection')->ayamel->logs->insert($this->logMessage);
src/Ayamel/ApiBundle/Resources/config/config.yml:            - { name: ayamel.api.event_subscriber }
src/Ayamel/ApiBundle/Resources/config/routing.api.v1.yml:    pattern: /resources/{id}/request-upload-url
src/Ayamel/ApiBundle/Resources/views/home.html.twig:<div class="page-title">
src/Ayamel/ApiBundle/Resources/views/home.html.twig:<p>Welcome to the Ayamel Resource Library API - a system for sharing multimedia resources among language learning applications.</p>
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:        $this->describe('AyamelResourceBundle:OEmbed',[
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'type' => function($f) {return $f->fake()->word();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'title' => function($f) {return $f->fake()->sentence(5);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'author_name' => function($f) {return $f->fake()->name();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'author_url' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'provider_name' => function($f) {return $f->fake()->sentence(3);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'provider_url' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'thumbnail_url' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'thumbnail_height' => function($f) {return $f->fake()->randomDigit(3);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'thumbnail_width' => function($f) {return $f->fake()->randomDigit(3);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'cache_age' => function($f) {return $f->fake()->randomDigit(5);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            // 'html' => function($f) {return $f->fake()->something();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'url' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'height' => function($f) {return $f->fake()->randomDigit(6);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'width' => function($f) {return $f->fake()->randomDigit(6);}
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:        $this->describe("AyamelResourceBundle:FileReference", [
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'downloadUri' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'streamUri' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'internalUri' => function($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'bytes' => function($f) {return $f->fake()->randomDigit(10);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'representation' => function($f) {return $f->fake()->randomElement(['original', 'transcoding', 'summary']);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'quality' => function($f) {return $f->fake()->randomDigit();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'mime' => function($f) {return $f->fake()->mimeType();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'mimeType' => function($f) {return $f->fake()->mimeType();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:        $this->describe("AyamelResourceBundle:ContentCollection", [
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'canonicalUri' => function ($f) {return $f->fake()->url();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'files' => function ($f) {return $f->build(1, "AyamelResourceBundle:FileReference");},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'oembed' => function ($f) {return $f->buildOne("AyamelResourceBundle:OEmbed");},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:        $this->generate(10, "AyamelResourceBundle:Resource", [
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'title' => function ($f) {return $f->fake()->sentence(3);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'description' => function ($f) {return $f->fake()->sentence(20);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            // 'keywords' => function ($f) {return $this->commaDelimitedString($f, 5);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'keywords' => function ($f) {return $f->fake()->word() . ',' . $f->fake()->word() . ',' . $f->fake()->word();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'subjectDomains' => function ($f) {return [$f->fake()->randomElement(["Arts", "Entertainment", "Culture", "Economy", "Education", "Food", "Geography", "History", "News", "Politics", "Religion", "Sports", "Technology", "Weather", "Other"])];},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'functionalDomains' => function ($f) {return [$f->fake()->randomElement(['Foo','Bar','Baz'])];},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'registers' => function ($f) {return [$f->fake()->randomElement(['formal', 'casual', 'intimate', 'static', 'consultative'])];},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'type' => function ($f) {return $f->fake()->randomElement(['video', 'audio', 'image', 'document', 'archive', 'collection', 'data']);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'sequence' => function ($f) {return $f->fake()->boolean();}, //really this should be conditional on type
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'dateAdded' => function ($f) {return $f->fake()->dateTimeBetween('-2 years','-1 years');},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'dateModified' => function ($f) {return $f->fake()->dateTimeBetween('-1 years','now');},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'copyright' => function ($f) {return $f->fake()->catchPhrase();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'license' => function ($f) {return $f->fake()->bs();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'status' => function ($f) {return $f->fake()->randomElement(['normal','awaiting_processing','awaiting_content','processing','deleted']);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'content' => function ($f) {return $f->buildOne("AyamelResourceBundle:ContentCollection");},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            // 'dateDeleted' => function ($f) {return $f->fake()->dateTimeBetween('now','+5 years');},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            // 'relations' => function ($f) {return $f->fake()->something();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:        $this->generate(10, "AyamelResourceBundle:Relation", [
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'subjectId' => function ($f) {return $f->fetchCorresponding("AyamelResourceBundle:Resource")->getId();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'objectId' => function ($f) {return $f->fetchCorresponding("AyamelResourceBundle:Resource")->getId();},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'type' => function ($f) {return $f->fake()->randomElement(['based_on', 'references', 'requires', 'transcript_of', 'search', 'version_of', 'part_of', 'translation_of', 'contains']);},
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            'attributes' => function ($f) {return [];}  // valid values conditional on type - could do this properly, for now just leave as empty array
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            // 'client' => function ($f) {return $f->fake()->something();},            
src/Ayamel/ApiBundle/Tests/AyamelFixture.php:            // 'clientUser' => function ($f) {return $f->fake()->something();},
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertTrue($l instanceof ClientLoaderInterface);
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $l = $this->getLoader();
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $clients = $l->getClients();
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertSame(2, count($clients));
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:            $this->assertTrue($client instanceof Client);
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $l = $this->getLoader();
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $c = $l->getClient('test_client2');
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertTrue($c instanceof Client);
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertSame('test_client2', $c->id);
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertFalse($l->getClient('foo'));
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $l = $this->getLoader();
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $c = $l->getClientByApiKey('ffffffffffffffff');
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertTrue($c instanceof Client);
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertSame('test_client2', $c->id);
src/Ayamel/ApiBundle/Tests/ConfigClientLoaderTest.php:        $this->assertFalse($l->getClientByApiKey('foo'));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:    //a series of tests as this is a one-time-use url
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        //hit the path with empty request, expect 422 (unprocessable) - then 401 on subsequent requests
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('POST', $apiPath.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(422, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(422, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('POST', $apiPath);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(401, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(401, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        //now get a new one-time url
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('GET', '/api/v1/resources/'.$resourceId."/request-upload-url?_key=45678isafgd56789asfgdhf4567");
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(isset($content['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(422, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(422, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(401, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(401, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('GET', '/api/v1/resources/'.$resourceId."/request-upload-url?_key=45678isafgd56789asfgdhf4567");
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(isset($content['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('POST', $uploadUrl);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(401, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getResponse('POST', $uploadUrl.'?_key=55678isafgd56789asfgdhf4568');
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(403, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getJson('POST', $apiPath.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(200, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame($data['remoteFiles'], $response['resource']['content']['files']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('normal', $response['resource']['status']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('awaiting_processing', $content['resource']['status']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame($data['title'], $content['resource']['title']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(isset($content['resource']['content']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(isset($content['resource']['content']['files']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(isset($data['downloadUri']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('text/plain', $data['mime']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('text/plain', $data['mimeType']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(filesize($testFilePath), $data['bytes']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $response = $this->getJson('POST', $apiPath.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame(200, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(isset($response['resource']['content']['files']));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertTrue(0 < count(isset($response['resource']['content']['files'])));
src/Ayamel/ApiBundle/Tests/ContentUploadIntegrationTest.php:        $this->assertSame('normal', $response['resource']['status']);
src/Ayamel/ApiBundle/Tests/FixturedTestCase.php:        // $container = $this->getClient()->getContainer();
src/Ayamel/ApiBundle/Tests/FixturedTestCase.php:        // $doc = $container->get('doctrine_mongodb');
src/Ayamel/ApiBundle/Tests/FixturedTestCase.php:        // $repo = $doc->getRepository('ACFlagshipBundle:User');
src/Ayamel/ApiBundle/Tests/FixturedTestCase.php:        // $user = $repo->findOneBy(['email' => 'queenie16@yahoo.com']);
src/Ayamel/ApiBundle/Tests/FixturedTestCase.php:        // $this->user = $user;
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->getJson('POST', '/api/v1/resources?_key='.$id, array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:            throw new \RuntimeException(sprintf("Failed creating test Resource: (%s - %s)", $json['response']['code'], $json['response']['message']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->getJson('POST', '/api/v1/relations?_key='.$id, array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:            throw new \RuntimeException(sprintf("Failed creating test Relation: (%s - %s)", $json['response']['code'], $json['response']['message']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $res1 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $res2 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->createTestRelation($rel1);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->createTestRelation($rel2);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $r1 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $r2 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertFalse(isset($r1['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertFalse(isset($r2['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $response = $this->getResponse('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(is_string($data['relation']['id']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($subjectId, $data['relation']['subjectId']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($objectId, $data['relation']['objectId']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['type'], $data['relation']['type']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['attributes'], $data['relation']['attributes']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['clientUser'], $data['relation']['clientUser']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($expectedClient, $data['relation']['client']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($data['relation']['client']['id']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $res1 = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($res1['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($res1['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($subjectId, $res1['resource']['relations'][0]['subjectId']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($objectId, $res1['resource']['relations'][0]['objectId']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['type'], $res1['resource']['relations'][0]['type']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['attributes'], $res1['resource']['relations'][0]['attributes']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['clientUser'], $res1['resource']['relations'][0]['clientUser']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($data['relation']['client']['id'], $res1['resource']['relations'][0]['client']['id']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $res2 = $this->getJson('GET', '/api/v1/resources/'.$objectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($res2['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($res2['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($subjectId, $res2['resource']['relations'][0]['subjectId']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($objectId, $res2['resource']['relations'][0]['objectId']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['type'], $res2['resource']['relations'][0]['type']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['attributes'], $res2['resource']['relations'][0]['attributes']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($relationData['clientUser'], $res2['resource']['relations'][0]['clientUser']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($data['relation']['client']['id'], $res2['resource']['relations'][0]['client']['id']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        //non-existing subject
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $response = $this->getResponse('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(404, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        //non-existing object
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $subject = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $response = $this->getResponse('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(404, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=55678isafgd56789asfgdhf4568', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        //create relation as client 2 to hidden resource - fails
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->getJson('POST', '/api/v1/relations?_key=55678isafgd56789asfgdhf4568', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->createTestResource('45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->createTestResource('55678isafgd56789asfgdhf4568');
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->createTestResource('45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->createTestResource('45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $json = $this->createTestResource('55678isafgd56789asfgdhf4568');
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(403, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $r1 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $r2 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(400, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array('CONTENT_TYPE' => 'application/json'), json_encode(array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(400, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $stubs = $this->createTestResourcesWithRelations();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(2, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$objectId.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(2, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($rel1Id, $data['relations'][0]['id']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($rel2Id, $data['relations'][1]['id']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $response = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$id.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(is_array($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(empty($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $stubs = $this->createTestResourcesWithRelations();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'/relations?_key=45678isafgd56789asfgdhf4567&type=nonexisting,part_of', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$objectId.'/relations?_key=45678isafgd56789asfgdhf4567&type=requires,nonexisting', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $stubs = $this->createTestResourcesWithRelations();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(count($data['relations']) > 0);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567&id='.$subjectId, array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(2, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567&subjectId='.$subjectId, array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567&objectId='.$subjectId, array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567&id='.$subjectId.'&type=requires', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(1, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $res1 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $res2 = $this->createTestResource();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $rel = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(201, $rel['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($rel['relation']['id']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $subject = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $object = $this->getJson('GET', '/api/v1/resources/'.$objectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($subject['resource']['relations'][0]['id']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($object['resource']['relations'][0]['id']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $response = $this->getResponse('DELETE', '/api/v1/relations/'.$relationId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $subject = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $object = $this->getJson('GET', '/api/v1/resources/'.$objectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertFalse(isset($subject['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertFalse(isset($object['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $stubs = $this->createTestResourcesWithRelations();
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(2, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$objectId.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(2, count($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($rel1Id, $data['relations'][0]['id']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame($rel2Id, $data['relations'][1]['id']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$objectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($data['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(2, count($data['resource']['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('DELETE', '/api/v1/resources/'.$subjectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$subjectId.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(410, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertFalse(isset($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$objectId.'/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(isset($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(is_array($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertTrue(empty($data['relations']));
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources/'.$objectId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/RelationsIntegrationTest.php:        $this->assertFalse(isset($data['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceCollectionTest.php:        $return = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceCollectionTest.php:        $this->assertSame(201, $return['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceCollectionTest.php:        $return = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceCollectionTest.php:        $this->assertSame(400, $return['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson('POST', '/api/v1/resources?_key='.$apiKey, array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        //get/put/delete on non-existing resource
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('GET', '/api/v1/resources/5');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(404, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(404, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('PUT', '/api/v1/resources/5');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('PUT', '/api/v1/resources/5?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(404, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(404, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('DELETE', '/api/v1/resources/5');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('GET', '/api/v1/resources/5', array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(404, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:    //NOTE: Keep this particular test up-to-date with all available fields
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:                'bcp47' => array('en', 'en-GB')
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(is_string($json['resource']['id']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['title'], $json['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['type'], $json['resource']['type']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['description'], $json['resource']['description']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['keywords'], $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['languages'], $json['resource']['languages']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['subjectDomains'], $json['resource']['subjectDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['functionalDomains'], $json['resource']['functionalDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['visibility'], $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['copyright'], $json['resource']['copyright']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['license'], $json['resource']['license']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['origin'], $json['resource']['origin']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['clientUser'], $json['resource']['clientUser']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($expectedClient, $json['resource']['client']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['resource']['dateAdded']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($json['resource']['dateModified'], $json['resource']['dateAdded']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($json['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('test_client', $response['resource']['client']['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($response['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($response['resource']['foooooo']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getJson('GET', '/api/v1/resources/'.$id);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $response['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('test', $response['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('test_client', $response['resource']['client']['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($response['resource']['dateAdded']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($response['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(is_string($json['resource']['id']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['title'], $json['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['type'], $json['resource']['type']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['description'], $json['resource']['description']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['keywords'], $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['subjectDomains'], $json['resource']['subjectDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['functionalDomains'], $json['resource']['functionalDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['visibility'], $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['copyright'], $json['resource']['copyright']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['license'], $json['resource']['license']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['origin'], $json['resource']['origin']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['clientUser'], $json['resource']['clientUser']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($expectedClient, $json['resource']['client']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['resource']['dateAdded']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($json['resource']['dateModified'], $json['resource']['dateAdded']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($json['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $modified = $this->getJson("PUT", '/api/v1/resources/'.$resourceId."?_key=45678isafgd56789asfgdhf4567", array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $modified['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('awaiting_content', $modified['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($resourceId, $modified['resource']['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($changes['title'], $modified['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['type'], $modified['resource']['type']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['description'], $modified['resource']['description']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['keywords'], $modified['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($changes['subjectDomains'], $modified['resource']['subjectDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($changes['functionalDomains'], $modified['resource']['functionalDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['visibility'], $modified['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['copyright'], $modified['resource']['copyright']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['license'], $modified['resource']['license']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['origin'], $modified['resource']['origin']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($changes['clientUser'], $modified['resource']['clientUser']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($expectedClient, $modified['resource']['client']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($modified['resource']['dateAdded']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($dateAdded, $modified['resource']['dateAdded']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($modified['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse($modified['resource']['dateModified'] === $modified['resource']['dateAdded']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $modified = $this->getJson("PUT", '/api/v1/resources/'.$resourceId."?_key=45678isafgd56789asfgdhf4567", array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $modified['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('awaiting_content', $modified['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($resourceId, $modified['resource']['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($changes2['title'], $modified['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['type'], $modified['resource']['type']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['description']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['keywords'], $modified['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['subjectDomains']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($changes['functionalDomains'], $modified['resource']['functionalDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['visibility'], $modified['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['copyright'], $modified['resource']['copyright']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['license'], $modified['resource']['license']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['origin'], $modified['resource']['origin']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($expectedClient, $modified['resource']['client']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($modified['resource']['dateAdded']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($dateAdded, $modified['resource']['dateAdded']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($modified['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse($prevDateModified === $modified['resource']['dateModified']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(is_string($json['resource']['id']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['title'], $json['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['type'], $json['resource']['type']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['description'], $json['resource']['description']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['keywords'], $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['subjectDomains'], $json['resource']['subjectDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['functionalDomains'], $json['resource']['functionalDomains']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['visibility'], $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['copyright'], $json['resource']['copyright']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['license'], $json['resource']['license']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['origin'], $json['resource']['origin']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['clientUser'], $json['resource']['clientUser']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($expectedClient, $json['resource']['client']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['resource']['dateAdded']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($json['resource']['dateModified'], $json['resource']['dateAdded']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($json['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($json['contentUploadUrl']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $modified = $this->getJson("DELETE", '/api/v1/resources/'.$resourceId."?_key=45678isafgd56789asfgdhf4567", array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $modified['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($resourceId, $modified['resource']['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('deleted', $modified['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($modified['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['title']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['description']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['type']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['keywords']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['subjectDomains']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['functionalDomains']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['visibility']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['copyright']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['license']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['origin']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['client']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['dateModified']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['relations']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['title'], $json['resource']['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($data['description'], $json['resource']['description']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $modified = $this->getJson("DELETE", '/api/v1/resources/'.$resourceId."?_key=45678isafgd56789asfgdhf4567", array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($modified['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['title']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertFalse(isset($modified['resource']['description']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        //try to get/put/delete again - expect a 410 and deleted resource object
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('GET', '/api/v1/resources/'.$resourceId);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(410, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(410, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($content['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('deleted', $content['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('PUT', '/api/v1/resources/'.$resourceId."?_key=45678isafgd56789asfgdhf4567");
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(410, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(410, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($content['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('deleted', $content['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $response = $this->getResponse('DELETE', '/api/v1/resources/'.$resourceId."?_key=45678isafgd56789asfgdhf4567");
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(410, $response->getStatusCode());
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $content = json_decode($response->getContent(), true);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(410, $content['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($content['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('deleted', $content['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key='.$client1Key, array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(array('test_client'), $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key='.$client2Key);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(403, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key='.$client1Key, array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key='.$client2Key);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(array('test_client', 'test_client2'), $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key='.$client1Key);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key='.$client1Key, array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key='.$client2Key);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(array('test_client2','test_client'), $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key='.$client1Key);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(array('test_client2','test_client'), $json['resource']['visibility']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=fakekey', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/5', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("DELETE", '/api/v1/resources/5', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/5?_key=fakekey', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("DELETE", '/api/v1/resources/5?_key=fakekey', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/'.$id, array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/'.$id.'?_key=fakekey', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(401, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/'.$id."?_key=55678isafgd56789asfgdhf4568", array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(403, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $json = $this->getJson("DELETE", '/api/v1/resources/'.$id."?_key=55678isafgd56789asfgdhf4568", array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(403, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->clearDatabase();
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $r1 = $this->createExampleResource(array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $r2 = $this->createExampleResource(array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $r3 = $this->createExampleResource(array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $r4 = $this->createExampleResource(array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $r5 = $this->createExampleResource(array(
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(4, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('R5', $data['resources'][$count - 1]['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?skip=1');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(3, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('R3', $data['resources'][1]['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?limit=2');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(2, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame('R2', $data['resources'][1]['title']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(5, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?_key=55678isafgd56789asfgdhf4568');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertTrue(isset($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(0, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?clientUser=evan');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(1, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?clientUser=evan,nave');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(2, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?type=video');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(1, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?type=video,data');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(4, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?id='.$r2['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(1, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?id='.$r2['id'].','.$r5['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(2, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?languages=en');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(1, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($r5['id'], $data['resources'][0]['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        //iso639-3 code
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?languages=arq');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(1, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($r5['id'], $data['resources'][0]['id']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $data = $this->getJson('GET', '/api/v1/resources?languages=ar,arq');
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(200, $data['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame(1, count($data['resources']));
src/Ayamel/ApiBundle/Tests/ResourceIntegrationTest.php:        $this->assertSame($r5['id'], $data['resources'][0]['id']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('foo,bar,baz', $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('awaiting_content', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('foo,bar,baz', $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson('POST', $apiPath.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('normal', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('foo,bar,baz', $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertTrue(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(1, count($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('normal', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('foo,bar,baz', $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertTrue(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(1, count($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson("PUT", '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('normal', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('foo,bar,baz,qux', $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertTrue(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(1, count($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('normal', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('foo,bar,baz,qux', $json['resource']['keywords']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertTrue(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(1, count($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson("DELETE", '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('deleted', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertTrue(isset($json['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567');
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame(410, $json['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertSame('deleted', $json['resource']['status']);
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertTrue(isset($json['resource']['dateDeleted']));
src/Ayamel/ApiBundle/Tests/ResourceLifecycleTest.php:        $this->assertFalse(isset($json['resource']['content']));
src/Ayamel/ApiBundle/Tests/ResourceSequenceTest.php:        $return = $this->getJson("POST", '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceSequenceTest.php:        $this->assertSame(201, $return['response']['code']);
src/Ayamel/ApiBundle/Tests/ResourceSequenceTest.php:        $return = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/ApiBundle/Tests/ResourceSequenceTest.php:        $this->assertSame(400, $return['response']['code']);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m = $this->getManager();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertNotNull($m);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m instanceof UploadTokenManager);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m = $this->getManager();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->hasTokenforId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->getTokenForId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $createdToken = $m->createTokenForId($id);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue(is_string($createdToken));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m->hasTokenForId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $retrievedToken = $m->getTokenForId($id);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue(is_string($retrievedToken));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertSame($createdToken, $retrievedToken);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->removeTokenForId($id);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->hasTokenforId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->getTokenForId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m = $this->getManager();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->setExpectedException('InvalidArgumentException');
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->useTokenForId($id, $token);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m = $this->getManager();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $token = $m->createTokenForId("different_id");
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->setExpectedException('InvalidArgumentException');
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->useTokenForId($id, $token);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m = $this->getManager();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $token = $m->createTokenForId($id);
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m->hasTokenForId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m->useTokenForId($id, $token));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->hasTokenForId($id));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m = $this->getManager();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->createTokenForId('id1');
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->createTokenForId('id2');
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->createTokenForId('id3');
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m->hasTokenForId('id1'));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m->hasTokenForId('id2'));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertTrue($m->hasTokenForId('id3'));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $m->clearTokens();
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->hasTokenForId('id1'));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->hasTokenForId('id2'));
src/Ayamel/ApiBundle/Tests/UploadTokenManagerTest.php:        $this->assertFalse($m->hasTokenForId('id3'));
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        $this->cache = $cache;
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        $this->token_ttl = (int) $seconds;
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        return $this->cache->contains($this->getTokenCacheKey($id));
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        return $this->cache->fetch($this->getTokenCacheKey($id));
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        $token = $this->generateTokenForId($id);
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        $this->cache->save($this->getTokenCacheKey($id), $token, $this->token_ttl);
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        if (!$this->hasTokenForId($id)) {
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        if (!$storedToken = $this->getTokenForId($id)) {
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        $this->removeTokenForId($id);
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        return $this->cache->delete($this->getTokenCacheKey($id));
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        return $this->cache->deleteAll();
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        $string = $id.microtime(true).$this->secret;
src/Ayamel/ApiBundle/Validation/UploadTokenManager.php:        return $this->cache_key_prefix.$id;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $this->cache = $cache;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $this->cacheResults = $cacheResults;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $this->cacheTTL = $cacheTTL;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $this->cacheTTL = $ttl;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $this->cacheResults = (bool) $bool;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        return $this->analyzers;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $this->analyzers[] = $a;
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        foreach ($this->analyzers as $analyzer) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:            if ($analyzer->acceptsFile($ref)) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        $cacheKey = ($ref->getInternalUri()) ? md5($ref->getInternalUri())."_attrs" : md5($ref->getDownloadUri())."_attrs";
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        if ($this->cache) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:            if ($attrs = $this->cache->fetch($cacheKey)) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:                $ref->setAttributes($attrs);
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        foreach ($this->analyzers as $analyzer) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:            if ($analyzer->acceptsFile($ref)) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:                $analyzer->analyzeFile($ref);
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:        if ($this->cache && $this->cacheResults) {
src/Ayamel/FilesystemBundle/Analyzer/DelegatingAnalyzer.php:            $this->cache->save($cacheKey, $ref->getAttributes(), $this->cacheTTL);
src/Ayamel/FilesystemBundle/AyamelFilesystemBundle.php:        $container->addCompilerPass(new RegisterFilesystemEventListenersPass());
src/Ayamel/FilesystemBundle/AyamelFilesystemBundle.php:        $container->addCompilerPass(new RegisterFilesystemAnalyzersPass());
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:            ->setName('fs:analyze')
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:            ->setDescription('Use registered analyzers to return a FileReference instance of a path, with attributes for the file.');
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:        $analyzer = $this->getContainer()->get('ayamel.api.filesystem.analyzer');
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:            $analyzer->setTrustCache(false);
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:            $analyzer->setCacheResults(true);
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:            $analyzer->setAnalyzeRemoteFiles(true);
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:        $ref = $analyzer->analyzeFile($ref);
src/Ayamel/FilesystemBundle/Command/FilesystemAnalyzeCommand.php:        var_dump($ref->getAttributes());
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:            ->setName('fs:clean')
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:            ->setDescription('Remove files in the filesystem for which no records exist in Resource storage.')
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:            ->setDefinition(array(
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $fs = $this->getContainer()->get('ayamel.api.filesystem');
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        if (!($fs instanceof FilesystemManager && $fs->getFilesystem() instanceof LocalFilesystem) && !$fs instanceof LocalFilesystem) {
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $mongo = $this->getContainer()->get('doctrine_mongodb.odm.default_connection');
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $results = $mongo->ayamel->resources->find(array('content.files.internalUri' => array('$exists'=>true)), array('content.files.internalUri' => 1));
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:                    $output->writeln(sprintf("Cannot find %s", $file['internalUri']));
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:                    if ($input->getOption('update')) {
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:                        if ($this->removeFileReference($id, $file['internalUri'])) {
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $output->writeln(sprintf("Could not find <info>%s</info> of <info>%s</info> local files references on disk.  <info>%s</info> db references removed.", $lost, $total, $removed));
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $manager = $this->getContainer()->get('doctrine_mongodb')->getManager();
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $resource = $manager->getRepository('AyamelResourceBundle:Resource')->find($id);
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        foreach ($resource->content->getFiles() as $file) {
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:            if ($file->getInternalUri() !== $path) {
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $resource->content->setFiles($newFiles);
src/Ayamel/FilesystemBundle/Command/FilesystemCleanCommand.php:        $manager->flush();
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:            ->setName('fs:stats')
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:            ->setDescription('Return count of files and directories managed locally by the Ayamel API, as well as filesystem specific stats (if any).');
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $fs = $this->getContainer()->get('ayamel.api.filesystem');
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $counts = $fs->getCount(FilesystemInterface::COUNT_BOTH);
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $output->writeln("Filesystem counts:");
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $output->writeln(sprintf("<comment>Files: <info>%s</info></comment>", $counts['files']));
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $output->writeln(sprintf("<comment>Directories: <info>%s</info></comment>", $counts['directories']));
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $class = ($fs instanceof FilesystemManager) ? get_class($fs->getFilesystem()) : get_class($fs);
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        $output->writeln(sprintf("Filesystem stats (<info>%s</info>):", $class));
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:        foreach ($fs->getStats() as $key => $val) {
src/Ayamel/FilesystemBundle/Command/FilesystemStatsCommand.php:            $output->writeln(sprintf("<comment>%s: <info>%s</info></comment>", $key, $val));
src/Ayamel/FilesystemBundle/Command/UpdatePathsCommand.php:            ->setName('fs:update:paths')
src/Ayamel/FilesystemBundle/Command/UpdatePathsCommand.php:            ->setDescription('Update resource FileReference objects in database to point to a new local base path.');
src/Ayamel/FilesystemBundle/Command/UpdateUrisCommand.php:            ->setName('fs:update:uris')
src/Ayamel/FilesystemBundle/Command/UpdateUrisCommand.php:            ->setDescription('Update resource FileReference objects in database to point to a new public uri.');
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemAnalyzersPass.php:        $analyzerDefinition = $container->getDefinition('ayamel.filesystem.analyzer');
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemAnalyzersPass.php:        if ('Ayamel\FilesystemBundle\Analyzer\DelegatingAnalyzer' === $analyzerDefinition->getClass()) {
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemAnalyzersPass.php:            foreach ($container->findTaggedServiceIds('ayamel.filesystem.analyzer') as $id => $attributes) {
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemAnalyzersPass.php:                $class = $container->getDefinition($id)->getClass();
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemAnalyzersPass.php:                if (!$refClass->implementsInterface('Ayamel\FilesystemBundle\Analyzer\AnalyzerInterface')) {
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemAnalyzersPass.php:                $analyzerDefinition->addMethodCall('registerAnalyzer', array(new Reference($id)));
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:        $dispatcherDefinition = $container->getDefinition('event_dispatcher');
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:        foreach ($container->findTaggedServiceIds('ayamel.filesystem.event_listener') as $id => $events) {
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:                        '/(?<=\b)[a-z]/ie',
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:                        '/[^a-z0-9]/i'
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:                $dispatcherDefinition->addMethodCall('addListenerService', array($event['event'], array($id, $event['method']), $priority));
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:        foreach ($container->findTaggedServiceIds('ayamel.filesystem.event_subscriber') as $id => $attributes) {
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:            $class = $container->getDefinition($id)->getClass();
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:            if (!$refClass->implementsInterface($interface)) {
src/Ayamel/FilesystemBundle/DependencyInjection/Compiler/RegisterFilesystemEventListenersPass.php:            $dispatcherDefinition->addMethodCall('addSubscriberService', array($id, $class));
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:     * @var object - Ayamel\FilesystemBundle\Filesystem\FilesystemInterface
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:     * @var object - Ayamel\ResourceBundle\Document\FileReference
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:     * @var string - the id of the Resource associated with the file reference
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:        $this->id = $id;
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:        $this->ref = $ref;
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:        $this->fs = $fs;
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:        return $this->id;
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:        return $this->ref;
src/Ayamel/FilesystemBundle/Event/FilesystemEvent.php:        return $this->fs;
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $this->container = $container;
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $this->container->get('ayamel.api.filesystem')->removeFilesForId($e->getResource()->getId());
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $request = $e->getRequest();
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if ($file = $request->files->get('file', false)) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:                'representation' => $request->request->get('representation', 'original'),
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:                'quality' => $request->request->get('quality', 0),
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:                'mime' => $request->request->get('mime', false),
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:                'mimeType' => $request->request->get('mime', false),
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:                'attributes' => $request->request->get('attributes', '{}')
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $e->setContentType('file_upload');
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $e->setContentData($uploadedData);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if ('file_upload' !== $e->getContentType()) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $data = $e->getContentData();
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $resource = $e->getResource();
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if (!$uploadedFile->isValid()) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $msg = isset($this->uploadErrorTexts[$uploadedFile->getError()]) ? $this->uploadErrorTexts[$uploadedFile->getError()] : "Generic file upload error.";
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $fs = $this->container->get('ayamel.api.filesystem');
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $receivedName = ($uploadedFile->getClientOriginalName()) ? $uploadedFile->getClientOriginalName() : $uploadedFile->getTempName();
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $filename = $this->cleanUploadedFileName($receivedName);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $uploadedRef = FileReference::createFromLocalPath($uploadedFile->getPathname());
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $newRef = $fs->addFileForId($resource->getId(), $uploadedRef, $filename, true);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        //inject relevant client-uploaded data, but only if it has not already been set by the
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if (!$newRef->getMimeType()) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $mime = ($uploadedFile->getClientMimeType()) ? $uploadedFile->getClientMimeType() : $uploadedFile->getMimeType();
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $newRef->setMimeType($mime);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if (!$newRef->getMime()) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $newRef->setMime($newRef->getMimeType());
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if (!$newRef->getBytes()) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $newRef->setBytes($uploadedFile->getClientSize());
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $newRef->setRepresentation($data['representation']);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $newRef->setQuality($data['quality']);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $newRef->setMime($data['mime']);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $newRef->setMimeType($data['mimeType']);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:                $newRef->mergeAttributes($attrs);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $errors = $this->container->get('validator')->validate($newRef);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $fs->removeFile($newRef);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $resource->content->addFile($newRef);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        if ($newRef->isOriginal()) {
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $resource->setStatus(Resource::STATUS_AWAITING_PROCESSING);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:            $resource->setStatus(Resource::STATUS_NORMAL);
src/Ayamel/FilesystemBundle/EventListener/FileUploadContentSubscriber.php:        $e->setResource($resource);
src/Ayamel/FilesystemBundle/EventListener/FilesystemAnalyzerSubscriber.php:        $this->container = $container;
src/Ayamel/FilesystemBundle/EventListener/FilesystemAnalyzerSubscriber.php:        $this->container->get('ayamel.filesystem.analyzer')->analyzeFile($e->getFileReference());
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $this->container = $container;
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $request = $e->getRequest();
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $body = $e->getRequestBody();
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:            $newFileRef = $this->container->get('serializer')->deserialize(json_encode($fileData), 'Ayamel\ResourceBundle\Document\FileReference', 'json');
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:            $errors = $this->container->get('validator')->validate($newFileRef);
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:            if ($ref->getDownloadUri()) {
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:                if (!$this->container->get('ayamel.resource.provider')->createResourceFromUri($ref->getDownloadUri())) {
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:                    $failed[] = $ref->getDownloadUri();
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $e->setContentType('remote_files');
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $e->setContentData($remoteFiles);
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        if ('remote_files' !== $e->getContentType()) {
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $resource = $e->getResource();
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        foreach ($e->getContentData() as $fileRef) {
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:            $resource->content->addFile($fileRef);
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $resource->setStatus(Resource::STATUS_NORMAL);
src/Ayamel/FilesystemBundle/EventListener/RemoteFilesContentSubscriber.php:        $e->setResource($resource);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param  string  $id   - resource id of owning object
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param  string  $name - end of file name including extension, unique for that object
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @return int    - the number of files successfully removed
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param string        $id          - resource id
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param FileReference $file        - reference to the file to associate with a given id.
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param string        $newBasename - optional new basename to use for file
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param boolean       $copy        - whether or not to copy the file to it's new location, or move it.
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param int           $onConflict  - how to handle conflicts for files that already exist, either throw exceptions or overwrite
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @return FileReference - reference to file at it's new location
src/Ayamel/FilesystemBundle/Filesystem/FilesystemInterface.php:     * @param  string $includeDirectories - whether or not to include directories in the count
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:     * @var object - Ayamel\FilesystemBundle\Filesystem\FilesystemInterface
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:     * @var object - Symfony\Component\EventDispatcher\EventDispatcherInterface
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $this->fs = $fs;
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $this->dispatcher = $dispatcher;
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->generateBaseDirectoryForId($id);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->generateBasePathForId($id);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->generateBaseFilenameForId($id);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $id = $this->getIdForFile($ref);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $this->dispatcher->dispatch(Events::FILESYSTEM_PRE_DELETE, new FilesystemEvent($this->fs, $ref, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        if (!$this->fs->removeFile($ref)) {
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $this->dispatcher->dispatch(Events::FILESYSTEM_POST_DELETE, new FilesystemEvent($this->fs, $ref, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->getIdForFile($ref);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $ref = $this->getFileForId($id, $name);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $this->dispatcher->dispatch(Events::FILESYSTEM_PRE_DELETE, new FilesystemEvent($this->fs, $ref, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $return = $this->fs->removeFileForId($id, $name);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $this->dispatcher->dispatch(Events::FILESYSTEM_POST_DELETE, new FilesystemEvent($this->fs, $ref, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        foreach ($this->getFilesForId($id) as $ref) {
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:            $this->removeFile($ref);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $ref = $this->fs->getFileForId($id, $name);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $e = $this->dispatcher->dispatch(Events::FILESYSTEM_RETRIEVE, new FilesystemEvent($this->fs, $ref, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $e->getFileReference();
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $returned = $this->fs->getFilesForId($id);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:            $processed[] = $this->dispatcher->dispatch(Events::FILESYSTEM_RETRIEVE, new FilesystemEvent($this->fs, $ref, $id))->getFileReference();
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->hasFileForId($id, $name);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $e = $this->dispatcher->dispatch(Events::FILESYSTEM_PRE_ADD, new FilesystemEvent($this->fs, $ref, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $ref = $e->getFileReference();
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $newRef = $this->fs->addFileForId($id, $ref, $newBasename, $copy, $onConflict);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        $e = $this->dispatcher->dispatch(Events::FILESYSTEM_POST_ADD, new FilesystemEvent($this->fs, $newRef, $id));
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $e->getFileReference();
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->getCount($return);
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs->getStats();
src/Ayamel/FilesystemBundle/Filesystem/FilesystemManager.php:        return $this->fs;
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:     * @var string - the base filepath used for all resource file storage
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:     * @var string - a secret string used for generating secret hashes unique to a file and resource id
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:     * @var string - the root public uri from which files in this system are accessible from the web
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:     * @param string $dir    - Absolute local file system path for use as root point.
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:     * @param string $secret - A secret to use when generating hashes.
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $this->rootDir = $dir;
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $this->secret = $secret;
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $this->publicRootUri = $publicRootUri;
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:     * This implementation uses an md5() hash of the received id to generate a 3 level hashed directory structure, using 2 hex characters per directory (0-9, a-f).  This yields
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $hashDirs = $hash[$end-1].$hash[$end-2].DIRECTORY_SEPARATOR.$hash[$end-3].$hash[$end-4].DIRECTORY_SEPARATOR.$hash[$end-5].$hash[$end-6];
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        return $this->rootDir.DIRECTORY_SEPARATOR.$hashDirs;
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        return $this->generateBaseDirectoryForId($id).DIRECTORY_SEPARATOR.$this->generateBaseFilenameForId($id);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        return $id."_".$this->createFileSecretForId($id)."_";
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        if (!$uri = $ref->getInternalUri()) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $exp = explode("_", $ref->getInternalUri());
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        if (!$uri = $ref->getInternalUri()) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        return unlink($this->generateBasePathForId($id).$name);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        foreach ($this->getFilesForId($id) as $ref) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            if ($this->removeFile($ref)) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $path = $this->generateBasePathForId($id).$name;
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $pattern = $this->generateBasePathForId($id)."*";
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        return file_exists($this->generateBasePathForId($id).$name);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        if (!file_exists($file->getInternalUri())) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $base = $this->generateBasePathForId($id);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $filename = ($newBasename) ? $base.$newBasename : $base.basename($file->getInternalUri());
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                throw new \RuntimeException(sprintf("%s cannot overwrite a pre-existing file.", __CLASS__));
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            if (@copy($file->getInternalUri(), $filename)) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                $file->setInternalUri($filename);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                return $this->ensurePaths($file);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                throw new \RuntimeException(sprintf("Could not copy file [%s] to [%s].", $file->getInternalUri(), $filename));
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            if (@rename($file->getInternalUri(), $filename)) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                $file->setInternalUri($filename);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                return $this->ensurePaths($file);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                throw new \RuntimeException(sprintf("Could not move file [%s] to [%s].", $file->getInternalUri(), $filename));
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        if ($this->publicRootUri) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            $localPath = $ref->getInternalUri();
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            $filePath = implode("/", array_diff(explode("/", $localPath), explode("/", $this->rootDir)));
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            $ref->setDownloadUri($this->publicRootUri.'/'.$filePath);
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        foreach (scandir($this->rootDir, $sortOrder) as $lvl1) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            foreach (scandir($this->rootDir.$ds.$lvl1, $sortOrder) as $lvl2) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                foreach (scandir($this->rootDir.$ds.$lvl1.$ds.$lvl2, $sortOrder) as $lvl3) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                    foreach (scandir($this->rootDir.$ds.$lvl1.$ds.$lvl2.$ds.$lvl3, $sortOrder) as $file) {
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:                    $fCount-=2;     //subtract 2 to take into account the '.' and '..' links, this will be faster than checking explicitly in large directories
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            'root_dir' => $this->rootDir,
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:            'root_uri' => $this->publicRootUri,
src/Ayamel/FilesystemBundle/Filesystem/LocalFilesystem.php:        $hash = sha1($id.$this->secret);
src/Ayamel/FilesystemBundle/README.md:A FilesystemManager can wrap another instance of a Filesystem, and fires pre/post events for all file-related actions.
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - %ayamel.filesystem.local_filesystem.root_dir%
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - %ayamel.filesystem.local_filesystem.secret%
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - %ayamel.filesystem.local_filesystem.base_uri%
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - @?ayamel.filesystem.analyzer_cache #optional, use it if the service is defined
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - %ayamel.filesystem.analyzer.cache_results%
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - %ayamel.filesystem.analyzer.cache_ttl%
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - { name: ayamel.filesystem.event_subscriber }
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - { name: ayamel.api.event_subscriber }
src/Ayamel/FilesystemBundle/Resources/config/config.yml:            - { name: ayamel.api.event_subscriber }
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->test_dir = __DIR__."/files/test_root";
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        if (is_dir($this->test_dir)) {
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            $this->rrmdir($this->test_dir);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            mkdir($this->test_dir, 0777);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            mkdir($this->test_dir, 0777);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:                    $this->rrmdir($file);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        return $this->setUp();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        return new LocalFilesystem($this->test_dir, "secret");
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            'basePath' => $fs->generateBasePathForId($id),
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            'baseFileName' => $fs->generateBaseFilenameForId($id),
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            'baseDirectory' => $fs->generateBaseDirectoryForId($id),
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            'secret' => $fs->createFileSecretForId($id),
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertNotNull($fs);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue($fs instanceof LocalFilesystem);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(0, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(0, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $info = $this->getHashInfo($id);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertFalse(is_dir($info['baseDirectory']));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertFalse(is_file($newFilePath));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(0, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(0, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $newRef = $fs->addFileForId($id, $ref, null, true);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue($newRef instanceof FileReference);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame($newFilePath, $newRef->getInternalUri());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue(is_dir($info['baseDirectory']));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue(is_file($newFilePath));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(1, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(4, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $info = $this->getHashInfo($id);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertFalse(is_dir($info['baseDirectory']));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertFalse(is_file($newFilePath));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $newRef = $fs->addFileForId($id, $ref, 'newname.txt', true);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue($newRef instanceof FileReference);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame($newFilePath, $newRef->getInternalUri());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue(is_dir($info['baseDirectory']));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue(is_file($newFilePath));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(1, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(4, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $info = $this->getHashInfo($id);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertFalse(is_dir($info['baseDirectory']));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $newRef = $fs->addFileForId($id, $ref, 'newname1.txt', true);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $newRef = $fs->addFileForId($id, $ref, 'newname2.txt', true);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $newRef = $fs->addFileForId($id, $ref, 'newname3.txt', true);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $newRef = $fs->addFileForId($id, $ref, 'newname4.txt', true);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertTrue(is_dir($info['baseDirectory']));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(4, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(7, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->testAddFileForId3();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs->removeFilesForId('id');
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(0, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(3, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->testAddFileForId3();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(4, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(7, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs->removeFileForId('id', 'newname4.txt');
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(3, $fs->getCount());
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(6, $fs->getCount(FilesystemInterface::COUNT_ALL));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->testAddFileForId3();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $fs = $this->getFs();
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $files = $fs->getFilesForId('id');
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            $this->assertTrue($file instanceof FileReference);
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            $this->assertTrue(is_file($file->getInternalUri()));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:            $this->assertSame("newname$i.txt", substr($file->getInternalUri(), -12, 12));
src/Ayamel/FilesystemBundle/Tests/LocalFilesystemTest.php:        $this->assertSame(4, $i);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $this->mediaInfo = $mediaInfo;
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        if ($ref->getInternalUri()) {
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $path = $ref->getInternalUri();
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $data = $this->mediaInfo->scan($path);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $this->handleVideo($ref, $data);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $this->handleAudio($ref, $data);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $this->handleImage($ref, $data);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $ref->setMimeType($general['internet_media_type'][0]);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:                'height' => $this->getIntValue($image['height']),
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:                'width' => $this->getIntValue($image['width'])
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['aspectRatio'] = $this->calculateAspectRatio($attrs['frameSize']['width'], $attrs['frameSize']['width']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $ref->setAttribute($key, $val);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $ref->setMimeType($general['internet_media_type'][0]);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:                'height' => $this->getIntValue($video['height']),
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:                'width' => $this->getIntValue($video['width'])
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['aspectRatio'] = $this->parseAspectRatio($video['display_aspect_ratio']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['frameRate'] = $this->parseFPS($video['frame_rate']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['bitrate'] = $this->getIntValue($general['overall_bit_rate']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['duration'] = $this->parseDuration($general['duration']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $ref->setAttribute($key, $val);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $ref->setMimeType($general['internet_media_type'][0]);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['bitrate'] = $this->getIntValue($general['overall_bit_rate']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['duration'] = $this->parseDuration($general['duration']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $attrs['channels'] = $this->getIntValue($audio['channel_s_']);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:            $ref->setAttribute($key, $val);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $val = $this->getIntValue($val);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $val = $this->getFloatValue($val);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $val = $this->getIntValue($val);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        $gcd = $this->calculateGCD($width, $height);
src/Ayamel/MediaInfoBundle/MediaInfoAnalyzer.php:        return ($r != 0) ? $this->calculateGCD($height, $r) : abs($height);
src/Ayamel/MediaInfoBundle/Resources/config/config.yml:            - { name: ayamel.filesystem.analyzer }
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $mediainfoPath = $this->getContainer()->getParameter('ac_media_info.path');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:            $this->markTestSkipped("mediainfo cli utility is not accessible on this system.");
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer = $this->getContainer()->get('ayamel.filesystem.mediainfo_analyzer');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue($analyzer instanceof MediaInfoAnalyzer);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $delegator = $this->getContainer()->get('ayamel.filesystem.analyzer');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzers = $delegator->getAnalyzers();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(0 < count($analyzers));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        foreach ($delegator->getAnalyzers() as $analyzer) {
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue($found);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $c = $this->getContainer();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->ensureTestable();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer = $c->get('ayamel.filesystem.mediainfo_analyzer');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $attrs = $ref->getAttributes();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(empty($attrs));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer->analyzeFile($ref);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $attrs = $ref->getAttributes();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame('image/jpeg', $ref->getMimeType());
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertFalse(empty($attrs));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(50, $attrs['frameSize']['width']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(50, $attrs['frameSize']['height']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $c = $this->getContainer();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->ensureTestable();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer = $c->get('ayamel.filesystem.mediainfo_analyzer');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $attrs = $ref->getAttributes();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(empty($attrs));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer->analyzeFile($ref);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $attrs = $ref->getAttributes();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame('audio/mpeg', $ref->getMimeType());
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertFalse(empty($attrs));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(1, $attrs['duration']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(64000, $attrs['bitrate']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(2, $attrs['channels']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $c = $this->getContainer();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->ensureTestable();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer = $c->get('ayamel.filesystem.mediainfo_analyzer');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $attrs = $ref->getAttributes();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(empty($attrs));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $analyzer->analyzeFile($ref);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $attrs = $ref->getAttributes();
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame('video/mp4', $ref->getMimeType());
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertFalse(empty($attrs));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(1, $attrs['duration']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(isset($attrs['bitrate']));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(is_int($attrs['bitrate']));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertTrue(isset($attrs['frameSize']));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(854, $attrs['frameSize']['width']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(480, $attrs['frameSize']['height']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame(25, $attrs['frameRate']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoAnalyzerTest.php:        $this->assertSame('16:9', $attrs['aspectRatio']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $mediainfoPath = $this->getContainer()->getParameter('ac_media_info.path');
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:            $this->markTestSkipped("mediainfo cli utility is not accessible on this system.");
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $json = $this->getJson('POST', '/api/v1/resources?_key='.$apiKey, array(), array(), array(
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame(201, $json['response']['code']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $resp = $this->getJson('POST', $uploadUrl.'?_key='.$apiKey, array(), array('file' => $uploadedFile));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame(202, $resp['response']['code']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertTrue(isset($resp['resource']['content']['files']));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertTrue(1 === count($resp['resource']['content']['files']));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame('audio/mpeg', $file['mimeType']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame(filesize($testFilePath), $file['bytes']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertTrue(isset($file['attributes']));
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame(2, $file['attributes']['channels']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame(1, $file['attributes']['duration']);
src/Ayamel/MediaInfoBundle/Tests/MediaInfoApiIntegrationTest.php:        $this->assertSame(64000, $file['attributes']['bitrate']);
Binary file src/Ayamel/MediaInfoBundle/Tests/sample.jpg matches
Binary file src/Ayamel/MediaInfoBundle/Tests/subclip.mov matches
Binary file src/Ayamel/MediaInfoBundle/Tests/subclip.mp3 matches
src/Ayamel/ResourceBundle/AyamelResourceBundle.php:        $container->addCompilerPass(new RegisterProviderDelegatesPass());
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:        if (!$container->hasDefinition('ayamel.resource.provider')) {
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:        $definition = $container->getDefinition('ayamel.resource.provider');
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:        if ($definition->getClass() !== 'Ayamel\ResourceBundle\Provider\DelegatingProvider') {
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:        foreach ($container->findTaggedServiceIds('ayamel.resource.provider_delegate') as $id => $attributes) {
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:            $class = $container->getDefinition($id)->getClass();
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:            if (!$refClass->implementsInterface('Ayamel\ResourceBundle\Provider\ProviderInterface')) {
src/Ayamel/ResourceBundle/DependencyInjection/Compiler/RegisterProviderDelegatesPass.php:            $definition->addMethodCall('addProvider', array(new Reference($id)));
src/Ayamel/ResourceBundle/Document/Client.php: * API Client object, which can contain optional user-specific data.
src/Ayamel/ResourceBundle/Document/Client.php:     * are unique string representations, not database-assigned values.
src/Ayamel/ResourceBundle/Document/Client.php:     * A human-readable name of the API client.
src/Ayamel/ResourceBundle/Document/Client.php:        $this->id = $id;
src/Ayamel/ResourceBundle/Document/Client.php:        return $this->id;
src/Ayamel/ResourceBundle/Document/Client.php:        $this->name = $name;
src/Ayamel/ResourceBundle/Document/Client.php:        return $this->name;
src/Ayamel/ResourceBundle/Document/Client.php:        $this->uri = $uri;
src/Ayamel/ResourceBundle/Document/Client.php:        return $this->uri;
src/Ayamel/ResourceBundle/Document/ClientUser.php:        $this->id = $id;
src/Ayamel/ResourceBundle/Document/ClientUser.php:        return $this->id;
src/Ayamel/ResourceBundle/Document/ClientUser.php:        $this->url = (string) $url;
src/Ayamel/ResourceBundle/Document/ClientUser.php:        return $this->url;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        $this->files = new ArrayCollection();
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        $this->canonicalUri = $canonicalUri;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        return $this->canonicalUri;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        $this->oembed = $oembed;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        return $this->oembed;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        $this->oembed[$key] = $val;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        return isset($this->oembed[$key]) ? $this->oembed[$key] : $default;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        if (isset($this->oembed[$key])) {
src/Ayamel/ResourceBundle/Document/ContentCollection.php:            unset($this->oembed[$key]);
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        return isset($this->oembed[$key]);
src/Ayamel/ResourceBundle/Document/ContentCollection.php:            $this->files = new ArrayCollection();
src/Ayamel/ResourceBundle/Document/ContentCollection.php:                $this->addFile($file);
src/Ayamel/ResourceBundle/Document/ContentCollection.php:            $this->files = new ArrayCollection();
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        $this->files[] = $file;
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        foreach ($this->files as $instance) {
src/Ayamel/ResourceBundle/Document/ContentCollection.php:            if (!$instance->equals($file)) {
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        $this->setFiles($new);
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        foreach ($this->files as $file) {
src/Ayamel/ResourceBundle/Document/ContentCollection.php:            if ($ref->equals($file)) {
src/Ayamel/ResourceBundle/Document/ContentCollection.php:        return $this->files->toArray();
src/Ayamel/ResourceBundle/Document/FileReference.php:     * - **original** - If this is the original file.
src/Ayamel/ResourceBundle/Document/FileReference.php:     * - **transcoding** - If this file is a transcoding of the original in its entirety.
src/Ayamel/ResourceBundle/Document/FileReference.php:     * - **summary** - If this file is a partial transcoding of the original.
src/Ayamel/ResourceBundle/Document/FileReference.php:     * are valid for a given mimeTime, please read through the documentation on the [project wiki](https://github.com/AmericanCouncils/AyamelResourceApiServer/wiki/Validation:-File-Attributes).
src/Ayamel/ResourceBundle/Document/FileReference.php:        $ref->setInternalUri($internalUri);
src/Ayamel/ResourceBundle/Document/FileReference.php:        $ref->setDownloadUri($downloadUri);
src/Ayamel/ResourceBundle/Document/FileReference.php:        return ('original' === $this->representation);
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->representation;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->representation = $representation;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->quality;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->quality = $quality;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->attributes = $attributes;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->attributes;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->attributes = array_merge($this->attributes, $attrs);
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->attributes[$key] = $val;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return isset($this->attributes[$key]) ? $this->attributes[$key] : $default;
src/Ayamel/ResourceBundle/Document/FileReference.php:        if (isset($this->attributes[$key])) {
src/Ayamel/ResourceBundle/Document/FileReference.php:            unset($this->attributes[$key]);
src/Ayamel/ResourceBundle/Document/FileReference.php:        return isset($this->attributes[$key]);
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->bytes = $bytes;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->bytes;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->mime = $mime;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->mime;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->mimeType = $mimeType;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->mimeType;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->downloadUri = $downloadUri;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->downloadUri;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->streamUri = $streamUri;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->streamUri;
src/Ayamel/ResourceBundle/Document/FileReference.php:        $this->internalUri = $internalUri;
src/Ayamel/ResourceBundle/Document/FileReference.php:        return $this->internalUri;
src/Ayamel/ResourceBundle/Document/FileReference.php:        if (null === $this->quality) {
src/Ayamel/ResourceBundle/Document/FileReference.php:            $this->quality = 0;
src/Ayamel/ResourceBundle/Document/FileReference.php:        if (null === $this->mime) {
src/Ayamel/ResourceBundle/Document/FileReference.php:            $this->mime = $this->mimeType;
src/Ayamel/ResourceBundle/Document/FileReference.php:        if (($file->getInternalUri() && $this->getInternalUri()) && ($file->getInternalUri() == $this->getInternalUri())) {
src/Ayamel/ResourceBundle/Document/FileReference.php:        if (($file->getDownloadUri() && $this->getDownloadUri()) && ($file->getDownloadUri() == $this->getDownloadUri())) {
src/Ayamel/ResourceBundle/Document/Languages.php:     * Array of ISO 639-3 language codes.
src/Ayamel/ResourceBundle/Document/OEmbed.php:     * to load the HTML in an off-domain iframe to avoid XSS vulnerabilities.
src/Ayamel/ResourceBundle/Document/Origin.php:        $this->creator = $creator;
src/Ayamel/ResourceBundle/Document/Origin.php:        return $this->creator;
src/Ayamel/ResourceBundle/Document/Origin.php:        $this->location = $location;
src/Ayamel/ResourceBundle/Document/Origin.php:        return $this->location;
src/Ayamel/ResourceBundle/Document/Origin.php:        $this->date = $date;
src/Ayamel/ResourceBundle/Document/Origin.php:        return $this->date;
src/Ayamel/ResourceBundle/Document/Origin.php:        $this->format = $format;
src/Ayamel/ResourceBundle/Document/Origin.php:        return $this->format;
src/Ayamel/ResourceBundle/Document/Origin.php:        $this->note = $note;
src/Ayamel/ResourceBundle/Document/Origin.php:        return $this->note;
src/Ayamel/ResourceBundle/Document/Origin.php:        $this->uri = $uri;
src/Ayamel/ResourceBundle/Document/Origin.php:        return $this->uri;
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **based_on** - The subject is a performance, production, derivation, adaptation, or interpretation of the object resource.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **references** - The subject cites or otherwise refers to the object resource.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **requires** - The subject requires the object for its functioning, delivery, or content and cannot be used without the related resource being present.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **transcript_of** - The subject is a linear description of a time-based object (e.g., a text transcript of audio)
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **search** - Content for the object resource will affect hits against the subject resource when searching.  Only owners of the subject Resource may create `search` relations.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **version_of** - The subject is a historical state or edition of the object resource.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **part_of** - The subject is a physical or logical part of the object resource.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **translation_of** - The subject content is a translation into another human language of the object resource's content.
src/Ayamel/ResourceBundle/Document/Relation.php:     * - **contains** - The subject resource contains the object resource.  This only applies to Resource of type "collection".
src/Ayamel/ResourceBundle/Document/Relation.php:     * are valid for a given Relation type, check the documentation in the [project wiki](https://github.com/AmericanCouncils/AyamelResourceApiServer/wiki/Validation:-Relation-Attributes).
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->id;
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->subjectId;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->subjectId = $id;
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->objectId;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->objectId = $id;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->type = $type;
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->type;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->attributes = $attributes;
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->attributes;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->attributes[$key] = $val;
src/Ayamel/ResourceBundle/Document/Relation.php:        return isset($this->attributes[$key]) ? $this->attributes[$key] : $default;
src/Ayamel/ResourceBundle/Document/Relation.php:        if (isset($this->attributes[$key])) {
src/Ayamel/ResourceBundle/Document/Relation.php:            unset($this->attributes[$key]);
src/Ayamel/ResourceBundle/Document/Relation.php:        return isset($this->attributes[$key]);
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->client;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->client = $client;
src/Ayamel/ResourceBundle/Document/Relation.php:        return $this->clientUser;
src/Ayamel/ResourceBundle/Document/Relation.php:        $this->clientUser = $user;
src/Ayamel/ResourceBundle/Document/Relation.php:            ($this->subjectId === $relation->getSubjectId()) &&
src/Ayamel/ResourceBundle/Document/Relation.php:            ($this->objectId === $relation->getObjectId()) &&
src/Ayamel/ResourceBundle/Document/Relation.php:            ($this->type === $relation->getType()) &&
src/Ayamel/ResourceBundle/Document/Relation.php:            ($this->attributes == $relation->getAttributes())
src/Ayamel/ResourceBundle/Document/Resource.php:     * A comma-delimited string of keywords for search.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **video** - The primary content is video.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **audio** - The primary content is audio.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **image** - The primary content is a static image.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **document** - The primary content is a document meant for end-users.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **archive** - The primary content is a collection of content in some archival format.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **collection** - The primary content is a collection of other resources, which you can derive from the relations array.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **data** - The primary content is in a data format intended for primary use by a program.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **normal** - No problems, and nothing scheduled to be done with the object.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **awaiting_processing** - The Resource, or it's content, is in a queue to be processed and potentially modified.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **awaiting_content** - The resource has no content associated with it yet.  Note that if a Resource is "awaiting_content" for more than two weeks, it will be automatically deleted.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **processing** - The Resource, or its content, is currently being processed.  In this state, the Resource is locked and cannot be modified.
src/Ayamel/ResourceBundle/Document/Resource.php:     * - **deleted** - The Resource and its content has been removed.
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->id;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->title = $title;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->title;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->description = $description;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->description;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->keywords = $keywords;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->keywords;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->subjectDomains = $categories;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->subjectDomains;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->functionalDomains = $categories;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->functionalDomains;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->registers;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->registers = $registers;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->type = $type;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->type;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->sequence;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->sequence = (bool) $bool;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->visibility = $visibility;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->visibility;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->dateAdded = $dateAdded;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->dateAdded;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->dateModified = $dateModified;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->dateModified;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->dateDeleted = $dateDeleted;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->dateDeleted;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->copyright = $copyright;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->copyright;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->license = $license;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->license;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->status = $status;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->status;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->languages = $langs;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->languages;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->origin = $origin;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->origin;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->client = $client;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->client;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->clientUser;
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->clientUser = $user;
src/Ayamel/ResourceBundle/Document/Resource.php:            $this->relations = new ArrayCollection();
src/Ayamel/ResourceBundle/Document/Resource.php:                $this->addRelation($relation);
src/Ayamel/ResourceBundle/Document/Resource.php:            $this->relations = null;
src/Ayamel/ResourceBundle/Document/Resource.php:        return !empty($this->relations) ? $this->relations : array();
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->relations[] = $relation;
src/Ayamel/ResourceBundle/Document/Resource.php:        foreach ($this->relations as $instance) {
src/Ayamel/ResourceBundle/Document/Resource.php:            if (!$instance->equals($relation)) {
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->setRelations($new);
src/Ayamel/ResourceBundle/Document/Resource.php:        $this->content = $content;
src/Ayamel/ResourceBundle/Document/Resource.php:        return $this->content;
src/Ayamel/ResourceBundle/Document/Resource.php:        return (self::STATUS_PROCESSING === $this->status);
src/Ayamel/ResourceBundle/Document/Resource.php:        return (self::STATUS_DELETED === $this->status);
src/Ayamel/ResourceBundle/Document/Resource.php:        if (!$this->isDeleted()) {
src/Ayamel/ResourceBundle/Document/Resource.php:            if (!$this->getId()) {
src/Ayamel/ResourceBundle/Document/Resource.php:                $this->setDateAdded($date);
src/Ayamel/ResourceBundle/Document/Resource.php:            $this->setDateModified($date);
src/Ayamel/ResourceBundle/Document/Resource.php:        if ($this->getVisibility() && $this->getClient()) {
src/Ayamel/ResourceBundle/Document/Resource.php:            if (!in_array($this->getClient()->getId(), $this->visibility)) {
src/Ayamel/ResourceBundle/Document/Resource.php:                $this->visibility[] = $this->getClient()->getId();
src/Ayamel/ResourceBundle/Provider/AbstractFilePathProvider.php:            $this->resourceTypes = $resourceTypes;
src/Ayamel/ResourceBundle/Provider/AbstractFilePathProvider.php:        $this->nullExtensionType = $nullType;
src/Ayamel/ResourceBundle/Provider/AbstractFilePathProvider.php:        foreach ($this->resourceTypes as $type => $extensions) {
src/Ayamel/ResourceBundle/Provider/AbstractFilePathProvider.php:        return $this->nullExtensionType;
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        $scheme = $this->checkScheme($scheme);
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        foreach ($this->providers as $provider) {
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:            if ($provider->handlesScheme($scheme)) {
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        $scheme = $this->checkScheme($scheme);
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        foreach ($this->providers as $provider) {
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:            if ($provider->handlesScheme($scheme)) {
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:                if ($resource = $provider->createResourceFromUri($uri)) {
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        $this->providers[$provider->getKey()] = $provider;
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:     * @param  string $key - key of provider to remove
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        if (isset($this->providers[$key])) {
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:            unset($$this->providers[$key]);
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:     * @param  string             $key - key of provider to get
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        return isset($this->providers[$key]) ? $this->providers[$key] : false;
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        return isset($this->providers[$key]);
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        $this->providers = array();
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:            $this->addProvider($provider);
src/Ayamel/ResourceBundle/Provider/DelegatingProvider.php:        return $this->providers;
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $mime = (null === $mime) ? 'application/octet-stream' : $mime;
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $ref->setMime($mime);
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $ref->setMimeType($exp[0]);
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $ref->setBytes($bytes);
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $r->setType($this->guessTypeFromExtension($this->getPathExtension($uri)));
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $r->setTitle($this->getFilenameFromPath($uri));
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $r->setContent(new ContentCollection);
src/Ayamel/ResourceBundle/Provider/HttpProvider.php:        $r->content->addFile($ref);
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $file->setRepresentation('original');
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $file->setQuality(0);
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $mime = $finfo->file($path);
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $file->setMime($mime);
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $file->setMimeType($exp[0]);
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $file->setBytes(filesize($path));
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $r->setType($this->guessTypeFromExtension($this->getPathExtension($path)));
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $r->setTitle($this->getFilenameFromPath($path));
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $r->setContent(new ContentCollection);
src/Ayamel/ResourceBundle/Provider/LocalFilepathProvider.php:        $r->content->addFile($file);
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        return $this->getQBForResourceRelations($resourceId, $filters)->getQuery()->execute();
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        return $this->getQBForResourceRelations($resourceId, $filters)->remove()->getQuery()->execute();
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        $qb = $this->createQueryBuilder('Relation');
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:                $qb->field($field)->in($val);
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:                $qb->field($field)->equals($val);
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        $qb = $this->createQueryBuilder('Relation');
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        //Relations are always bi-directional, so get where the $resourceId is EITHER
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        $qb->addOr($qb->expr()->field('subjectId')->equals($resourceId));
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:        $qb->addOr($qb->expr()->field('objectId')->equals($resourceId));
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:                $qb->field($field)->in($val);
src/Ayamel/ResourceBundle/Repository/RelationRepository.php:                $qb->field($field)->equals($val);
src/Ayamel/ResourceBundle/Repository/ResourceRepository.php:        $qb = $this->createQueryBuilder('Resource');
src/Ayamel/ResourceBundle/Repository/ResourceRepository.php:                $qb->field($field)->in($val);
src/Ayamel/ResourceBundle/Repository/ResourceRepository.php:                $qb->field($field)->equals($val);
src/Ayamel/ResourceBundle/Repository/ResourceRepository.php:                $resource->$method(null);
src/Ayamel/ResourceBundle/Repository/ResourceRepository.php:        $resource->setDateDeleted(new \DateTime());
src/Ayamel/ResourceBundle/Repository/ResourceRepository.php:        $resource->setStatus(Resource::STATUS_DELETED);
src/Ayamel/ResourceBundle/Resources/config/config.yml:    - { resource: '@AyamelResourceBundle/Resources/config/validation_map.yml' }
src/Ayamel/ResourceBundle/Resources/config/config.yml:            - { name: validator.constraint_validator, alias: resource_sequence_validator }
src/Ayamel/ResourceBundle/Resources/config/config.yml:            - { name: validator.constraint_validator, alias: relation_attributes_validator }
src/Ayamel/ResourceBundle/Resources/config/config.yml:          - { name: validator.constraint_validator, alias: file_attributes_validator }
src/Ayamel/ResourceBundle/Resources/config/config.yml:            - { name: ayamel.resource.provider_delegate }
src/Ayamel/ResourceBundle/Resources/config/config.yml:            - { name: ayamel.resource.provider_delegate }
src/Ayamel/ResourceBundle/Resources/config/validation.yml:# This is the validation mapping for all Resource documents - only values that can be set by API clients are validated
src/Ayamel/ResourceBundle/Resources/config/validation.yml:        - Ayamel\ResourceBundle\Validation\ResourceSequenceConstraint: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - All:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:#                - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - All:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:#                - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - All:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - All:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:    #note that we aren't closely validating either - the lists of valid values are extremely large
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - All:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - All:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:        - Ayamel\ResourceBundle\Validation\FileUriConstraint: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:        - Ayamel\ResourceBundle\Validation\FileAttributesConstraint: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Url: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:        - Ayamel\ResourceBundle\Validation\RelationAttributesConstraint: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Valid: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - NotBlank: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Collection:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Ayamel\ResourceBundle\Validation\AspectRatioConstraint: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Collection:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:                        - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Ayamel\ResourceBundle\Validation\AspectRatioConstraint: ~
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Range:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Length:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Type:
src/Ayamel/ResourceBundle/Resources/config/validation.yml:            - Choice:
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/mp4
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/x-ms-wmv
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/avi
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/msvideo
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/x-msvideo
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/avs-video
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/mpeg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/x-motion-jpeg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/x-mpeg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/quicktime
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/webm
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/ogg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/x-matroska
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - video/x-flv
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/mp3
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/aac
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/x-aac
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/basic
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/L24
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/mp4
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/mpeg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/ogg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/vorbis
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/vnd.rn-realaudio
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/vnd.wave
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - audio/webm
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/gif
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/jpeg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/pjpeg
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/svg+xml
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/png
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/tiff
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - image/x-xcf
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - text/plain
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - text/vcard
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/pdf
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-latex
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/msword
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.oasis.opendocument.text
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.oasis.opendocument.spreadsheet
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.oasis.opendocument.presentation
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.oasis.opendocument.graphics
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.ms-excel
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.ms-powerpoint
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.openxmlformats-officedocument.presentationml.presentation
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/vnd.openxmlformats-officedocument.wordprocessingml.document
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-iwork-keynote-sffkey
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-iwork-pages-sffpages
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-iwork-numbers-sffnumbers
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/xml
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/json
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - text/csv
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-yaml
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - text/yaml
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/zip
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/gzip
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-rar-compressed
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - application/x-tar
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - text/vtt
src/Ayamel/ResourceBundle/Resources/config/validation_map.yml:            - text/srt
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $this->assertTrue($obj instanceof AbstractAttributes);
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $this->assertTrue($obj instanceof FooAttributes);
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $this->assertSame('bar', $obj->foo);
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $extras = $obj->getExtraFields();
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $this->assertTrue(empty($extras));
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $extras = $obj->getExtraFields();
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $this->assertSame(1, count($extras));
src/Ayamel/ResourceBundle/Tests/AbstractAttributesTest.php:        $this->assertSame('baz', $extras[0]);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.mp3");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('fake/mime-type');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.mp4");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('video/mp4');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.mp3");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('fake/mime-type');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame('mimeType', $errors[0]->getPropertyPath());
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.mp4");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('video/mp4');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttribute('frameSize', array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.mp3");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('audio/mp3');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.png");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('image/png');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.png");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('image/png');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame('px', $ref->getAttribute('units'));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.zip");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('application/zip');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array());
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.xml");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('application/xml');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array());
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.pdf");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('application/pdf');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.vtt");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('text/vtt');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setDownloadUri("http://example.org/foo.vtt");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('text/vtt');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setStreamUri("http://example.org/foo.vtt");
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('text/vtt');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setBytes(100);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setRepresentation('original');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setQuality(0);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $ref->setMimeType('text/vtt');
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $errors = $v->validate($ref);
src/Ayamel/ResourceBundle/Tests/FileReferenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $r = $provider->createResourceFromUri('http://www.google.com/');
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $this->assertTrue($r instanceof Resource);
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $files = $r->content->getFiles();
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $this->assertSame(1, count($files));
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $this->assertTrue($files[0] instanceof FileReference);
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $r = $provider->createResourceFromUri("http://www.example.com/does/not/exist.zip");
src/Ayamel/ResourceBundle/Tests/HttpProviderTest.php:        $this->assertFalse($r);
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $r = $provider->createResourceFromUri(__DIR__."/example.txt");
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $this->assertTrue($r instanceof Resource);
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $files = $r->content->getFiles();
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $this->assertSame(1, count($files));
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $this->assertTrue($files[0] instanceof FileReference);
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $r = $provider->createResourceFromUri(__DIR__."/foo.txt");
src/Ayamel/ResourceBundle/Tests/LocalFilepathProviderTest.php:        $this->assertFalse($r);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('requires');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('requires');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('part_of');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('part_of');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('version_of');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('transcript_of');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setObjectId('324');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setSubjectId('325');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setType('contains');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $rel->setAttributes(array(
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $errors = $v->validate($rel);
src/Ayamel/ResourceBundle/Tests/RelationValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $v = $this->getContainer()->get('validator');
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $r->setTitle('foo');
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $r->setType('video');
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $r->setSequence(true);
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $errors = $v->validate($r);
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $this->assertSame(0, count($errors));
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $r->setTitle('foo');
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $r->setType('data');
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $r->setSequence(true);
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $errors = $v->validate($r);
src/Ayamel/ResourceBundle/Tests/ResourceSequenceValidationTest.php:        $this->assertSame(1, count($errors));
src/Ayamel/ResourceBundle/Validation/AbstractAttributes.php:                $obj->$key = $val;
src/Ayamel/ResourceBundle/Validation/AbstractAttributes.php:        $obj->setExtraFields($extras);
src/Ayamel/ResourceBundle/Validation/AbstractAttributes.php:        $this->extraFields = $extras;
src/Ayamel/ResourceBundle/Validation/AbstractAttributes.php:        return $this->extraFields;
src/Ayamel/ResourceBundle/Validation/AspectRatioValidator.php:            $this->context->addViolation($constraint->message);
src/Ayamel/ResourceBundle/Validation/AspectRatioValidator.php:            $this->context->addViolation($constraint->message);
src/Ayamel/ResourceBundle/Validation/File/AbstractFileAttributes.php: * Used internally in the FileAttributesValidator to allow attribute validators to pre-process the entire file reference.
src/Ayamel/ResourceBundle/Validation/File/GenericImageAttributes.php:        $attrs = $ref->getAttributes();
src/Ayamel/ResourceBundle/Validation/File/GenericImageAttributes.php:                $ref->setAttribute('units', 'px');
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        $this->validator = $validator;
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        $this->map = $map;
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        $fileAttributes = $object->getAttributes();
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        $mime = $object->getMimeType();
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        $attrs = $this->getAttributesClasses($mime, $object->getAttributes());
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:            $this->context->addViolationAt('mimeType', sprintf("Files with mimeType [%s] cannot be validated.", $mime));
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        //allow pre-processing of the file reference
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:            $attr->validateFileReference($object, $this->context);
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:            $failures = $this->validator->validate($attr);
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:                $this->context->addViolationAt('attributes', $error);
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:            foreach ($attr->getExtraFields() as $field) {
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:                $this->context->addViolationAt('attributes', $field." is not a valid attribute for this type of file.");
src/Ayamel/ResourceBundle/Validation/FileAttributesValidator.php:        foreach ($this->map as $class => $mimes) {
src/Ayamel/ResourceBundle/Validation/FileUriValidator.php:        if (!$object->getDownloadUri() && !$object->getStreamUri()) {
src/Ayamel/ResourceBundle/Validation/FileUriValidator.php:            $this->context->addViolationAt('downloadUri', $constraint->message);
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $this->validator = $validator;
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $this->map = $map;
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $type = $object->getType($object);
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $attrs = $object->getAttributes();
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        if (!isset($this->map[$type]) || is_null($this->map[$type])) {
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:            $this->context->addViolationAt('attributes', sprintf("Relation of type [%s] cannot contain attributes.", $type));
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $class = $this->map[$type];
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $attrs = $class::createFromArray($object->getAttributes());
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $errors = $this->validator->validate($attrs);
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:        $extras = $attrs->getExtraFields();
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:                $this->context->addViolationAt('attributes', $error->getMessage());
src/Ayamel/ResourceBundle/Validation/RelationAttributesValidator.php:                $this->context->addViolationAt('attributes', sprintf("[%s] is an invalid attribute for Relations of type [%s]", $field, $type));
src/Ayamel/ResourceBundle/Validation/ResourceSequenceValidator.php:        $this->types = $types;
src/Ayamel/ResourceBundle/Validation/ResourceSequenceValidator.php:        if ($value->getSequence() && !in_array($value->getType(), $this->types)) {
src/Ayamel/ResourceBundle/Validation/ResourceSequenceValidator.php:            $this->context->addViolationAt('sequence', $constraint->message);
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:        $container = $this->getContainer();
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:            $container->get('old_sound_rabbit_mq.search_index_producer')->getChannel()->queue_purge('search_index');
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:        $consolePath = $container->getParameter('kernel.root_dir').DIRECTORY_SEPARATOR."console";
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:        $rabbitProcess = new Process(sprintf('%s --env=test rabbitmq:consumer search_index --messages='.$numMessages.' --vvv', $consolePath));
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:        $rabbitProcess->start();
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:        if (!$rabbitProcess->isRunning()) {
src/Ayamel/SearchBundle/AsynchronousSearchTest.php:            throw new \RuntimeException(($rabbitProcess->isSuccessful()) ? $rabbitProcess->getOutput() : $rabbitProcess->getErrorOutput());
src/Ayamel/SearchBundle/Exception/BulkIndexException.php:        $this->messages = $messages;
src/Ayamel/SearchBundle/Exception/BulkIndexException.php:        return $this->messages;
src/Ayamel/SearchBundle/Provider/ResourceProvider.php:        $this->indexer = $indexer;
src/Ayamel/SearchBundle/Provider/ResourceProvider.php:        $this->type = $resourceType;
src/Ayamel/SearchBundle/Provider/ResourceProvider.php:        $this->batch = 100;
src/Ayamel/SearchBundle/Provider/ResourceProvider.php:        $this->indexer->indexResources($ids, $this->batch);
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:        $this->container = $container;
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:        $body = unserialize($msg->body);
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:        $batch = $this->container->getParameter('ayamel.search.elastica_resource_provider.batch');
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:                $this->container->get('ayamel.search.resource_indexer')->indexResource($body['id']);
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:                $this->container->get('ayamel.search.resource_indexer')->indexResources($body['ids'], $batch);
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:            $logger = $this->container->get('logger');
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:                foreach ($e->getMessages() as $id => $message) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:                    $logger->warning(sprintf('Indexing failed [%s]: %s', $id, $message));
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexConsumer.php:            $logger->warning(sprintf('Indexing failed [%s]: %s', $body['id'], $e->getMessage()));
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $this->container = $container;
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        if ('awaiting_content' === $e->getResource()->getStatus()) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $this->messages[] = array(
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            'id' => $e->getResource()->getId()
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $this->registerTerminateListener();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $resource = $e->getResource();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $ids[] = $resource->getId();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        if ($resource->getRelations()) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            foreach ($resource->getRelations() as $relation) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:                if ('search' === $relation->getType() && $resource->getId() === $relation->getObjectId()) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:                    $ids[] = $relation->getSubjectId();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            $this->messages[] = array(
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            $this->registerTerminateListener();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $relation = $e->getRelation();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $subject = $e->getSubjectResource();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        if ($relation->getClient()->getId() !== $subject->getClient()->getId()) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $this->messages[] = array(
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            'id' => $subject->getId()
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $this->registerTerminateListener();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        if (empty($this->messages)) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $producer = $this->container->get('old_sound_rabbit_mq.search_index_producer');
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        foreach ($this->messages as $message) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            $producer->publish(serialize($message));
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        $this->messages = array();
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:        if (!$this->registered) {
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            $this->registered = true;
src/Ayamel/SearchBundle/RabbitMQ/SearchIndexSubscriber.php:            $this->container->get('event_dispatcher')->addListener(WebServiceSubscriber::API_TERMINATE, array($this, 'onApiTerminate'));
src/Ayamel/SearchBundle/ResourceIndexer.php: * NOTE: This implementation currently contains a bit of a hack using the serializer - once the serializer
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->manager = $manager;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->type = $resourceType;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->serializer = $serializer;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->indexableMimeTypes = $indexableMimeTypes;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->indexableResourceTypes = $indexableResourceTypes;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->logger = $logger;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->languageFieldMap = $languageFieldMap;
src/Ayamel/SearchBundle/ResourceIndexer.php:        $doc = $this->createResourceSearchDocumentForId($id);
src/Ayamel/SearchBundle/ResourceIndexer.php:            $this->type->addDocument($doc);
src/Ayamel/SearchBundle/ResourceIndexer.php:            $this->type->getIndex()->refresh();
src/Ayamel/SearchBundle/ResourceIndexer.php:                $doc = $this->createResourceSearchDocumentForId($id);
src/Ayamel/SearchBundle/ResourceIndexer.php:                    $this->type->addDocument($doc);
src/Ayamel/SearchBundle/ResourceIndexer.php:                $failed[$id] = $e->getMessage();
src/Ayamel/SearchBundle/ResourceIndexer.php:                $this->type->getIndex()->refresh();
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->type->getIndex()->refresh();
src/Ayamel/SearchBundle/ResourceIndexer.php:        $this->indexResources($ids, $batch);
src/Ayamel/SearchBundle/ResourceIndexer.php:        $resource = $this->manager->getRepository('AyamelResourceBundle:Resource')->find($id);
src/Ayamel/SearchBundle/ResourceIndexer.php:            if ($this->logger) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                $this->logger->warning(sprintf("Tried indexing a non-exiting resource [%s]", $id));
src/Ayamel/SearchBundle/ResourceIndexer.php:        if ($resource->isDeleted()) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            $this->type->deleteById($id);
src/Ayamel/SearchBundle/ResourceIndexer.php:        if (!in_array($resource->getType(), $this->indexableResourceTypes)) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            throw new IndexException(sprintf("Resources of type [%s] are not indexable.", $resource->getType()));
src/Ayamel/SearchBundle/ResourceIndexer.php:        if ('awaiting_content' === $resource->getStatus()) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            throw new IndexException(sprintf("Resource [%s] cannot be indexed until it has content.", $resource->getId()));
src/Ayamel/SearchBundle/ResourceIndexer.php:        $relations = $this->manager->getRepository('AyamelResourceBundle:Relation')->getQBForRelations(array(
src/Ayamel/SearchBundle/ResourceIndexer.php:            'client.id' => $resource->getClient()->getId()
src/Ayamel/SearchBundle/ResourceIndexer.php:        ))->getQuery()->execute();
src/Ayamel/SearchBundle/ResourceIndexer.php:            $resource->setRelations(iterator_to_array($relations));
src/Ayamel/SearchBundle/ResourceIndexer.php:        return $this->createResourceSearchDocument($resource);
src/Ayamel/SearchBundle/ResourceIndexer.php:        $data = json_decode($this->serializer->serialize($resource, 'json'), true);
src/Ayamel/SearchBundle/ResourceIndexer.php:        foreach ($resource->getRelations() as $relation) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            if ('search' === $relation->getType() && $resource->getId() === $relation->getSubjectId()) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                $relatedResourceIds[] = $relation->getObjectId();
src/Ayamel/SearchBundle/ResourceIndexer.php:            $relatedResources = $this->manager->getRepository('AyamelResourceBundle:Resource')
src/Ayamel/SearchBundle/ResourceIndexer.php:                ->getQBForResources(array('id' => $relatedResourceIds))
src/Ayamel/SearchBundle/ResourceIndexer.php:                ->getQuery()
src/Ayamel/SearchBundle/ResourceIndexer.php:                ->execute();
src/Ayamel/SearchBundle/ResourceIndexer.php:        $contentFields = $this->generateContentFields($resource, $relatedResources);
src/Ayamel/SearchBundle/ResourceIndexer.php:        return new Document($resource->getId(), $data);
src/Ayamel/SearchBundle/ResourceIndexer.php:     * Note: Currently this is very inefficient, it's triggering requests one-by-one and can be refactored to make requests
src/Ayamel/SearchBundle/ResourceIndexer.php:        if ($resource->content) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            foreach ($resource->content->getFiles() as $fileReference) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                if (in_array($fileReference->getMimeType(), $this->indexableMimeTypes)) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                    if ($content = $this->retrieveContent($fileReference)) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            $lang = $this->parseLanguage($related->languages);
src/Ayamel/SearchBundle/ResourceIndexer.php:            if ($related->content) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                foreach ($related->content->getFiles() as $fileReference) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                    if (in_array($fileReference->getMimeType(), $this->indexableMimeTypes)) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                        if ($content = $this->retrieveContent($fileReference)) {
src/Ayamel/SearchBundle/ResourceIndexer.php:        $uri = ($ref->getInternalUri()) ? $ref->getInternalUri() : $ref->getDownloadUri();
src/Ayamel/SearchBundle/ResourceIndexer.php:                if ($this->logger) {
src/Ayamel/SearchBundle/ResourceIndexer.php:                    $this->logger->warning(sprintf("Failed getting search index content at [%s]", $uri));
src/Ayamel/SearchBundle/ResourceIndexer.php:        if ($langs->iso639_3) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            $tag = $langs->iso639_3[0];
src/Ayamel/SearchBundle/ResourceIndexer.php:            if (isset($this->languageFieldMap[$tag])) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            return $this->searchLanguageMapForTag($tag);
src/Ayamel/SearchBundle/ResourceIndexer.php:        } elseif ($langs->bcp47) {
src/Ayamel/SearchBundle/ResourceIndexer.php:            $exp = explode('-', $langs->bcp47[0]);
src/Ayamel/SearchBundle/ResourceIndexer.php:            return $this->searchLanguageMapForTag($tag);
src/Ayamel/SearchBundle/ResourceIndexer.php:        foreach ($this->languageFieldMap as $key => $vals) {
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_arabic_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_bulgarian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_catalan_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_czech_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_danish_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_german_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_greek_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_english_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_spanish_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_basque_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_persian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_finnish_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_french_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_hindi_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_hungarian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_armenian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_indonesian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_italian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_dutch_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_norwegian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_portuguese_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_romanian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_russian_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_swedish_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "_turkish_"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "ar_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "bg_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "ca_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "cs_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "da_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "de_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "de_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "el_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "en_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "en_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "es_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "es_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "eu_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "fa_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "fi_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "fi_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "fr_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "fr_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "he_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "hi_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "hu_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "hu_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "hy_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "id_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "it_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "it_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "nl_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "no_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "pt_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "pt_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "ro_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "ru_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "ru_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "sv_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "sv_stem_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "tr_stop_filter"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "smartcn_word"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_folding"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "icu_normalizer"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "html_strip"
src/Ayamel/SearchBundle/Resources/config/config.lang_examples.yml:          - "lowercase"
src/Ayamel/SearchBundle/Resources/config/config.yml:    - { resource: "@AyamelSearchBundle/Resources/config/config.ayamel_index.yml" }
src/Ayamel/SearchBundle/Resources/config/config.yml:            - { name: ayamel.api.event_subscriber }
src/Ayamel/SearchBundle/Resources/config/config.yml:            - @doctrine.odm.mongodb.document_manager
src/Ayamel/SearchBundle/Resources/config/config.yml:            - @fos_elastica.index.ayamel.resource
src/Ayamel/SearchBundle/Resources/config/config.yml:            - @serializer
src/Ayamel/SearchBundle/Resources/config/config.yml:            - %ayamel.search.indexable_mime_types%
src/Ayamel/SearchBundle/Resources/config/config.yml:            - %ayamel.search.indexable_resource_types%
src/Ayamel/SearchBundle/Resources/config/config.yml:            - @logger
src/Ayamel/SearchBundle/Resources/config/config.yml:            - %ayamel.search.language_field_map%
src/Ayamel/SearchBundle/Resources/config/config.yml:            - @ayamel.search.resource_indexer
src/Ayamel/SearchBundle/Resources/config/config.yml:            - %ayamel.search.elastica_resource_provider.batch%
src/Ayamel/SearchBundle/Resources/config/config.yml:            - { name: fos_elastica.provider, index: ayamel, type: resource }
src/Ayamel/SearchBundle/Resources/config/routing.yml:#pass-through POST api for elasticsearch
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->markTestIncomplete();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc = $this->startRabbitListener(1);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$resourceId)->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(404, $exception->getResponse()->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc->wait(function($type, $buffer) use ($tester, $proc, $resourceId, $client) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            while ($proc->isRunning()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            if (!$proc->isSuccessful()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                throw new \RuntimeException($proc->getErrorOutput());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$resourceId)->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $data = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame('Hamlet pwnz!', $data['_source']['title']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertFalse(isset($data['_source']['relations']));
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc = $this->startRabbitListener(1);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $content = $this->getJson('PUT', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc->wait(function($type, $buffer) use ($id, $tester, $proc) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            while ($proc->isRunning()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            if (!$proc->isSuccessful()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                throw new \RuntimeException($proc->getErrorOutput());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$id)->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $data = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame('hamlet !pwnz', $data['_source']['title']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc = $this->startRabbitListener(2);  //this test should trigger 2 resources to index
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $content = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(201, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc->wait(function($type, $buffer) use ($id, $tester, $proc, $objectId) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            while ($proc->isRunning()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            if (!$proc->isSuccessful()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                throw new \RuntimeException($proc->getErrorOutput());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$objectId)->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $data = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame('Hamlet strikes back!', $data['_source']['title']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertFalse(isset($data['_source']['relations']));
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$id)->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $data = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertTrue(isset($data['_source']['relations']));
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc = $this->startRabbitListener(1);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $content = $this->getJson('DELETE', '/api/v1/resources/'.$relation['objectId'].'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc->wait(function($type, $buffer) use ($relation, $tester, $proc) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            while ($proc->isRunning()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            if (!$proc->isSuccessful()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                throw new \RuntimeException($proc->getErrorOutput());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                $response = $client->get('/ayamel/resource/'.$relation['objectId'])->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $this->assertSame(404, $exception->getResponse()->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$relation['subjectId'])->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $data = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertFalse(isset($data['_source']['relations']));
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc = $this->startRabbitListener(1);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $content = $this->getJson('DELETE', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:        $proc->wait(function($type, $buffer) use ($id, $tester, $proc) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            while ($proc->isRunning()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            if (!$proc->isSuccessful()) {
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                throw new \RuntimeException($proc->getErrorOutput());
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:                $response = $client->get('/ayamel/resource/'.$id)->send();
src/Ayamel/SearchBundle/Tests/AsynchronousSearchIndexerTest.php:            $tester->assertSame(404, $exception->getResponse()->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexTest.php:        $this->runCommand('fos:elastica:reset');
src/Ayamel/SearchBundle/Tests/ResourceIndexTest.php:        $response = $client->get('/ayamel/resource/_mapping')->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer = $this->getContainer()->get('ayamel.search.resource_indexer');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertTrue($indexer instanceof ResourceIndexer);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->setExpectedException('Ayamel\SearchBundle\Exception\IndexException');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->getContainer()->get('ayamel.search.resource_indexer')->indexResource('123456');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->setExpectedException('Ayamel\SearchBundle\Exception\IndexException');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->getContainer()->get('ayamel.search.resource_indexer')->indexResource($resourceId);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->setExpectedException('Ayamel\SearchBundle\Exception\IndexException');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->getContainer()->get('ayamel.search.resource_indexer')->indexResource($resourceId);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $container = $this->getContainer();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer = $container->get('ayamel.search.resource_indexer');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(200, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$resourceId)->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(404, $exception->getResponse()->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer->indexResource($resourceId);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $client->get('/ayamel/resource/'.$resourceId)->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('DELETE', '/api/v1/resources/'.$id.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(200, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->getContainer()->get('ayamel.search.resource_indexer')->indexResource($id);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:            $response = $client->get('/ayamel/resource/'.$id)->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(404, $exception->getResponse()->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $container = $this->getContainer();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer = $container->get('ayamel.search.resource_indexer');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer->indexResource($resourceId);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $client->get('/ayamel/resource/'.$resourceId)->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $body = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertTrue(isset($body['_source']['content_canonical']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(1, count($body['_source']['content_canonical']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(0, strpos($body['_source']['content_canonical'][0], "To be, or not to be"));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $container = $this->getContainer();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer = $container->get('ayamel.search.resource_indexer');
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $this->getJson('POST', '/api/v1/relations?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer->indexResource($id);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $client->get('/ayamel/resource/'.$id)->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $body = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertTrue(isset($body['_source']['content_canonical']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(1, count($body['_source']['content_canonical']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(0, strpos($body['_source']['content_canonical'][0], "To be, or not to be"));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertTrue(isset($body['_source']['content_rus']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(1, count($body['_source']['content_rus']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(0, strpos($body['_source']['content_rus'][0], "Быть иль не быть"));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $indexer->indexResource($objectId);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $response = $client->get('/ayamel/resource/'.$objectId)->send();
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(200, $response->getStatusCode());
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $body = json_decode($response->getBody(), true);
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertTrue(isset($body['_source']['content_canonical']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(1, count($body['_source']['content_canonical']));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->assertSame(0, strpos($body['_source']['content_canonical'][0], "Быть иль не быть"));
src/Ayamel/SearchBundle/Tests/ResourceIndexerTest.php:        $this->markTestSkipped();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->runCommand("fos:elastica:populate");
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->assertTrue(!empty($this->fixtureData));
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $id = $this->fixtureData['AyamelResourceBundle:Resource'][0]->getId();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $content = $this->callJsonApi('GET', "/api/v1/resources/$id?_key=45678isafgd56789asfgdhf4567");
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->assertArrayHasKey('resource', $content); 
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        return $this->assertTrue(false);
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->markTestIncomplete();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $response = $client->get('/ayamel/resource/')->send();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        var_dump($response->getBody());
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $proc = $this->startRabbitListener(3);
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $proc->setTimeout(5);
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $proc->wait(function($type, $buffer) use ($tester, $proc) {
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            while ($proc->isRunning()) {
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            if (!$proc->isSuccessful()) {
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:                throw new \RuntimeException($proc->getErrorOutput());
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            $response = $tester->getJson('GET', '/api/v1/resources/search?q=House');
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            $tester->assertSame(200, $code);
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            $tester->assertFalse(empty($response['results']['_results']));
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->markTestSkipped();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->markTestSkipped();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        $this->markTestSkipped();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            //     $response = $client->get('/ayamel/resource/'.$relation['objectId'])->send();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:            // $this->assertSame(404, $exception->getResponse()->getStatusCode());
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        // $this->clearDatabase();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        // $container = $this->getContainer();
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        //     $container->get('old_sound_rabbit_mq.search_index_producer')->getChannel()->queue_purge('search_index');
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        //     $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/SearchApiTest.php:        //     $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:To be, or not to be,--that is the question:--
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:And by opposing end them?--To die,--to sleep,--
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:That flesh is heir to,--'tis a consummation
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:Devoutly to be wish'd. To die,--to sleep;--
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:To sleep! perchance to dream:--ay, there's the rub;
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:But that the dread of something after death,--
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:No traveller returns,--puzzles the will,
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:And lose the name of action.--Soft you now!
src/Ayamel/SearchBundle/Tests/files/hamlet.en.txt:The fair Ophelia!--Nymph, in thy orisons
src/Ayamel/SearchBundle/Tests/files/hamlet.ru.txt:Быть иль не быть - таков вопрос; что лучше,
src/Ayamel/SearchBundle/Tests/files/hamlet.ru.txt:И их окончить. Умереть - уснуть -
src/Ayamel/SearchBundle/Tests/files/hamlet.ru.txt:Наследье праха - вот конец, достойный
src/Ayamel/SearchBundle/Tests/files/hamlet.ru.txt:Желаний жарких. Умереть - уснуть.
src/Ayamel/SearchBundle/Tests/files/hamlet.ru.txt:Когда кинжала лишь один удар -
src/Ayamel/SearchBundle/Tests/files/hamlet.ru.txt:Сюда возврата, -  не тревожил воли,
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:        $this->thumbnailer_path = $thumbnailer_path;
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:        if (!file_exists($this->thumbnailer_path)) {
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:            throw new \RuntimeException(sprintf("Could not find ffmpegthumbnailer executable, given path {%s}", $this->thumbnailer_path));
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:        $options = array($this->thumbnailer_path, '-i', $inFile->getPathname());
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:        foreach ($preset->getOptions() as $key => $value) {
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:        $options[] = "-o";
src/Ayamel/TranscodingBundle/Adapter/FFmpegThumbnailerAdapter.php:        $builder = $this->getProcessBuilder($options);
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:        $this->setName('api:resource:transcode')
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            ->setDescription("Transcode files for a given Resource ID.")
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            ->addArgument('id', InputArgument::REQUIRED, "ID of Resource to transcode.")
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            ->addOption('force','-f', InputOption::VALUE_NONE, "If forced, the transcode will happen immediately, rather than asynchronously.");
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:        $id = $input->getArgument('id');
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:        if ($input->getOption('force')) {
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $transcoder = $this->getContainer()->get('transcoder');
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $outputSubscriber->setOutput($output);
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $outputSubscriber->setHelperSet($this->getHelperSet());
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $transcoder->getDispatcher()->addSubscriber($outputSubscriber);
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            if ($input->getOption('verbose')) {
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:                foreach ($transcoder->getAdapters() as $adapter) {
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:                        $adapter->setStreamBuffer(true);
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $resource = $this->getContainer()->get('ayamel.transcoding.manager')->transcodeResource($id);
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $this->getContainer()->get('old_sound_rabbit_mq.transcoding_producer')->publish(serialize(array(
src/Ayamel/TranscodingBundle/Command/TranscodeResourceCommand.php:            $output->writeln(sprintf("Transcode job for Resource %s scheduled.", $id));
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:        $loader->load('config.presets.yml');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:        $loader->load('config.preset_map.yml');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:        if ('test' === $container->getParameter('kernel.environment')) {
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $def->addTag('transcoding.adapter');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $container->setDefinition('ayamel.test.transcoding_adapter', $def);
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $def->addTag('transcoding.preset');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $def->setScope('prototype');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $container->setDefinition('ayamel.test.transcoding_preset', $def);
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $presets = $container->getParameter('ayamel.transcoding.presets');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $container->setParameter('ayamel.transcoding.presets', $presets);
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $map = $container->getParameter('ayamel.transcoding.preset_map');
src/Ayamel/TranscodingBundle/DependencyInjection/AyamelTranscodingExtension.php:            $container->setParameter('ayamel.transcoding.preset_map', $map);
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:        $this->setOptions(array(
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-codec:a' => 'aac',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-ac' => '2',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-strict' => 'experimental',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-b:a' => '128k',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-codec:v' => 'libx264',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-preset' => 'slow',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-profile:v' => 'high',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-f' => 'mp4',
src/Ayamel/TranscodingBundle/Preset/VideoToMp4.php:            '-threads' => "0"
src/Ayamel/TranscodingBundle/Preset/VideoToThumbnail.php:        $this->setOptions(array(
src/Ayamel/TranscodingBundle/Preset/VideoToThumbnail.php:            '-t' => '50%',
src/Ayamel/TranscodingBundle/Preset/VideoToThumbnail.php:            '-s' => '0',
src/Ayamel/TranscodingBundle/Preset/VideoToThumbnail.php:            '-q' => '8'
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:        $this->setOptions(array(
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-codec:v' => 'libvpx',
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-deadline' => 'good',
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-cpu-used' => '0',
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-codec:a' => 'libvorbis',
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-b:a' => '128k',
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-f' => 'webm',
src/Ayamel/TranscodingBundle/Preset/VideoToWebM.php:            '-threads' => "0"
src/Ayamel/TranscodingBundle/PresetMapper.php:            if ($this->validatePreset($data)) {
src/Ayamel/TranscodingBundle/PresetMapper.php:                $this->addPreset($key, $data);
src/Ayamel/TranscodingBundle/PresetMapper.php:        $this->map = $map;
src/Ayamel/TranscodingBundle/PresetMapper.php:        return (isset($this->presets[$key])) ? $this->presets[$key] : false;
src/Ayamel/TranscodingBundle/PresetMapper.php:        return $this->presets;
src/Ayamel/TranscodingBundle/PresetMapper.php:        return $this->map;
src/Ayamel/TranscodingBundle/PresetMapper.php:        $this->presets[$key] = $data;
src/Ayamel/TranscodingBundle/PresetMapper.php:        return isset($this->map[$ref->getMimeType()]);
src/Ayamel/TranscodingBundle/PresetMapper.php:        return $this->getPresetMappingsForMimeType($ref->getMimeType());
src/Ayamel/TranscodingBundle/PresetMapper.php:        if (!isset($this->map[$mime])) {
src/Ayamel/TranscodingBundle/PresetMapper.php:        foreach ($this->map[$mime] as $key) {
src/Ayamel/TranscodingBundle/PresetMapper.php:            if (isset($this->presets[$key])) {
src/Ayamel/TranscodingBundle/PresetMapper.php:                $presets[$key] = $this->presets[$key];
src/Ayamel/TranscodingBundle/PresetMapper.php:        if (isset($this->map[$mime])) {
src/Ayamel/TranscodingBundle/PresetMapper.php:            return $this->map[$mime];
src/Ayamel/TranscodingBundle/PresetMapper.php:        foreach ($this->map as $mime => $presets) {
src/Ayamel/TranscodingBundle/RabbitMQ/Consumer.php:        $this->container = $container;
src/Ayamel/TranscodingBundle/RabbitMQ/Consumer.php:        $body = unserialize($msg->body);
src/Ayamel/TranscodingBundle/RabbitMQ/Consumer.php:            $resource = $this->container->get('ayamel.transcoding.manager')->transcodeResource($id, $appendFiles, $presetFilter, $mimeFilter);
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        $this->container = $container;
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        $req = $e->getRequest();
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        if ($file = $req->files->get('file', false)) {
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:            if ('false' !== $req->request->get('transcode', 'true')) {
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:                $this->container->get('event_dispatcher')->addSubscriber($this);
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        $this->uploadedData = $e->getContentData();
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        $this->resource = $e->getResource();
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        $uploadedFile = $this->uploadedData['file'];
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        foreach ($this->resource->content->getFiles() as $file) {
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:            if ('original' === $file->getRepresentation() && $file->getInternalUri()) {
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:                $this->fileToTranscode = $file;
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:        if ($this->fileToTranscode) {
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:            $this->container->get('old_sound_rabbit_mq.transcoding_producer')->publish(serialize(array(
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:                'id' => $this->resource->getId(),
src/Ayamel/TranscodingBundle/RabbitMQ/PublisherListener.php:                'path' => $this->fileToTranscode->getInternalUri(),
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_mp4_low
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_mp4_sd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_mp4_hd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_mp4_full_hd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_webm_low
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_webm_sd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_webm_hd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_webm_full_hd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_thumbnail_original
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_thumbnail_sd
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        - video_to_thumbnail_low
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/x-ms-wmv: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/x-msvideo: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/avs-video: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/x-motion-jpeg: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/x-mpeg: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/x-matroska: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.preset_map.yml:        video/x-flv: %ayamel.transcoding.video_presets%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-profile:v": "baseline"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:360"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "400k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "500k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "1000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libx264_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:            #filters: none - the low quality preset should always apply, regardless of original video quality
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-profile:v": "baseline"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:480"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "700k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "900k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "1800k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libx264_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-profile:v": "high"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:720"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "1500k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "2000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "4000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libx264_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-profile:v": "high"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:1080"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "300k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "4000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "8000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libx264_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "400k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "500k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "1000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmin": "10"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmax": "63"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-crf": "15"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:360"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libvpx_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:            #filters: no filters - the low quality preset should always apply, regardless of original video quality
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "700k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "900k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "1800k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmin": "10"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmax": "63"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-crf": "15"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:480"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libvpx_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "1500k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "2000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "4000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmin": "5"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmax": "63"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-crf": "8"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:720"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libvpx_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-b:v": "3000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-maxrate": "4000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-bufsize": "8000k"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmin": "5"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-qmax": "63"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-crf": "8"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-vf": "scale=trunc(oh*a/2)*2:1080"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-threads": %libvpx_threads%
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-t": "50%"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-s": "854x480"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-t": "50%"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-s": "640x360"
src/Ayamel/TranscodingBundle/Resources/config/config.presets.yml:                "-t": "50%"
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - @service_container
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - @ayamel.api.filesystem
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - @doctrine.odm.mongodb.document_manager
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - @transcoder
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - %ayamel.transcoding.temp_directory%
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - @event_dispatcher
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - %ayamel.transcoding.presets%
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - %ayamel.transcoding.preset_map%
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - { name: ayamel.api.event_listener , event: ayamel.api.resolve_uploaded_content, method: onResolveUploadedContent, priority: 128 }
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - { name: transcoding.adapter }
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - { name: transcoding.preset }
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - { name: transcoding.preset }
src/Ayamel/TranscodingBundle/Resources/config/config.yml:            - { name: transcoding.preset }
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php: * - using the TranscodingManager directly
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php: * - running the TranscodeResourceCommand from the CLI
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php: * - asynchronously via the RabbitMQ consumer
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('awaiting_processing', $content['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($data['title'], $content['resource']['title']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(1, count($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($data['downloadUri']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('text/plain', $data['mime']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('text/plain', $data['mimeType']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(filesize($testFilePath), $data['bytes']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $resource = $this->getContainer()->get('ayamel.transcoding.manager')->transcodeResource($resourceId);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($resource->content));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $files = $resource->content->getFiles();
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(2, count($files));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('awaiting_processing', $content['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($data['title'], $content['resource']['title']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(1, count($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($data['downloadUri']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('text/plain', $data['mime']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('text/plain', $data['mimeType']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(filesize($testFilePath), $data['bytes']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        //now run transcode command directly, the --force flag makes it run immediately, instead
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->runCommand(sprintf('api:resource:transcode %s --force', $resourceId));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        //now get resource - expect 2 files and changed status
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $json = $this->getJson('GET', '/api/v1/resources/'.$resourceId.'?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(200, $json['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('normal', $json['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(2, count($json['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($expected['mime'], $transcoded['mime']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($expected['mimeType'], $transcoded['mimeType']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($expected['representation'], $transcoded['representation']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($expected['quality'], $transcoded['quality']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($expected['bytes'], $transcoded['bytes']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($transcoded['downloadUri']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $container = $this->getContainer();
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            $container->get('old_sound_rabbit_mq.transcoding_producer')->getChannel()->queue_purge('transcoding');
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $consolePath = $container->getParameter('kernel.root_dir').DIRECTORY_SEPARATOR."console";
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $rabbitProcess = new Process(sprintf('%s --env=test rabbitmq:consumer transcoding --messages=1 --verbose', $consolePath));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $rabbitProcess->start();
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        if (!$rabbitProcess->isRunning()) {
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            throw new \RuntimeException(($rabbitProcess->isSuccessful()) ? $rabbitProcess->getOutput() : $rabbitProcess->getErrorOutput());
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('awaiting_processing', $content['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame($data['title'], $content['resource']['title']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(1, count($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertTrue(isset($data['downloadUri']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('text/plain', $data['mime']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame('text/plain', $data['mimeType']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $this->assertSame(filesize($testFilePath), $data['bytes']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:        $rabbitProcess->wait(function($type, $output) use ($tester, $resourceId, $rabbitProcess) {
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            while ($rabbitProcess->isRunning()) {
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            if (!$rabbitProcess->isSuccessful()) {
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:                throw new \RuntimeException($rabbitProcess->getErrorOutput());
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            $data = $tester->getJson('GET', '/api/v1/resources/'.$resourceId);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            $tester->assertSame(200, $data['response']['code']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            $tester->assertSame('normal', $data['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            $tester->assertTrue(isset($data['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/BasicTranscodeTest.php:            $tester->assertSame(2, count($files));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            'video/x-ms-wmv' => array('video_to_mp4_low', 'video_to_mp4_sd', 'video_to_thumbnail'),
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            'video/x-msvideo' => array('video_to_mp4_low', 'video_to_mp4_sd', 'video_to_thumbnail'),
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            'video/x-flv' => array('video_to_mp4_low', 'video_to_mp4_sd', 'video_to_thumbnail')
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $ref->setMimeType($mime);
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $ref->setMime($mime);
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        return new PresetMapper($this->getPresets(), $this->getMap());
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertNotNull($m);
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertTrue($m instanceof PresetMapper);
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $data = $this->createTestMapper()->getPreset('video_to_mp4_low');
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertSame('handbrake.classic', $data['preset_service']);
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertFalse($this->createTestMapper()->getPreset('does_not_exist'));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertTrue($this->createTestMapper()->canTranscodeFileReference($this->createTestReference('video/x-ms-wmv')));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertFalse($this->createTestMapper()->canTranscodeFileReference($this->createTestReference('application/pdf')));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertSame($expected, $this->createTestMapper()->getPresetsForMimeType('video/mp4'));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertFalse($this->createTestMapper()->getPresetsForMimeType('application/pdf'));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            'video/x-ms-wmv',
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            'video/x-msvideo',
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            'video/x-flv',
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertSame($expected, $this->createTestMapper()->getMimeTypesForPreset('video_to_mp4_low'));
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertSame($this->getPresets(), $this->createTestMapper()->getPresetMappingsForFileReference(
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            $this->createTestReference('video/quicktime')
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:        $this->assertFalse($this->createTestMapper()->getPresetMappingsForFileReference(
src/Ayamel/TranscodingBundle/Tests/PresetMapperTest.php:            $this->createTestReference('application/pdf')
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame('awaiting_processing', $content['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame($data['title'], $content['resource']['title']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(1, count($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $resource = $this->getContainer()->get('ayamel.transcoding.manager')->transcodeResource($resourceId);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertTrue(isset($resource->content));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $files = $resource->content->getFiles();
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(12, count($files));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $response = $this->getJson('POST', '/api/v1/resources?_key=45678isafgd56789asfgdhf4567', array(), array(), array(
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(201, $response['response']['code']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertFalse(isset($response['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame('awaiting_content', $response['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $content = $this->getJson('POST', $uploadUrl.'?_key=45678isafgd56789asfgdhf4567', array(), array('file' => $uploadedFile));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(202, $content['response']['code']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame('awaiting_processing', $content['resource']['status']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame($data['title'], $content['resource']['title']);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertTrue(isset($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(1, count($content['resource']['content']['files']));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $resource = $this->getContainer()->get('ayamel.transcoding.manager')->transcodeResource($resourceId);
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertTrue(isset($resource->content));
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $files = $resource->content->getFiles();
src/Ayamel/TranscodingBundle/Tests/VideoTranscodeTest.php:        $this->assertSame(8, count($files));
Binary file src/Ayamel/TranscodingBundle/Tests/sample_files/high.mp4 matches
Binary file src/Ayamel/TranscodingBundle/Tests/sample_files/low.mp4 matches
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->container = $container;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->filesystem = $fs;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->docManager = $dm;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->transcoder = $t;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->dispatcher = $dispatcher;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->tmpDirectory = $tmpDirectory;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->presetConfig = $presetConfig;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->presetMap = $presetMap;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $resource = $this->getResource($id);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $refsToTranscode = $this->getRefsToTranscode($resource);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $mapper = $this->createMapperForResource($resource);
src/Ayamel/TranscodingBundle/TranscodeManager.php:            $mappings = $mapper->getPresetMappingsForFileReference($ref);
src/Ayamel/TranscodingBundle/TranscodeManager.php:            $mappings = $this->filterPresetMappings($mappings, $ref, $presetFilter, $mimeFilter);
src/Ayamel/TranscodingBundle/TranscodeManager.php:            $resource = $this->transcodeFileReferenceForResource($ref, $resource, $mappings, $append);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->dispatcher->dispatch(ApiEvents::RESOURCE_MODIFIED, new ResourceEvent($resource));
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->lockResource($resource);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $preset = $this->container->get($def['preset_service']);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                    $preset->mergeOptions($def['params']);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                    $transcodedFile = $this->transcoder->transcodeWithPreset(
src/Ayamel/TranscodingBundle/TranscodeManager.php:                        $ref->getInternalUri(),
src/Ayamel/TranscodingBundle/TranscodeManager.php:                        $this->generateTemporaryOutputPath($resource->getId(), $def),
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $newFileReference = FileReference::createFromLocalPath($transcodedFile->getRealPath());
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $newFileReference->setMimeType($transcodedFile->getMimeType());
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $newFileReference->setQuality($def['quality']);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $newFileReference->setRepresentation($def['representation']);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $newFileReference->setBytes($transcodedFile->getSize());
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $finalReference = $this->filesystem->addFileForId($resource->getId(), $newFileReference, $newBaseName, false, FilesystemInterface::CONFLICT_OVERWRITE);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                //check for full-mime string, add it if not set
src/Ayamel/TranscodingBundle/TranscodeManager.php:                if (!$finalReference->getMime()) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:                    $finalReference->setMime($finalReference->getMimeType());
src/Ayamel/TranscodingBundle/TranscodeManager.php:            $this->unlockResource($resource);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $this->filesystem->removeFile($failedFile);
src/Ayamel/TranscodingBundle/TranscodeManager.php:            foreach ($resource->content->getFiles() as $file) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:                if ('original' !== $file->getRepresentation()) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:                if ($this->filterOverwrittenFiles($newFiles, $oldFile)) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:                    $this->filesystem->removeFile($oldFile);
src/Ayamel/TranscodingBundle/TranscodeManager.php:                //be re-added in the next step
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $resource->content->removeFile($oldFile);
src/Ayamel/TranscodingBundle/TranscodeManager.php:            $resource->content->addFile($newRef);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->unlockResource($resource);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->cleanupFilesystem($resource);
src/Ayamel/TranscodingBundle/TranscodeManager.php:            if ($file->equals($old)) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $resource->setStatus(Resource::STATUS_PROCESSING);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->docManager->flush();
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $resource->setStatus(Resource::STATUS_NORMAL);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $this->docManager->flush();
src/Ayamel/TranscodingBundle/TranscodeManager.php:        foreach ($this->filesystem->getFilesForId($resource->getId()) as $ref) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:            if (!$resource->content->hasFile($ref)) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:                $this->filesystem->removeFile($ref);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $mapper = new PresetMapper($this->presetConfig, $this->presetMap);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        //$mapper->addPresetDefinitions($this->apiClientManager->getClient($resource->getClient()->getId())->getPresetMappings());
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $resource = $this->docManager->getRepository('AyamelResourceBundle:Resource')->find($id);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        if (Resource::STATUS_DELETED === $resource->getStatus()) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:        if ($resource->isLocked()) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $fileRefs = $resource->content->getFiles();
src/Ayamel/TranscodingBundle/TranscodeManager.php:            throw new NoTranscodeableFilesException(sprintf("Resource [%s] has no files.", $resource->getId()));
src/Ayamel/TranscodingBundle/TranscodeManager.php:                if ('original' === $ref->getRepresentation() && $ref->getInternalUri()) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:                if ($path === $ref->getInternalUri()) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:            throw new NoTranscodeableFilesException(sprintf("Resource [%s] has no files suitable for transcoding.", $resource->getId()));
src/Ayamel/TranscodingBundle/TranscodeManager.php:        return $this->tmpDirectory.DIRECTORY_SEPARATOR.$id.".".$tag.".".$ext;
src/Ayamel/TranscodingBundle/TranscodeManager.php:        if (!empty($mimeFilter) && !in_array($ref->getMimeType(), $mimeFilter)) {
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $filtered = $this->filterPresetMappingsByConfig($ref, $filtered);
src/Ayamel/TranscodingBundle/TranscodeManager.php:        $attrs = $ref->getAttributes();
src/Ayamel/TranscodingBundle/TranscodeManager.php:            //NOTE: bitrate filter removed, in practice it isn't very practical - for now we'll have to depend on resolution and risk
src/Ayamel/YouTubeBundle/Resources/config/config.yml:            - { name: ayamel.resource.provider_delegate }
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertTrue($provider->handlesScheme('youtube'));
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $r = $provider->createResourceFromUri('youtube://txqiwrbYGrs');
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertTrue($r instanceof Resource);
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertSame('David After Dentist', $r->getTitle());
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertSame('video', $r->getType());
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertSame('youtube', $r->getLicense());
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertFalse(is_null($r->getDescription()));
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertFalse(is_null($r->getSubjectDomains()));
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertTrue($r->origin instanceof Origin);
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertSame('booba1234', $r->origin->getCreator());
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertFalse(is_null($r->origin->getDate()));
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertSame("YouTube Video", $r->origin->getFormat());
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertTrue($r->content->getOembed() instanceof OEmbed);
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertFalse(is_null($r->content->getOembed()));
src/Ayamel/YouTubeBundle/Tests/YouTubeResourceProviderTest.php:        $this->assertSame('David After Dentist', $r->content->getOembed()->title);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:        $res->setStatus(Resource::STATUS_NORMAL);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:        $res->setType('video');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:        $res->content = new ContentCollection();
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $res->setTitle($data['entry']['title']['$t']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $res->setDescription($data['entry']['media$group']['media$description']['$t']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $res->setSubjectDomains($subjectDomains);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $res->setLicense($data['entry']['media$group']['media$license']['$t']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $res->content->setCanonicalUri($data['entry']['media$group']['media$player']['url']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $ref->setRepresentation('original');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $ref->setRepresentation('transcoding');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                $ref->setMime($item['type']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                $ref->setMimeType($item['type']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                $ref->setDownloadUri($item['url']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                $res->content->addFile($ref);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $ref->setMime('image/jpeg');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $ref->setMimeType('image/jpeg');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $ref->setDownloadUri($item['url']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $ref->setRepresentation('summary');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                    $res->content->addFile($ref);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:        $o->setFormat('YouTube Video');
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:        $o->setUri($res->content->getCanonicalUri());
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $o->setCreator($data['entry']['author'][0]['name']['$t']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $o->setDate($data['entry']['published']['$t']);
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:        $res->origin = $o;
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:                $oem->$key = $val;
src/Ayamel/YouTubeBundle/YouTubeResourceProvider.php:            $res->content->setOembed($oem);
util/install_ffmpeg.sh:sudo apt-get update
util/install_ffmpeg.sh:sudo apt-get -y install autoconf automake build-essential git libass-dev libgpac-dev \
util/install_ffmpeg.sh:  libsdl1.2-dev libtheora-dev libtool libva-dev libvdpau-dev libvorbis-dev libx11-dev \
util/install_ffmpeg.sh:  libxext-dev libxfixes-dev pkg-config texi2html zlib1g-dev
util/install_ffmpeg.sh:wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz
util/install_ffmpeg.sh:tar xzvf yasm-1.2.0.tar.gz
util/install_ffmpeg.sh:cd yasm-1.2.0
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin"
util/install_ffmpeg.sh:git clone --depth 1 git://git.videolan.org/x264.git
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --enable-static
util/install_ffmpeg.sh:## fdk-aac
util/install_ffmpeg.sh:git clone --depth 1 git://github.com/mstorsjo/fdk-aac.git
util/install_ffmpeg.sh:cd fdk-aac
util/install_ffmpeg.sh:autoreconf -fiv
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" --disable-shared
util/install_ffmpeg.sh:sudo apt-get install nasm
util/install_ffmpeg.sh:wget http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
util/install_ffmpeg.sh:tar xzvf lame-3.99.5.tar.gz
util/install_ffmpeg.sh:cd lame-3.99.5
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" --enable-nasm --disable-shared
util/install_ffmpeg.sh:wget http://downloads.xiph.org/releases/opus/opus-1.0.3.tar.gz
util/install_ffmpeg.sh:tar xzvf opus-1.0.3.tar.gz
util/install_ffmpeg.sh:cd opus-1.0.3
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" --disable-shared
util/install_ffmpeg.sh:git clone --depth 1 http://git.chromium.org/webm/libvpx.git
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" --disable-examples
util/install_ffmpeg.sh:git clone --depth 1 git://source.ffmpeg.org/ffmpeg
util/install_ffmpeg.sh:./configure --prefix="$HOME/ffmpeg_build" \
util/install_ffmpeg.sh:  --extra-cflags="-I$HOME/ffmpeg_build/include" --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
util/install_ffmpeg.sh:  --bindir="$HOME/bin" --extra-libs="-ldl" --enable-gpl --enable-libass --enable-libfdk-aac \
util/install_ffmpeg.sh:  --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx \
util/install_ffmpeg.sh:  --enable-libx264 --enable-nonfree --enable-x11grab
util/install_ffmpeg.sh:hash -r
util/ytadd.rb:    if line =~ /watch\?v=([\w-]+)/
vagrantfile:  config.vm.box_url = "http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box"
vagrantfile:    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
vagrantfile:    v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
vagrantfile:    a.playbook = "dev-ansible/playbook.yml"
vagrantfile:  # Create a private network, which allows host-only access to the machine
web/.htaccess:    RewriteCond %{REQUEST_FILENAME} !-f
web/app.php:$loader->unregister();
web/app.php:$apcLoader->register(true);
web/app.php:$kernel->loadClassCache();
web/app.php:$response = $kernel->handle($request)->prepare($request);
web/app.php:$response->send();
web/app.php:$kernel->terminate($request, $response);
web/app.php://die( ((microtime(true)-$__start) * 1000)."<br />".(memory_get_peak_usage() / 1024)."<br />".count(get_included_files()) );
web/app_dev.php:// read http://symfony.com/doc/current/book/installation.html#configuration-and-setup for more information
web/app_dev.php:$loader->unregister();
web/app_dev.php:$apcLoader->register(true);
web/app_dev.php:$kernel->loadClassCache();
web/app_dev.php:$response = $kernel->handle($request)->prepare($request);
web/app_dev.php:$response->send();
web/app_dev.php:$kernel->terminate($request, $response);
web/app_dev.php://die( ((microtime(true)-$__start) * 1000)."<br />".(memory_get_peak_usage() / 1024)."<br />".count(get_included_files()) );
Binary file web/apple-touch-icon.png matches
web/config.php:$majorProblems = $symfonyRequirements->getFailedRequirements();
web/config.php:$minorProblems = $symfonyRequirements->getFailedRecommendations();
web/config.php:        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
web/config.php:            <div class="header clear-fix">
web/config.php:                <div class="header-logo">
web/config.php:                    <div class="form-row">
web/config.php:                      <label for="search-id">
web/config.php:                      <input name="q" id="search-id" type="search" placeholder="Search on Symfony website" />
web/config.php:                      <button type="submit" class="sf-button">
web/config.php:                          <span class="border-l">
web/config.php:                            <span class="border-r">
web/config.php:                                <span class="btn-bg">OK</span>
web/config.php:            <div class="sf-reset">
web/config.php:                    <div class="symfony-block-content">
web/config.php:                                    <li><?php echo $problem->getHelpHtml() ?></li>
web/config.php:                                    <li><?php echo $problem->getHelpHtml() ?></li>
web/config.php:                        <?php if ($symfonyRequirements->hasPhpIniConfigIssue()): ?>
web/config.php:                                <?php if ($symfonyRequirements->getPhpIniConfigPath()): ?>
web/config.php:                                    Changes to the <strong>php.ini</strong> file must be done in "<strong><?php echo $symfonyRequirements->getPhpIniConfigPath() ?></strong>".
web/config.php:                        <ul class="symfony-install-continue">
web/config.php:                                <li><a href="config.php">Re-check configuration</a></li>
web/css/bootstrap.css: * http://www.apache.org/licenses/LICENSE-2.0
web/css/bootstrap.css: * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  font-style: normal;
web/css/bootstrap.css:  font-size: 100%;
web/css/bootstrap.css:  line-height: 1;
web/css/bootstrap.css:  font-family: inherit;
web/css/bootstrap.css:  border-collapse: collapse;
web/css/bootstrap.css:  border-spacing: 0;
web/css/bootstrap.css:  list-style: none;
web/css/bootstrap.css:  overflow-y: scroll;
web/css/bootstrap.css:  font-size: 100%;
web/css/bootstrap.css:  -webkit-text-size-adjust: 100%;
web/css/bootstrap.css:  -ms-text-size-adjust: 100%;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  font-size: 75%;
web/css/bootstrap.css:  line-height: 0;
web/css/bootstrap.css:  vertical-align: baseline;
web/css/bootstrap.css:  top: -0.5em;
web/css/bootstrap.css:  bottom: -0.25em;
web/css/bootstrap.css:  -ms-interpolation-mode: bicubic;
web/css/bootstrap.css:  font-size: 100%;
web/css/bootstrap.css:  vertical-align: baseline;
web/css/bootstrap.css:  *vertical-align: middle;
web/css/bootstrap.css:  line-height: normal;
web/css/bootstrap.css:button::-moz-focus-inner, input::-moz-focus-inner {
web/css/bootstrap.css:  -webkit-appearance: button;
web/css/bootstrap.css:  -webkit-appearance: textfield;
web/css/bootstrap.css:  -webkit-box-sizing: content-box;
web/css/bootstrap.css:  -moz-box-sizing: content-box;
web/css/bootstrap.css:  box-sizing: content-box;
web/css/bootstrap.css:input[type="search"]::-webkit-search-decoration {
web/css/bootstrap.css:  -webkit-appearance: none;
web/css/bootstrap.css:  vertical-align: top;
web/css/bootstrap.css: * ----------------------------------------------------- */
web/css/bootstrap.css: * ----------------------------------------------------------------- */
web/css/bootstrap.css: * ------------------------------------------------------------------------------------------- */
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  margin-left: auto;
web/css/bootstrap.css:  margin-right: auto;
web/css/bootstrap.css:.container-fluid {
web/css/bootstrap.css:  min-width: 940px;
web/css/bootstrap.css:  padding-left: 20px;
web/css/bootstrap.css:  padding-right: 20px;
web/css/bootstrap.css:.container-fluid:before, .container-fluid:after {
web/css/bootstrap.css:.container-fluid:after {
web/css/bootstrap.css:.container-fluid > .sidebar {
web/css/bootstrap.css:.container-fluid > .content {
web/css/bootstrap.css:  margin-left: 240px;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  line-height: inherit;
web/css/bootstrap.css:  font-weight: inherit;
web/css/bootstrap.css:  text-decoration: underline;
web/css/bootstrap.css:.pull-right {
web/css/bootstrap.css:.pull-left {
web/css/bootstrap.css:  margin-left: -20px;
web/css/bootstrap.css:  margin-left: 20px;
web/css/bootstrap.css:  margin-left: 80px;
web/css/bootstrap.css:  margin-left: 140px;
web/css/bootstrap.css:  margin-left: 200px;
web/css/bootstrap.css:  margin-left: 260px;
web/css/bootstrap.css:  margin-left: 320px;
web/css/bootstrap.css:  margin-left: 380px;
web/css/bootstrap.css:  margin-left: 440px;
web/css/bootstrap.css:  margin-left: 500px;
web/css/bootstrap.css:  margin-left: 560px;
web/css/bootstrap.css:  margin-left: 620px;
web/css/bootstrap.css:  margin-left: 680px;
web/css/bootstrap.css:  margin-left: 740px;
web/css/bootstrap.css:.span-one-third {
web/css/bootstrap.css:.span-two-thirds {
web/css/bootstrap.css:.row > .offset-one-third {
web/css/bootstrap.css:  margin-left: 340px;
web/css/bootstrap.css:.row > .offset-two-thirds {
web/css/bootstrap.css:  margin-left: 660px;
web/css/bootstrap.css: * ---------------------------------------------------------------------------------------- */
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  margin-bottom: 9px;
web/css/bootstrap.css:  font-size: 11px;
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  font-size: 30px;
web/css/bootstrap.css:  line-height: 36px;
web/css/bootstrap.css:  font-size: 18px;
web/css/bootstrap.css:  font-size: 24px;
web/css/bootstrap.css:  line-height: 36px;
web/css/bootstrap.css:  font-size: 14px;
web/css/bootstrap.css:  line-height: 36px;
web/css/bootstrap.css:  font-size: 18px;
web/css/bootstrap.css:  font-size: 14px;
web/css/bootstrap.css:  font-size: 16px;
web/css/bootstrap.css:  font-size: 12px;
web/css/bootstrap.css:  font-size: 14px;
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  text-transform: uppercase;
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:  list-style: disc;
web/css/bootstrap.css:  list-style: decimal;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  list-style: none;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  margin-left: 9px;
web/css/bootstrap.css:  border-bottom: 1px solid #eee;
web/css/bootstrap.css:  font-style: inherit;
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  font-style: italic;
web/css/bootstrap.css:  font-weight: inherit;
web/css/bootstrap.css:  line-height: inherit;
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  border-left: 5px solid #eee;
web/css/bootstrap.css:  padding-left: 15px;
web/css/bootstrap.css:  font-size: 14px;
web/css/bootstrap.css:  font-weight: 300;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:  font-size: 12px;
web/css/bootstrap.css:  font-weight: 300;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  font-family: Monaco, Andale Mono, Courier New, monospace;
web/css/bootstrap.css:  font-size: 12px;
web/css/bootstrap.css:  -webkit-border-radius: 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px;
web/css/bootstrap.css:  border-radius: 3px;
web/css/bootstrap.css:  background-color: #fee9cc;
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  font-size: 12px;
web/css/bootstrap.css:  -webkit-border-radius: 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px;
web/css/bootstrap.css:  border-radius: 3px;
web/css/bootstrap.css:  white-space: pre;
web/css/bootstrap.css:  white-space: pre-wrap;
web/css/bootstrap.css:  word-wrap: break-word;
web/css/bootstrap.css: * ------------------------------------------------------------- */
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  padding-top: 18px;
web/css/bootstrap.css:  padding-left: 150px;
web/css/bootstrap.css:  font-size: 19.5px;
web/css/bootstrap.css:  line-height: 1;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:  *line-height: 1.5;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  line-height: normal;
web/css/bootstrap.css:  padding-top: 6px;
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  text-align: right;
web/css/bootstrap.css:  margin-left: 150px;
web/css/bootstrap.css:.uneditable-input {
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  -webkit-border-radius: 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px;
web/css/bootstrap.css:  border-radius: 3px;
web/css/bootstrap.css:  *margin-top: 0;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:  line-height: normal;
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  line-height: initial;
web/css/bootstrap.css:  -webkit-box-shadow: none;
web/css/bootstrap.css:  -moz-box-shadow: none;
web/css/bootstrap.css:  box-shadow: none;
web/css/bootstrap.css:  line-height: 27px;
web/css/bootstrap.css:  *margin-top: 4px;
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:.uneditable-input {
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  border-color: #eee;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.025);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.025);
web/css/bootstrap.css:  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.025);
web/css/bootstrap.css:  cursor: not-allowed;
web/css/bootstrap.css::-moz-placeholder {
web/css/bootstrap.css:::-webkit-input-placeholder {
web/css/bootstrap.css:  -webkit-transition: border linear 0.2s, box-shadow linear 0.2s;
web/css/bootstrap.css:  -moz-transition: border linear 0.2s, box-shadow linear 0.2s;
web/css/bootstrap.css:  -ms-transition: border linear 0.2s, box-shadow linear 0.2s;
web/css/bootstrap.css:  -o-transition: border linear 0.2s, box-shadow linear 0.2s;
web/css/bootstrap.css:  transition: border linear 0.2s, box-shadow linear 0.2s;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
web/css/bootstrap.css:  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
web/css/bootstrap.css:  border-color: rgba(82, 168, 236, 0.8);
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);
web/css/bootstrap.css:  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);
web/css/bootstrap.css:  -webkit-box-shadow: none;
web/css/bootstrap.css:  -moz-box-shadow: none;
web/css/bootstrap.css:  box-shadow: none;
web/css/bootstrap.css:form .clearfix.error > label, form .clearfix.error .help-block, form .clearfix.error .help-inline {
web/css/bootstrap.css:  border-color: #ee5f5b;
web/css/bootstrap.css:  border-color: #e9322d;
web/css/bootstrap.css:  -webkit-box-shadow: 0 0 6px #f8b9b7;
web/css/bootstrap.css:  -moz-box-shadow: 0 0 6px #f8b9b7;
web/css/bootstrap.css:  box-shadow: 0 0 6px #f8b9b7;
web/css/bootstrap.css:form .clearfix.error .input-prepend .add-on, form .clearfix.error .input-append .add-on {
web/css/bootstrap.css:  background-color: #fce6e6;
web/css/bootstrap.css:  border-color: #b94a48;
web/css/bootstrap.css:form .clearfix.warning > label, form .clearfix.warning .help-block, form .clearfix.warning .help-inline {
web/css/bootstrap.css:  border-color: #ccae64;
web/css/bootstrap.css:  border-color: #be9a3f;
web/css/bootstrap.css:  -webkit-box-shadow: 0 0 6px #e5d6b1;
web/css/bootstrap.css:  -moz-box-shadow: 0 0 6px #e5d6b1;
web/css/bootstrap.css:  box-shadow: 0 0 6px #e5d6b1;
web/css/bootstrap.css:form .clearfix.warning .input-prepend .add-on, form .clearfix.warning .input-append .add-on {
web/css/bootstrap.css:  background-color: #d2b877;
web/css/bootstrap.css:  border-color: #c09853;
web/css/bootstrap.css:form .clearfix.success > label, form .clearfix.success .help-block, form .clearfix.success .help-inline {
web/css/bootstrap.css:  border-color: #57a957;
web/css/bootstrap.css:  border-color: #458845;
web/css/bootstrap.css:  -webkit-box-shadow: 0 0 6px #9acc9a;
web/css/bootstrap.css:  -moz-box-shadow: 0 0 6px #9acc9a;
web/css/bootstrap.css:  box-shadow: 0 0 6px #9acc9a;
web/css/bootstrap.css:form .clearfix.success .input-prepend .add-on, form .clearfix.success .input-append .add-on {
web/css/bootstrap.css:  background-color: #bcddbc;
web/css/bootstrap.css:  border-color: #468847;
web/css/bootstrap.css:.input-mini,
web/css/bootstrap.css:.input-small,
web/css/bootstrap.css:.input-medium,
web/css/bootstrap.css:.input-large,
web/css/bootstrap.css:.input-xlarge,
web/css/bootstrap.css:.input-xxlarge,
web/css/bootstrap.css:  overflow-y: auto;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  border-color: #ddd;
web/css/bootstrap.css:  cursor: not-allowed;
web/css/bootstrap.css:  margin-top: 18px;
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  border-top: 1px solid #ddd;
web/css/bootstrap.css:  -webkit-border-radius: 0 0 3px 3px;
web/css/bootstrap.css:  -moz-border-radius: 0 0 3px 3px;
web/css/bootstrap.css:  border-radius: 0 0 3px 3px;
web/css/bootstrap.css:.actions .secondary-action {
web/css/bootstrap.css:.actions .secondary-action a {
web/css/bootstrap.css:  line-height: 30px;
web/css/bootstrap.css:.actions .secondary-action a:hover {
web/css/bootstrap.css:  text-decoration: underline;
web/css/bootstrap.css:.help-inline, .help-block {
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:.help-inline {
web/css/bootstrap.css:  padding-left: 5px;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:  *top: -5px;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:.help-block {
web/css/bootstrap.css:  max-width: 600px;
web/css/bootstrap.css:.inline-inputs {
web/css/bootstrap.css:.inline-inputs span {
web/css/bootstrap.css:.input-prepend input, .input-append input {
web/css/bootstrap.css:  -webkit-border-radius: 0 3px 3px 0;
web/css/bootstrap.css:  -moz-border-radius: 0 3px 3px 0;
web/css/bootstrap.css:  border-radius: 0 3px 3px 0;
web/css/bootstrap.css:.input-prepend .add-on, .input-append .add-on {
web/css/bootstrap.css:  z-index: 2;
web/css/bootstrap.css:  min-width: 16px;
web/css/bootstrap.css:  margin-right: -1px;
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  text-align: center;
web/css/bootstrap.css:  text-shadow: 0 1px 0 #ffffff;
web/css/bootstrap.css:  -webkit-border-radius: 3px 0 0 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px 0 0 3px;
web/css/bootstrap.css:  border-radius: 3px 0 0 3px;
web/css/bootstrap.css:.input-prepend .active, .input-append .active {
web/css/bootstrap.css:  border-color: #46a546;
web/css/bootstrap.css:.input-prepend .add-on {
web/css/bootstrap.css:  *margin-top: 1px;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:.input-append input {
web/css/bootstrap.css:  -webkit-border-radius: 3px 0 0 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px 0 0 3px;
web/css/bootstrap.css:  border-radius: 3px 0 0 3px;
web/css/bootstrap.css:.input-append .add-on {
web/css/bootstrap.css:  -webkit-border-radius: 0 3px 3px 0;
web/css/bootstrap.css:  -moz-border-radius: 0 3px 3px 0;
web/css/bootstrap.css:  border-radius: 0 3px 3px 0;
web/css/bootstrap.css:  margin-right: 0;
web/css/bootstrap.css:  margin-left: -1px;
web/css/bootstrap.css:.inputs-list {
web/css/bootstrap.css:.inputs-list li {
web/css/bootstrap.css:.inputs-list label {
web/css/bootstrap.css:  margin-left: 20px;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  text-align: left;
web/css/bootstrap.css:  white-space: normal;
web/css/bootstrap.css:.inputs-list label strong {
web/css/bootstrap.css:.inputs-list label small {
web/css/bootstrap.css:  font-size: 11px;
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:.inputs-list .inputs-list {
web/css/bootstrap.css:  margin-left: 25px;
web/css/bootstrap.css:  margin-bottom: 10px;
web/css/bootstrap.css:  padding-top: 0;
web/css/bootstrap.css:.inputs-list:first-child {
web/css/bootstrap.css:  padding-top: 6px;
web/css/bootstrap.css:.inputs-list li + li {
web/css/bootstrap.css:  padding-top: 2px;
web/css/bootstrap.css:.inputs-list input[type=radio], .inputs-list input[type=checkbox] {
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:  margin-left: -20px;
web/css/bootstrap.css:.form-stacked {
web/css/bootstrap.css:  padding-left: 20px;
web/css/bootstrap.css:.form-stacked fieldset {
web/css/bootstrap.css:  padding-top: 9px;
web/css/bootstrap.css:.form-stacked legend {
web/css/bootstrap.css:  padding-left: 0;
web/css/bootstrap.css:.form-stacked label {
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  text-align: left;
web/css/bootstrap.css:  line-height: 20px;
web/css/bootstrap.css:  padding-top: 0;
web/css/bootstrap.css:.form-stacked .clearfix {
web/css/bootstrap.css:  margin-bottom: 9px;
web/css/bootstrap.css:.form-stacked .clearfix div.input {
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:.form-stacked .inputs-list {
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:.form-stacked .inputs-list li {
web/css/bootstrap.css:  padding-top: 0;
web/css/bootstrap.css:.form-stacked .inputs-list li label {
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  padding-top: 0;
web/css/bootstrap.css:.form-stacked div.clearfix.error {
web/css/bootstrap.css:  padding-top: 10px;
web/css/bootstrap.css:  padding-bottom: 10px;
web/css/bootstrap.css:  padding-left: 10px;
web/css/bootstrap.css:  margin-top: 0;
web/css/bootstrap.css:  margin-left: -10px;
web/css/bootstrap.css:.form-stacked .actions {
web/css/bootstrap.css:  margin-left: -20px;
web/css/bootstrap.css:  padding-left: 20px;
web/css/bootstrap.css: * ---------------------------------------- */
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  border-collapse: collapse;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  text-align: left;
web/css/bootstrap.css:  padding-top: 9px;
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  vertical-align: middle;
web/css/bootstrap.css:  vertical-align: top;
web/css/bootstrap.css:  border-top: 1px solid #ddd;
web/css/bootstrap.css:  border-top: 1px solid #ddd;
web/css/bootstrap.css:  vertical-align: top;
web/css/bootstrap.css:.condensed-table th, .condensed-table td {
web/css/bootstrap.css:.bordered-table {
web/css/bootstrap.css:  border-collapse: separate;
web/css/bootstrap.css:  *border-collapse: collapse;
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:.bordered-table th + th, .bordered-table td + td, .bordered-table th + td {
web/css/bootstrap.css:  border-left: 1px solid #ddd;
web/css/bootstrap.css:.bordered-table thead tr:first-child th:first-child, .bordered-table tbody tr:first-child td:first-child {
web/css/bootstrap.css:  -webkit-border-radius: 4px 0 0 0;
web/css/bootstrap.css:  -moz-border-radius: 4px 0 0 0;
web/css/bootstrap.css:  border-radius: 4px 0 0 0;
web/css/bootstrap.css:.bordered-table thead tr:first-child th:last-child, .bordered-table tbody tr:first-child td:last-child {
web/css/bootstrap.css:  -webkit-border-radius: 0 4px 0 0;
web/css/bootstrap.css:  -moz-border-radius: 0 4px 0 0;
web/css/bootstrap.css:  border-radius: 0 4px 0 0;
web/css/bootstrap.css:.bordered-table tbody tr:last-child td:first-child {
web/css/bootstrap.css:  -webkit-border-radius: 0 0 0 4px;
web/css/bootstrap.css:  -moz-border-radius: 0 0 0 4px;
web/css/bootstrap.css:  border-radius: 0 0 0 4px;
web/css/bootstrap.css:.bordered-table tbody tr:last-child td:last-child {
web/css/bootstrap.css:  -webkit-border-radius: 0 0 4px 0;
web/css/bootstrap.css:  -moz-border-radius: 0 0 4px 0;
web/css/bootstrap.css:  border-radius: 0 0 4px 0;
web/css/bootstrap.css:.zebra-striped tbody tr:nth-child(odd) td, .zebra-striped tbody tr:nth-child(odd) th {
web/css/bootstrap.css:  background-color: #f9f9f9;
web/css/bootstrap.css:.zebra-striped tbody tr:hover td, .zebra-striped tbody tr:hover th {
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  margin-top: 7px;
web/css/bootstrap.css:  border-width: 0 4px 4px;
web/css/bootstrap.css:  border-style: solid;
web/css/bootstrap.css:  border-color: #000 transparent;
web/css/bootstrap.css:  background-color: rgba(141, 192, 219, 0.25);
web/css/bootstrap.css:  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
web/css/bootstrap.css:  -khtml-opacity: 0.6;
web/css/bootstrap.css:  -moz-opacity: 0.6;
web/css/bootstrap.css:  border-bottom: none;
web/css/bootstrap.css:  border-left: 4px solid transparent;
web/css/bootstrap.css:  border-right: 4px solid transparent;
web/css/bootstrap.css:  border-top: 4px solid #000;
web/css/bootstrap.css:  -webkit-box-shadow: none;
web/css/bootstrap.css:  -moz-box-shadow: none;
web/css/bootstrap.css:  box-shadow: none;
web/css/bootstrap.css:  -khtml-opacity: 0.6;
web/css/bootstrap.css:  -moz-opacity: 0.6;
web/css/bootstrap.css:  border-bottom-color: #049cdb;
web/css/bootstrap.css:  background-color: #ade6fe;
web/css/bootstrap.css:  border-bottom-color: #46a546;
web/css/bootstrap.css:  background-color: #cdeacd;
web/css/bootstrap.css:  border-bottom-color: #9d261d;
web/css/bootstrap.css:  background-color: #f4c8c5;
web/css/bootstrap.css:  border-bottom-color: #ffc40d;
web/css/bootstrap.css:  background-color: #fff6d9;
web/css/bootstrap.css:  border-bottom-color: #f89406;
web/css/bootstrap.css:  background-color: #fee9cc;
web/css/bootstrap.css:  border-bottom-color: #7a43b6;
web/css/bootstrap.css:  background-color: #e2d5f0;
web/css/bootstrap.css: * ---------------------------------------------------------------------------- */
web/css/bootstrap.css:  z-index: 10000;
web/css/bootstrap.css:  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  background-color: #333;
web/css/bootstrap.css:  background-color: rgba(255, 255, 255, 0.05);
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  margin-left: -20px;
web/css/bootstrap.css:  font-size: 20px;
web/css/bootstrap.css:  font-weight: 200;
web/css/bootstrap.css:  line-height: 1;
web/css/bootstrap.css:  line-height: 40px;
web/css/bootstrap.css:  background-color: transparent;
web/css/bootstrap.css:  -khtml-opacity: 1;
web/css/bootstrap.css:  -moz-opacity: 1;
web/css/bootstrap.css:.topbar form.pull-right {
web/css/bootstrap.css:  background-color: #444;
web/css/bootstrap.css:  background-color: rgba(255, 255, 255, 0.3);
web/css/bootstrap.css:  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
web/css/bootstrap.css:  font-size: normal;
web/css/bootstrap.css:  font-weight: 13px;
web/css/bootstrap.css:  line-height: 1;
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1), 0 1px 0px rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1), 0 1px 0px rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1), 0 1px 0px rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  -webkit-transition: none;
web/css/bootstrap.css:  -moz-transition: none;
web/css/bootstrap.css:  -ms-transition: none;
web/css/bootstrap.css:  -o-transition: none;
web/css/bootstrap.css:.topbar input:-moz-placeholder {
web/css/bootstrap.css:.topbar input::-webkit-input-placeholder {
web/css/bootstrap.css:  background-color: #bfbfbf;
web/css/bootstrap.css:  background-color: rgba(255, 255, 255, 0.5);
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  text-shadow: 0 1px 0 #ffffff;
web/css/bootstrap.css:  -webkit-box-shadow: 0 0 3px rgba(0, 0, 0, 0.15);
web/css/bootstrap.css:  -moz-box-shadow: 0 0 3px rgba(0, 0, 0, 0.15);
web/css/bootstrap.css:  box-shadow: 0 0 3px rgba(0, 0, 0, 0.15);
web/css/bootstrap.css:.topbar-inner, .topbar .fill {
web/css/bootstrap.css:  background-color: #222;
web/css/bootstrap.css:  background-color: #222222;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#333333), to(#222222));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #333333, #222222);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #333333, #222222);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #333333), color-stop(100%, #222222));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #333333, #222222);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #333333, #222222);
web/css/bootstrap.css:  background-image: linear-gradient(top, #333333, #222222);
web/css/bootstrap.css:  -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.25), inset 0 -1px 0 rgba(0, 0, 0, 0.1);
web/css/bootstrap.css:  -moz-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.25), inset 0 -1px 0 rgba(0, 0, 0, 0.1);
web/css/bootstrap.css:  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.25), inset 0 -1px 0 rgba(0, 0, 0, 0.1);
web/css/bootstrap.css:  line-height: 19px;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  background-color: #222;
web/css/bootstrap.css:  background-color: rgba(0, 0, 0, 0.5);
web/css/bootstrap.css:.topbar div > ul.secondary-nav, .nav.secondary-nav {
web/css/bootstrap.css:  margin-left: 10px;
web/css/bootstrap.css:  margin-right: 0;
web/css/bootstrap.css:.topbar div > ul.secondary-nav .menu-dropdown,
web/css/bootstrap.css:.nav.secondary-nav .menu-dropdown,
web/css/bootstrap.css:.topbar div > ul.secondary-nav .dropdown-menu,
web/css/bootstrap.css:.nav.secondary-nav .dropdown-menu {
web/css/bootstrap.css:.topbar div > ul .dropdown-toggle:hover,
web/css/bootstrap.css:.nav .dropdown-toggle:hover,
web/css/bootstrap.css:.topbar div > ul .dropdown.open .dropdown-toggle,
web/css/bootstrap.css:.nav .dropdown.open .dropdown-toggle {
web/css/bootstrap.css:.topbar div > ul .menu-dropdown,
web/css/bootstrap.css:.nav .menu-dropdown,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu,
web/css/bootstrap.css:.nav .dropdown-menu {
web/css/bootstrap.css:  background-color: #333;
web/css/bootstrap.css:.topbar div > ul .menu-dropdown a.menu,
web/css/bootstrap.css:.nav .menu-dropdown a.menu,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu a.menu,
web/css/bootstrap.css:.nav .dropdown-menu a.menu,
web/css/bootstrap.css:.topbar div > ul .menu-dropdown .dropdown-toggle,
web/css/bootstrap.css:.nav .menu-dropdown .dropdown-toggle,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu .dropdown-toggle,
web/css/bootstrap.css:.nav .dropdown-menu .dropdown-toggle {
web/css/bootstrap.css:.topbar div > ul .menu-dropdown a.menu.open,
web/css/bootstrap.css:.nav .menu-dropdown a.menu.open,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu a.menu.open,
web/css/bootstrap.css:.nav .dropdown-menu a.menu.open,
web/css/bootstrap.css:.topbar div > ul .menu-dropdown .dropdown-toggle.open,
web/css/bootstrap.css:.nav .menu-dropdown .dropdown-toggle.open,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu .dropdown-toggle.open,
web/css/bootstrap.css:.nav .dropdown-menu .dropdown-toggle.open {
web/css/bootstrap.css:.topbar div > ul .menu-dropdown li a,
web/css/bootstrap.css:.nav .menu-dropdown li a,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu li a,
web/css/bootstrap.css:.nav .dropdown-menu li a {
web/css/bootstrap.css:  text-shadow: 0 1px 0 rgba(0, 0, 0, 0.5);
web/css/bootstrap.css:.topbar div > ul .menu-dropdown li a:hover,
web/css/bootstrap.css:.nav .menu-dropdown li a:hover,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu li a:hover,
web/css/bootstrap.css:.nav .dropdown-menu li a:hover {
web/css/bootstrap.css:  background-color: #191919;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#292929), to(#191919));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #292929, #191919);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #292929, #191919);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #292929), color-stop(100%, #191919));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #292929, #191919);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #292929, #191919);
web/css/bootstrap.css:  background-image: linear-gradient(top, #292929, #191919);
web/css/bootstrap.css:.topbar div > ul .menu-dropdown .active a,
web/css/bootstrap.css:.nav .menu-dropdown .active a,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu .active a,
web/css/bootstrap.css:.nav .dropdown-menu .active a {
web/css/bootstrap.css:.topbar div > ul .menu-dropdown .divider,
web/css/bootstrap.css:.nav .menu-dropdown .divider,
web/css/bootstrap.css:.topbar div > ul .dropdown-menu .divider,
web/css/bootstrap.css:.nav .dropdown-menu .divider {
web/css/bootstrap.css:  background-color: #222;
web/css/bootstrap.css:  border-color: #444;
web/css/bootstrap.css:.topbar ul .menu-dropdown li a, .topbar ul .dropdown-menu li a {
web/css/bootstrap.css:a.menu:after, .dropdown-toggle:after {
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  text-indent: -99999px;
web/css/bootstrap.css:  vertical-align: top;
web/css/bootstrap.css:  margin-top: 8px;
web/css/bootstrap.css:  margin-left: 4px;
web/css/bootstrap.css:  border-left: 4px solid transparent;
web/css/bootstrap.css:  border-right: 4px solid transparent;
web/css/bootstrap.css:  border-top: 4px solid #ffffff;
web/css/bootstrap.css:  -khtml-opacity: 0.5;
web/css/bootstrap.css:  -moz-opacity: 0.5;
web/css/bootstrap.css:.menu-dropdown, .dropdown-menu {
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  z-index: 900;
web/css/bootstrap.css:  min-width: 160px;
web/css/bootstrap.css:  max-width: 220px;
web/css/bootstrap.css:  margin-left: 0;
web/css/bootstrap.css:  margin-right: 0;
web/css/bootstrap.css:  border-color: #999;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.2);
web/css/bootstrap.css:  border-style: solid;
web/css/bootstrap.css:  border-width: 0 1px 1px;
web/css/bootstrap.css:  -webkit-border-radius: 0 0 6px 6px;
web/css/bootstrap.css:  -moz-border-radius: 0 0 6px 6px;
web/css/bootstrap.css:  border-radius: 0 0 6px 6px;
web/css/bootstrap.css:  -webkit-box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
web/css/bootstrap.css:  -moz-box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
web/css/bootstrap.css:  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
web/css/bootstrap.css:  -webkit-background-clip: padding-box;
web/css/bootstrap.css:  -moz-background-clip: padding-box;
web/css/bootstrap.css:  background-clip: padding-box;
web/css/bootstrap.css:.menu-dropdown li, .dropdown-menu li {
web/css/bootstrap.css:  background-color: none;
web/css/bootstrap.css:.menu-dropdown .divider, .dropdown-menu .divider {
web/css/bootstrap.css:  background-color: #eee;
web/css/bootstrap.css:  border-bottom: 1px solid #ffffff;
web/css/bootstrap.css:.topbar .dropdown-menu a, .dropdown-menu a {
web/css/bootstrap.css:  font-weight: normal;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:  text-shadow: 0 1px 0 #ffffff;
web/css/bootstrap.css:.topbar .dropdown-menu a:hover,
web/css/bootstrap.css:.dropdown-menu a:hover,
web/css/bootstrap.css:.topbar .dropdown-menu a.hover,
web/css/bootstrap.css:.dropdown-menu a.hover {
web/css/bootstrap.css:  background-color: #dddddd;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#eeeeee), to(#dddddd));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #eeeeee, #dddddd);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #eeeeee, #dddddd);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #eeeeee), color-stop(100%, #dddddd));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #eeeeee, #dddddd);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #eeeeee, #dddddd);
web/css/bootstrap.css:  background-image: linear-gradient(top, #eeeeee, #dddddd);
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.025), inset 0 -1px rgba(0, 0, 0, 0.025);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.025), inset 0 -1px rgba(0, 0, 0, 0.025);
web/css/bootstrap.css:  box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.025), inset 0 -1px rgba(0, 0, 0, 0.025);
web/css/bootstrap.css:.open .dropdown-toggle,
web/css/bootstrap.css:.dropdown.open .dropdown-toggle {
web/css/bootstrap.css:.open .menu-dropdown,
web/css/bootstrap.css:.dropdown.open .menu-dropdown,
web/css/bootstrap.css:.open .dropdown-menu,
web/css/bootstrap.css:.dropdown.open .dropdown-menu {
web/css/bootstrap.css:  list-style: none;
web/css/bootstrap.css:  border-color: #ddd;
web/css/bootstrap.css:  border-style: solid;
web/css/bootstrap.css:  border-width: 0 0 1px;
web/css/bootstrap.css:  margin-bottom: -1px;
web/css/bootstrap.css:  margin-right: 2px;
web/css/bootstrap.css:  line-height: 34px;
web/css/bootstrap.css:  -webkit-border-radius: 4px 4px 0 0;
web/css/bootstrap.css:  -moz-border-radius: 4px 4px 0 0;
web/css/bootstrap.css:  border-radius: 4px 4px 0 0;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  background-color: #eee;
web/css/bootstrap.css:  border-color: #eee #eee #ddd;
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  border-bottom-color: transparent;
web/css/bootstrap.css:.tabs .menu-dropdown, .tabs .dropdown-menu {
web/css/bootstrap.css:  border-width: 1px;
web/css/bootstrap.css:  -webkit-border-radius: 0 6px 6px 6px;
web/css/bootstrap.css:  -moz-border-radius: 0 6px 6px 6px;
web/css/bootstrap.css:  border-radius: 0 6px 6px 6px;
web/css/bootstrap.css:.tabs a.menu:after, .tabs .dropdown-toggle:after {
web/css/bootstrap.css:  border-top-color: #999;
web/css/bootstrap.css:  margin-top: 15px;
web/css/bootstrap.css:  margin-left: 5px;
web/css/bootstrap.css:.tabs li.open.menu .menu, .tabs .open.dropdown .dropdown-toggle {
web/css/bootstrap.css:  border-color: #999;
web/css/bootstrap.css:.tabs li.open a.menu:after, .tabs .dropdown.open .dropdown-toggle:after {
web/css/bootstrap.css:  border-top-color: #555;
web/css/bootstrap.css:  line-height: 30px;
web/css/bootstrap.css:  text-shadow: 0 1px 1px #ffffff;
web/css/bootstrap.css:  -webkit-border-radius: 15px;
web/css/bootstrap.css:  -moz-border-radius: 15px;
web/css/bootstrap.css:  border-radius: 15px;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  background-color: #00438a;
web/css/bootstrap.css:  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  background-color: #0069d6;
web/css/bootstrap.css:.pills-vertical > li {
web/css/bootstrap.css:.tab-content > .tab-pane,
web/css/bootstrap.css:.pill-content > .pill-pane,
web/css/bootstrap.css:.tab-content > div,
web/css/bootstrap.css:.pill-content > div {
web/css/bootstrap.css:.tab-content > .active, .pill-content > .active {
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#ffffff), to(#f5f5f5));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #ffffff, #f5f5f5);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #ffffff, #f5f5f5);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ffffff), color-stop(100%, #f5f5f5));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #ffffff, #f5f5f5);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #ffffff, #f5f5f5);
web/css/bootstrap.css:  background-image: linear-gradient(top, #ffffff, #f5f5f5);
web/css/bootstrap.css:  -webkit-border-radius: 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px;
web/css/bootstrap.css:  border-radius: 3px;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 0 #ffffff;
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 0 #ffffff;
web/css/bootstrap.css:  box-shadow: inset 0 1px 0 #ffffff;
web/css/bootstrap.css:  text-shadow: 0 1px 0 #ffffff;
web/css/bootstrap.css:.hero-unit {
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  margin-bottom: 30px;
web/css/bootstrap.css:  -webkit-border-radius: 6px;
web/css/bootstrap.css:  -moz-border-radius: 6px;
web/css/bootstrap.css:  border-radius: 6px;
web/css/bootstrap.css:.hero-unit h1 {
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:  font-size: 60px;
web/css/bootstrap.css:  line-height: 1;
web/css/bootstrap.css:  letter-spacing: -1px;
web/css/bootstrap.css:.hero-unit p {
web/css/bootstrap.css:  font-size: 18px;
web/css/bootstrap.css:  font-weight: 200;
web/css/bootstrap.css:  line-height: 27px;
web/css/bootstrap.css:  margin-top: 17px;
web/css/bootstrap.css:  padding-top: 17px;
web/css/bootstrap.css:  border-top: 1px solid #eee;
web/css/bootstrap.css:.page-header {
web/css/bootstrap.css:  margin-bottom: 17px;
web/css/bootstrap.css:  border-bottom: 1px solid #ddd;
web/css/bootstrap.css:  -webkit-box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
web/css/bootstrap.css:  -moz-box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
web/css/bootstrap.css:  box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
web/css/bootstrap.css:.page-header h1 {
web/css/bootstrap.css:  margin-bottom: 8px;
web/css/bootstrap.css:.alert-message.danger,
web/css/bootstrap.css:.alert-message.danger:hover,
web/css/bootstrap.css:.alert-message.error,
web/css/bootstrap.css:.alert-message.error:hover,
web/css/bootstrap.css:.alert-message.success,
web/css/bootstrap.css:.alert-message.success:hover,
web/css/bootstrap.css:.alert-message.info,
web/css/bootstrap.css:.alert-message.info:hover {
web/css/bootstrap.css:.btn .close, .alert-message .close {
web/css/bootstrap.css:  font-family: Arial, sans-serif;
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:.alert-message.danger,
web/css/bootstrap.css:.alert-message.error {
web/css/bootstrap.css:  background-color: #c43c35;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#ee5f5b), to(#c43c35));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #ee5f5b, #c43c35);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #ee5f5b, #c43c35);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ee5f5b), color-stop(100%, #c43c35));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #ee5f5b, #c43c35);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #ee5f5b, #c43c35);
web/css/bootstrap.css:  background-image: linear-gradient(top, #ee5f5b, #c43c35);
web/css/bootstrap.css:  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  border-color: #c43c35 #c43c35 #882a25;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:.btn.success, .alert-message.success {
web/css/bootstrap.css:  background-color: #57a957;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#62c462), to(#57a957));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #62c462, #57a957);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #62c462, #57a957);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #62c462), color-stop(100%, #57a957));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #62c462, #57a957);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #62c462, #57a957);
web/css/bootstrap.css:  background-image: linear-gradient(top, #62c462, #57a957);
web/css/bootstrap.css:  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  border-color: #57a957 #57a957 #3d773d;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:.btn.info, .alert-message.info {
web/css/bootstrap.css:  background-color: #339bb9;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#5bc0de), to(#339bb9));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #5bc0de, #339bb9);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #5bc0de, #339bb9);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #5bc0de), color-stop(100%, #339bb9));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #5bc0de, #339bb9);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #5bc0de, #339bb9);
web/css/bootstrap.css:  background-image: linear-gradient(top, #5bc0de, #339bb9);
web/css/bootstrap.css:  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  border-color: #339bb9 #339bb9 #22697d;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  display: inline-block;
web/css/bootstrap.css:  background-color: #e6e6e6;
web/css/bootstrap.css:  background-repeat: no-repeat;
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#ffffff), color-stop(25%, #ffffff), to(#e6e6e6));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #ffffff, #ffffff 25%, #e6e6e6);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
web/css/bootstrap.css:  background-image: -o-linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
web/css/bootstrap.css:  background-image: linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
web/css/bootstrap.css:  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
web/css/bootstrap.css:  font-size: 13px;
web/css/bootstrap.css:  line-height: normal;
web/css/bootstrap.css:  border-bottom-color: #bbb;
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  -webkit-transition: 0.1s linear all;
web/css/bootstrap.css:  -moz-transition: 0.1s linear all;
web/css/bootstrap.css:  -ms-transition: 0.1s linear all;
web/css/bootstrap.css:  -o-transition: 0.1s linear all;
web/css/bootstrap.css:  background-position: 0 -15px;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  background-color: #0064cd;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#049cdb), to(#0064cd));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #049cdb, #0064cd);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #049cdb, #0064cd);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #049cdb), color-stop(100%, #0064cd));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #049cdb, #0064cd);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #049cdb, #0064cd);
web/css/bootstrap.css:  background-image: linear-gradient(top, #049cdb, #0064cd);
web/css/bootstrap.css:  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  border-color: #0064cd #0064cd #003f81;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  background-image: none;
web/css/bootstrap.css:  -khtml-opacity: 0.65;
web/css/bootstrap.css:  -moz-opacity: 0.65;
web/css/bootstrap.css:  -webkit-box-shadow: none;
web/css/bootstrap.css:  -moz-box-shadow: none;
web/css/bootstrap.css:  box-shadow: none;
web/css/bootstrap.css:  background-image: none;
web/css/bootstrap.css:  -khtml-opacity: 0.65;
web/css/bootstrap.css:  -moz-opacity: 0.65;
web/css/bootstrap.css:  -webkit-box-shadow: none;
web/css/bootstrap.css:  -moz-box-shadow: none;
web/css/bootstrap.css:  box-shadow: none;
web/css/bootstrap.css:  font-size: 15px;
web/css/bootstrap.css:  line-height: normal;
web/css/bootstrap.css:  -webkit-border-radius: 6px;
web/css/bootstrap.css:  -moz-border-radius: 6px;
web/css/bootstrap.css:  border-radius: 6px;
web/css/bootstrap.css:  font-size: 11px;
web/css/bootstrap.css::root .alert-message, :root .btn {
web/css/bootstrap.css:  border-radius: 0 \0;
web/css/bootstrap.css:button.btn::-moz-focus-inner, input[type=submit].btn::-moz-focus-inner {
web/css/bootstrap.css:  font-size: 20px;
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  line-height: 13.5px;
web/css/bootstrap.css:  text-shadow: 0 1px 0 #ffffff;
web/css/bootstrap.css:  -khtml-opacity: 0.25;
web/css/bootstrap.css:  -moz-opacity: 0.25;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  -khtml-opacity: 0.4;
web/css/bootstrap.css:  -moz-opacity: 0.4;
web/css/bootstrap.css:.alert-message {
web/css/bootstrap.css:  margin-bottom: 18px;
web/css/bootstrap.css:  background-color: #eedc94;
web/css/bootstrap.css:  background-repeat: repeat-x;
web/css/bootstrap.css:  background-image: -khtml-gradient(linear, left top, left bottom, from(#fceec1), to(#eedc94));
web/css/bootstrap.css:  background-image: -moz-linear-gradient(top, #fceec1, #eedc94);
web/css/bootstrap.css:  background-image: -ms-linear-gradient(top, #fceec1, #eedc94);
web/css/bootstrap.css:  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fceec1), color-stop(100%, #eedc94));
web/css/bootstrap.css:  background-image: -webkit-linear-gradient(top, #fceec1, #eedc94);
web/css/bootstrap.css:  background-image: -o-linear-gradient(top, #fceec1, #eedc94);
web/css/bootstrap.css:  background-image: linear-gradient(top, #fceec1, #eedc94);
web/css/bootstrap.css:  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  border-color: #eedc94 #eedc94 #e4c652;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
web/css/bootstrap.css:  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
web/css/bootstrap.css:  border-width: 1px;
web/css/bootstrap.css:  border-style: solid;
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:.alert-message .close {
web/css/bootstrap.css:  margin-top: 1px;
web/css/bootstrap.css:  *margin-top: 0;
web/css/bootstrap.css:.alert-message a {
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:.alert-message.danger p a,
web/css/bootstrap.css:.alert-message.error p a,
web/css/bootstrap.css:.alert-message.success p a,
web/css/bootstrap.css:.alert-message.info p a {
web/css/bootstrap.css:.alert-message h5 {
web/css/bootstrap.css:  line-height: 18px;
web/css/bootstrap.css:.alert-message p {
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:.alert-message div {
web/css/bootstrap.css:  margin-top: 5px;
web/css/bootstrap.css:  margin-bottom: 2px;
web/css/bootstrap.css:  line-height: 28px;
web/css/bootstrap.css:.alert-message .btn {
web/css/bootstrap.css:  -webkit-box-shadow: 0 1px 0 rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  -moz-box-shadow: 0 1px 0 rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:  box-shadow: 0 1px 0 rgba(255, 255, 255, 0.25);
web/css/bootstrap.css:.alert-message.block-message {
web/css/bootstrap.css:  background-image: none;
web/css/bootstrap.css:  background-color: #fdf5d9;
web/css/bootstrap.css:  border-color: #fceec1;
web/css/bootstrap.css:  -webkit-box-shadow: none;
web/css/bootstrap.css:  -moz-box-shadow: none;
web/css/bootstrap.css:  box-shadow: none;
web/css/bootstrap.css:.alert-message.block-message ul, .alert-message.block-message p {
web/css/bootstrap.css:  margin-right: 30px;
web/css/bootstrap.css:.alert-message.block-message ul {
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:.alert-message.block-message li {
web/css/bootstrap.css:.alert-message.block-message .alert-actions {
web/css/bootstrap.css:  margin-top: 5px;
web/css/bootstrap.css:.alert-message.block-message.error, .alert-message.block-message.success, .alert-message.block-message.info {
web/css/bootstrap.css:  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
web/css/bootstrap.css:.alert-message.block-message.error {
web/css/bootstrap.css:  background-color: #fddfde;
web/css/bootstrap.css:  border-color: #fbc7c6;
web/css/bootstrap.css:.alert-message.block-message.success {
web/css/bootstrap.css:  background-color: #d1eed1;
web/css/bootstrap.css:  border-color: #bfe7bf;
web/css/bootstrap.css:.alert-message.block-message.info {
web/css/bootstrap.css:  background-color: #ddf4fb;
web/css/bootstrap.css:  border-color: #c6edf9;
web/css/bootstrap.css:.alert-message.block-message.danger p a,
web/css/bootstrap.css:.alert-message.block-message.error p a,
web/css/bootstrap.css:.alert-message.block-message.success p a,
web/css/bootstrap.css:.alert-message.block-message.info p a {
web/css/bootstrap.css:  -webkit-border-radius: 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px;
web/css/bootstrap.css:  border-radius: 3px;
web/css/bootstrap.css:  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  -moz-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  line-height: 34px;
web/css/bootstrap.css:  border-right: 1px solid;
web/css/bootstrap.css:  border-right-color: #ddd;
web/css/bootstrap.css:  border-right-color: rgba(0, 0, 0, 0.15);
web/css/bootstrap.css:  *border-right-color: #ddd;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  background-color: #c7eefe;
web/css/bootstrap.css:  background-color: transparent;
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  margin-bottom: 20px;
web/css/bootstrap.css:  min-height: 20px;
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
web/css/bootstrap.css:  border-color: #ddd;
web/css/bootstrap.css:  border-color: rgba(0, 0, 0, 0.15);
web/css/bootstrap.css:.modal-backdrop {
web/css/bootstrap.css:  background-color: #000000;
web/css/bootstrap.css:  z-index: 10000;
web/css/bootstrap.css:.modal-backdrop.fade {
web/css/bootstrap.css:.modal-backdrop, .modal-backdrop.fade.in {
web/css/bootstrap.css:  -khtml-opacity: 0.8;
web/css/bootstrap.css:  -moz-opacity: 0.8;
web/css/bootstrap.css:  z-index: 11000;
web/css/bootstrap.css:  margin: -250px 0 0 -280px;
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  /* IE6-7 */
web/css/bootstrap.css:  -webkit-border-radius: 6px;
web/css/bootstrap.css:  -moz-border-radius: 6px;
web/css/bootstrap.css:  border-radius: 6px;
web/css/bootstrap.css:  -webkit-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
web/css/bootstrap.css:  -moz-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
web/css/bootstrap.css:  box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
web/css/bootstrap.css:  -webkit-background-clip: padding-box;
web/css/bootstrap.css:  -moz-background-clip: padding-box;
web/css/bootstrap.css:  background-clip: padding-box;
web/css/bootstrap.css:  margin-top: 7px;
web/css/bootstrap.css:  -webkit-transition: opacity .3s linear, top .3s ease-out;
web/css/bootstrap.css:  -moz-transition: opacity .3s linear, top .3s ease-out;
web/css/bootstrap.css:  -ms-transition: opacity .3s linear, top .3s ease-out;
web/css/bootstrap.css:  -o-transition: opacity .3s linear, top .3s ease-out;
web/css/bootstrap.css:  transition: opacity .3s linear, top .3s ease-out;
web/css/bootstrap.css:  top: -25%;
web/css/bootstrap.css:.modal-header {
web/css/bootstrap.css:  border-bottom: 1px solid #eee;
web/css/bootstrap.css:.modal-body {
web/css/bootstrap.css:.modal-body form {
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:.modal-footer {
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  border-top: 1px solid #ddd;
web/css/bootstrap.css:  -webkit-border-radius: 0 0 6px 6px;
web/css/bootstrap.css:  -moz-border-radius: 0 0 6px 6px;
web/css/bootstrap.css:  border-radius: 0 0 6px 6px;
web/css/bootstrap.css:  -webkit-box-shadow: inset 0 1px 0 #ffffff;
web/css/bootstrap.css:  -moz-box-shadow: inset 0 1px 0 #ffffff;
web/css/bootstrap.css:  box-shadow: inset 0 1px 0 #ffffff;
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:.modal-footer:before, .modal-footer:after {
web/css/bootstrap.css:.modal-footer:after {
web/css/bootstrap.css:.modal-footer .btn {
web/css/bootstrap.css:  margin-left: 5px;
web/css/bootstrap.css:  z-index: 12000;
web/css/bootstrap.css:  font-size: 11px;
web/css/bootstrap.css:  z-index: 1000;
web/css/bootstrap.css:  -khtml-opacity: 0.8;
web/css/bootstrap.css:  -moz-opacity: 0.8;
web/css/bootstrap.css:  -khtml-opacity: 0.8;
web/css/bootstrap.css:  -moz-opacity: 0.8;
web/css/bootstrap.css:.twipsy.above .twipsy-arrow {
web/css/bootstrap.css:  margin-left: -5px;
web/css/bootstrap.css:  border-left: 5px solid transparent;
web/css/bootstrap.css:  border-right: 5px solid transparent;
web/css/bootstrap.css:  border-top: 5px solid #000000;
web/css/bootstrap.css:.twipsy.left .twipsy-arrow {
web/css/bootstrap.css:  margin-top: -5px;
web/css/bootstrap.css:  border-top: 5px solid transparent;
web/css/bootstrap.css:  border-bottom: 5px solid transparent;
web/css/bootstrap.css:  border-left: 5px solid #000000;
web/css/bootstrap.css:.twipsy.below .twipsy-arrow {
web/css/bootstrap.css:  margin-left: -5px;
web/css/bootstrap.css:  border-left: 5px solid transparent;
web/css/bootstrap.css:  border-right: 5px solid transparent;
web/css/bootstrap.css:  border-bottom: 5px solid #000000;
web/css/bootstrap.css:.twipsy.right .twipsy-arrow {
web/css/bootstrap.css:  margin-top: -5px;
web/css/bootstrap.css:  border-top: 5px solid transparent;
web/css/bootstrap.css:  border-bottom: 5px solid transparent;
web/css/bootstrap.css:  border-right: 5px solid #000000;
web/css/bootstrap.css:.twipsy-inner {
web/css/bootstrap.css:  background-color: #000000;
web/css/bootstrap.css:  text-align: center;
web/css/bootstrap.css:  max-width: 200px;
web/css/bootstrap.css:  text-decoration: none;
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:.twipsy-arrow {
web/css/bootstrap.css:  z-index: 1000;
web/css/bootstrap.css:  margin-left: -5px;
web/css/bootstrap.css:  border-left: 5px solid transparent;
web/css/bootstrap.css:  border-right: 5px solid transparent;
web/css/bootstrap.css:  border-top: 5px solid #000000;
web/css/bootstrap.css:  margin-top: -5px;
web/css/bootstrap.css:  border-top: 5px solid transparent;
web/css/bootstrap.css:  border-bottom: 5px solid transparent;
web/css/bootstrap.css:  border-right: 5px solid #000000;
web/css/bootstrap.css:  margin-left: -5px;
web/css/bootstrap.css:  border-left: 5px solid transparent;
web/css/bootstrap.css:  border-right: 5px solid transparent;
web/css/bootstrap.css:  border-bottom: 5px solid #000000;
web/css/bootstrap.css:  margin-top: -5px;
web/css/bootstrap.css:  border-top: 5px solid transparent;
web/css/bootstrap.css:  border-bottom: 5px solid transparent;
web/css/bootstrap.css:  border-left: 5px solid #000000;
web/css/bootstrap.css:  -webkit-border-radius: 6px;
web/css/bootstrap.css:  -moz-border-radius: 6px;
web/css/bootstrap.css:  border-radius: 6px;
web/css/bootstrap.css:  -webkit-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
web/css/bootstrap.css:  -moz-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
web/css/bootstrap.css:  box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
web/css/bootstrap.css:  background-color: #f5f5f5;
web/css/bootstrap.css:  line-height: 1;
web/css/bootstrap.css:  -webkit-border-radius: 3px 3px 0 0;
web/css/bootstrap.css:  -moz-border-radius: 3px 3px 0 0;
web/css/bootstrap.css:  border-radius: 3px 3px 0 0;
web/css/bootstrap.css:  border-bottom: 1px solid #eee;
web/css/bootstrap.css:  background-color: #ffffff;
web/css/bootstrap.css:  -webkit-border-radius: 0 0 3px 3px;
web/css/bootstrap.css:  -moz-border-radius: 0 0 3px 3px;
web/css/bootstrap.css:  border-radius: 0 0 3px 3px;
web/css/bootstrap.css:  -webkit-background-clip: padding-box;
web/css/bootstrap.css:  -moz-background-clip: padding-box;
web/css/bootstrap.css:  background-clip: padding-box;
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:  -webkit-transition: opacity 0.15s linear;
web/css/bootstrap.css:  -moz-transition: opacity 0.15s linear;
web/css/bootstrap.css:  -ms-transition: opacity 0.15s linear;
web/css/bootstrap.css:  -o-transition: opacity 0.15s linear;
web/css/bootstrap.css:  font-size: 9.75px;
web/css/bootstrap.css:  font-weight: bold;
web/css/bootstrap.css:  text-transform: uppercase;
web/css/bootstrap.css:  white-space: nowrap;
web/css/bootstrap.css:  background-color: #bfbfbf;
web/css/bootstrap.css:  -webkit-border-radius: 3px;
web/css/bootstrap.css:  -moz-border-radius: 3px;
web/css/bootstrap.css:  border-radius: 3px;
web/css/bootstrap.css:  background-color: #c43c35;
web/css/bootstrap.css:  background-color: #f89406;
web/css/bootstrap.css:  background-color: #46a546;
web/css/bootstrap.css:  background-color: #62cffc;
web/css/bootstrap.css:.media-grid {
web/css/bootstrap.css:  margin-left: -20px;
web/css/bootstrap.css:  margin-bottom: 0;
web/css/bootstrap.css:.media-grid:before, .media-grid:after {
web/css/bootstrap.css:.media-grid:after {
web/css/bootstrap.css:.media-grid li {
web/css/bootstrap.css:.media-grid a {
web/css/bootstrap.css:  -webkit-border-radius: 4px;
web/css/bootstrap.css:  -moz-border-radius: 4px;
web/css/bootstrap.css:  border-radius: 4px;
web/css/bootstrap.css:  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075);
web/css/bootstrap.css:  -moz-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075);
web/css/bootstrap.css:  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075);
web/css/bootstrap.css:.media-grid a img {
web/css/bootstrap.css:.media-grid a:hover {
web/css/bootstrap.css:  border-color: #0069d6;
web/css/bootstrap.css:  -webkit-box-shadow: 0 1px 4px rgba(0, 105, 214, 0.25);
web/css/bootstrap.css:  -moz-box-shadow: 0 1px 4px rgba(0, 105, 214, 0.25);
web/css/bootstrap.css:  box-shadow: 0 1px 4px rgba(0, 105, 214, 0.25);
Binary file web/favicon.ico matches
web/robots.txt:User-agent: *
