#######
## NOTE:  Transcoding presets and mappings are loaded separately via a Container extension, in order to
## allow modifying those configurations during testing
#######
parameters:
    ayamel.transcoding.temp_directory: %kernel.root_dir%/files/tmp

    ayamel.transcoding.ffmpegthumbnailer_path: /usr/bin/ffmpegthumbnailer

    ayamel.transcoding.rabbitmq_producer:
        connection: default
        exchange_options: { name: 'transcoding', type: direct }

    ayamel.transcoding.rabbitmq_consumer:
        connection: default
        exchange_options: { name: 'transcoding', type: direct }
        queue_options:    { name: 'transcoding' }
        callback:         ayamel.transcoding.consumer

services:
    ayamel.transcoding.mapper:
        class: Ayamel\TranscodingBundle\PresetMapper
        arguments: [%ayamel.transcoding.presets%, %ayamel.transcoding.preset_map%]
        scope: prototype

    ayamel.transcoding.manager:
        class: Ayamel\TranscodingBundle\TranscodeManager
        arguments:
            - @service_container
            - @ayamel.api.filesystem
            - @doctrine.odm.mongodb.document_manager
            - @transcoder
            - %ayamel.transcoding.temp_directory%
            - @event_dispatcher
            - %ayamel.transcoding.presets%
            - %ayamel.transcoding.preset_map%

    # This service listens for file uploads, then registers a resource to have it's uploaded file
    # transcoded asyncronously
    ayamel.transcoding.publisher_listener:
        class: Ayamel\TranscodingBundle\RabbitMQ\PublisherListener
        arguments: [@service_container]
        tags:
            - { name: ayamel.api.event_listener , event: ayamel.api.resolve_uploaded_content, method: onResolveUploadedContent, priority: 128 }

    # This service handles rabbitMQ for transcoding Resource files asyncronously
    ayamel.transcoding.consumer:
        class: Ayamel\TranscodingBundle\RabbitMQ\Consumer
        arguments: [@service_container, %ayamel.transcoding.preset_map%]

    #########################################################################
    ## Presets and Adapters
    ## Note: Eventually these should be moved into the AC\Transcoding library
    #########################################################################

    transcoding.adapter.ffmpegthumbnailer:
        class: Ayamel\TranscodingBundle\Adapter\FFmpegThumbnailerAdapter
        arguments: [%ayamel.transcoding.ffmpegthumbnailer_path%]
        tags:
            - { name: transcoding.adapter }

    transcoding.preset.video_thumbnail:
        class: Ayamel\TranscodingBundle\Preset\VideoToThumbnail
        scope: prototype
        tags:
            - { name: transcoding.preset }

    transcoding.preset.ffmpeg_generic_mp4:
        class: Ayamel\TranscodingBundle\Preset\VideoToMp4
        scope: prototype
        tags:
            - { name: transcoding.preset }

    transcoding.preset.ffmpeg_generic_webm:
        class: Ayamel\TranscodingBundle\Preset\VideoToWebM
        scope: prototype
        tags:
            - { name: transcoding.preset }
