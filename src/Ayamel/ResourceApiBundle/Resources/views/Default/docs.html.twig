{% extends "::base.html.twig" %}

{% block page_title %}
<div class="page-title">
  <h1>Resource API V1 Docs</h1>
  <hr />
</div>
{% endblock %}


{% block body %}
<style>
li code {
    font-size: 12px;
}
</style>
<h2>Version 1 API Routes <small>(work-in-progress)</small><h2>
<p>The api endpoint is <code>{{app.request.BaseUrl}}/api/v1/rest</code>.</p>
<p>Test the api via your browser <a href='{{app.request.BaseUrl}}/'>here</a>.</p>
<p>Browse static example responses <a href='{{app.request.BasePath}}/examples'>here</a>.</p>
<ul>
    <li>
        <code>POST: /resources</code>
        <p>Create a resource object by sending JSON data.</p>
    </li>
    <li>
        <code>GET: /resources/{id}</code>
        <p>Retrieve a resource object by its ID.</p>
    </li>
    <li>
        <code>PUT: /resources/{id}</code>
        <p>Modify values on a resource object by its ID.</p>
    </li>
    <li>
        <code>DELETE: /resources/{id}</code>
        <p>Remove a resource object by its ID.</p>
    </li>
    <li>
        <code>GET: /resources/{id}/request-upload-url</code>
        <p>Request a valid content upload URL for a resource.</p>
    </li>
    <li>
        <code>POST: /resources/{id}/content/{token}</code>
        <p>Receives and processes content for a resource.  Content can be specified in one of several formats.  If multiple formats are supplied, only the first matching format will be handled, and others will be ignored.  By default all previous content will be removed and replaced by the new content received.  If old content should be preseved, provided the query parameter <code>replace=false</code> in the url.  The available formats are:</p>
        <ul>
            <li><p>Upload a file to be stored and automatically transcoded by the Ayamel server by providing a file upload via the <code>file</code> post field.</p></li>
            <li><p>Specify a reference to an original file via a public URI, this can be done via the <code>uri</code> post field, or by passing a JSON object with the <code>uri</code> key.  The specified uri will be processed to check for availability. If the uri is in a custom format known to the Ayamel Resource Library, other resource information may be derived and added into the resource.</p></li>
            <li><p>Specify an array of file references on a remote file server by passing a JSON object with the <code>remoteFiles</code> key containing an array of file objects.  These references are stored exactly as received.</p></li>
        </ul>
    </li>
    <li>
        <code>GET: /resources/scan</code>
        <p>Returns a full resource structure, given a uri.  The uri should be suplied in the "uri" query parameter after the "?" in the url.  This route can be used for deriving resources from special uris, like youtube videos, in order to pre-fill forms for users who want to add something from there.</p>
    </li>
    <li>
        <code>GET: /resources/search</code>
        <p>Returns array of resources references based on search parameters.</p>
    </li>
    <li>
        <code>GET: /resources/{id}/embed</code>
        <p>Returns an embeddable player for a resource.  Intended to be used similar the way that YouTube's HTML5 iframe player works.</p>
    </li>
    <li>
        <code>GET: /resources/multi</code>
        <p>Retrieve multiple resources by ID, or a subset of certain fields.  This is for bulk retrieval of entire objects, not search.</p>
    </li>
    <li>
        <code>POST: /resources/multi</code>
        <p>Create multiple resources in one operation.</p>
    </li>
    <li>
        <code>PUT: /resources/multi</code>
        <p>Modify multiple resources in one operation.</p>
    </li>
    <li>
        <code>DELETE: /resources/multi</code>
        <p>Delete multiple resources in one operation.</p>
    </li>
    
</ul>
{% endblock %}
